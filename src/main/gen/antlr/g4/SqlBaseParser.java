package antlr.g4;

import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.ATN;
import org.antlr.v4.runtime.atn.ATNDeserializer;
import org.antlr.v4.runtime.atn.ParserATNSimulator;
import org.antlr.v4.runtime.atn.PredictionContextCache;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.Utils;
import org.antlr.v4.runtime.tree.ParseTreeListener;
import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.tree.TerminalNode;

import java.util.ArrayList;
import java.util.List;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class SqlBaseParser extends Parser {
    public static final int
            SEMICOLON = 1, LEFT_PAREN = 2, RIGHT_PAREN = 3, COMMA = 4, DOT = 5, LEFT_BRACKET = 6,
            RIGHT_BRACKET = 7, ADD = 8, AFTER = 9, ALL = 10, ALTER = 11, ANALYZE = 12, AND = 13,
            ANTI = 14, ANY = 15, ANY_VALUE = 16, ARCHIVE = 17, ARRAY = 18, AS = 19, ASC = 20, AT = 21,
            AUTHORIZATION = 22, BETWEEN = 23, BOTH = 24, BUCKET = 25, BUCKETS = 26, BY = 27, CACHE = 28,
            CASCADE = 29, CASE = 30, CAST = 31, CATALOG = 32, CATALOGS = 33, CHANGE = 34, CHECK = 35,
            CLEAR = 36, CLUSTER = 37, CLUSTERED = 38, CODEGEN = 39, COLLATE = 40, COLLECTION = 41,
            COLUMN = 42, COLUMNS = 43, COMMENT = 44, COMMIT = 45, COMPACT = 46, COMPACTIONS = 47,
            COMPUTE = 48, CONCATENATE = 49, CONSTRAINT = 50, COST = 51, CREATE = 52, CROSS = 53,
            CUBE = 54, CURRENT = 55, CURRENT_DATE = 56, CURRENT_TIME = 57, CURRENT_TIMESTAMP = 58,
            CURRENT_USER = 59, DAY = 60, DAYOFYEAR = 61, DATA = 62, DATABASE = 63, DATABASES = 64,
            DATEADD = 65, DATEDIFF = 66, DBPROPERTIES = 67, DEFAULT = 68, DEFINED = 69, DELETE = 70,
            DELIMITED = 71, DESC = 72, DESCRIBE = 73, DFS = 74, DIRECTORIES = 75, DIRECTORY = 76,
            DISTINCT = 77, DISTRIBUTE = 78, DIV = 79, DROP = 80, ELSE = 81, END = 82, ESCAPE = 83,
            ESCAPED = 84, EXCEPT = 85, EXCHANGE = 86, EXISTS = 87, EXPLAIN = 88, EXPORT = 89,
            EXTENDED = 90, EXTERNAL = 91, EXTRACT = 92, FALSE = 93, FETCH = 94, FIELDS = 95, FILTER = 96,
            FILEFORMAT = 97, FIRST = 98, FOLLOWING = 99, FOR = 100, FOREIGN = 101, FORMAT = 102,
            FORMATTED = 103, FROM = 104, FULL = 105, FUNCTION = 106, FUNCTIONS = 107, GLOBAL = 108,
            GRANT = 109, GROUP = 110, GROUPING = 111, HAVING = 112, HOUR = 113, IF = 114, IGNORE = 115,
            IMPORT = 116, IN = 117, INDEX = 118, INDEXES = 119, INNER = 120, INPATH = 121, INPUTFORMAT = 122,
            INSERT = 123, INTERSECT = 124, INTERVAL = 125, INTO = 126, IS = 127, ITEMS = 128,
            JOIN = 129, KEYS = 130, LAST = 131, LATERAL = 132, LAZY = 133, LEADING = 134, LEFT = 135,
            LIKE = 136, ILIKE = 137, LIMIT = 138, LINES = 139, LIST = 140, LOAD = 141, LOCAL = 142,
            LOCATION = 143, LOCK = 144, LOCKS = 145, LOGICAL = 146, MACRO = 147, MAP = 148, MATCHED = 149,
            MERGE = 150, MICROSECOND = 151, MILLISECOND = 152, MINUTE = 153, MONTH = 154, MSCK = 155,
            NAMESPACE = 156, NAMESPACES = 157, NATURAL = 158, NO = 159, NOT = 160, NULL = 161,
            NULLS = 162, OF = 163, OFFSET = 164, ON = 165, ONLY = 166, OPTION = 167, OPTIONS = 168,
            OR = 169, ORDER = 170, OUT = 171, OUTER = 172, OUTPUTFORMAT = 173, OVER = 174, OVERLAPS = 175,
            OVERLAY = 176, OVERWRITE = 177, PARTITION = 178, PARTITIONED = 179, PARTITIONS = 180,
            PERCENTILE_CONT = 181, PERCENTILE_DISC = 182, PERCENTLIT = 183, PIVOT = 184, PLACING = 185,
            POSITION = 186, PRECEDING = 187, PRIMARY = 188, PRINCIPALS = 189, PROPERTIES = 190,
            PURGE = 191, QUARTER = 192, QUERY = 193, RANGE = 194, RECORDREADER = 195, RECORDWRITER = 196,
            RECOVER = 197, REDUCE = 198, REFERENCES = 199, REFRESH = 200, RENAME = 201, REPAIR = 202,
            REPEATABLE = 203, REPLACE = 204, RESET = 205, RESPECT = 206, RESTRICT = 207, REVOKE = 208,
            RIGHT = 209, RLIKE = 210, ROLE = 211, ROLES = 212, ROLLBACK = 213, ROLLUP = 214, ROW = 215,
            ROWS = 216, SECOND = 217, SCHEMA = 218, SCHEMAS = 219, SELECT = 220, SEMI = 221, SEPARATED = 222,
            SERDE = 223, SERDEPROPERTIES = 224, SESSION_USER = 225, SET = 226, SETMINUS = 227,
            SETS = 228, SHOW = 229, SKEWED = 230, SOME = 231, SORT = 232, SORTED = 233, START = 234,
            STATISTICS = 235, STORED = 236, STRATIFY = 237, STRUCT = 238, SUBSTR = 239, SUBSTRING = 240,
            SYNC = 241, SYSTEM_TIME = 242, SYSTEM_VERSION = 243, TABLE = 244, TABLES = 245,
            TABLESAMPLE = 246, TBLPROPERTIES = 247, TEMPORARY = 248, TERMINATED = 249, THEN = 250,
            TIME = 251, TIMESTAMP = 252, TIMESTAMPADD = 253, TIMESTAMPDIFF = 254, TO = 255,
            TOUCH = 256, TRAILING = 257, TRANSACTION = 258, TRANSACTIONS = 259, TRANSFORM = 260,
            TRIM = 261, TRUE = 262, TRUNCATE = 263, TRY_CAST = 264, TYPE = 265, UNARCHIVE = 266,
            UNBOUNDED = 267, UNCACHE = 268, UNION = 269, UNIQUE = 270, UNKNOWN = 271, UNLOCK = 272,
            UNSET = 273, UPDATE = 274, USE = 275, USER = 276, USING = 277, VALUES = 278, VERSION = 279,
            VIEW = 280, VIEWS = 281, WEEK = 282, WHEN = 283, WHERE = 284, WINDOW = 285, WITH = 286,
            WITHIN = 287, YEAR = 288, ZONE = 289, EQ = 290, NSEQ = 291, NEQ = 292, NEQJ = 293, LT = 294,
            LTE = 295, GT = 296, GTE = 297, PLUS = 298, MINUS = 299, ASTERISK = 300, SLASH = 301,
            PERCENT = 302, TILDE = 303, AMPERSAND = 304, PIPE = 305, CONCAT_PIPE = 306, HAT = 307,
            COLON = 308, ARROW = 309, HENT_START = 310, HENT_END = 311, STRING = 312, BIGINT_LITERAL = 313,
            SMALLINT_LITERAL = 314, TINYINT_LITERAL = 315, INTEGER_VALUE = 316, EXPONENT_VALUE = 317,
            DECIMAL_VALUE = 318, FLOAT_LITERAL = 319, DOUBLE_LITERAL = 320, BIGDECIMAL_LITERAL = 321,
            IDENTIFIER = 322, BACKQUOTED_IDENTIFIER = 323, SIMPLE_COMMENT = 324, BRACKETED_COMMENT = 325,
            WS = 326, UNRECOGNIZED = 327;
    public static final int
            RULE_singleStatement = 0, RULE_singleExpression = 1, RULE_singleTableIdentifier = 2,
            RULE_singleMultipartIdentifier = 3, RULE_singleFunctionIdentifier = 4,
            RULE_singleDataType = 5, RULE_singleTableSchema = 6, RULE_statement = 7,
            RULE_configKey = 8, RULE_configValue = 9, RULE_unsupportedHiveNativeCommands = 10,
            RULE_createTableHeader = 11, RULE_replaceTableHeader = 12, RULE_bucketSpec = 13,
            RULE_skewSpec = 14, RULE_locationSpec = 15, RULE_commentSpec = 16, RULE_query = 17,
            RULE_insertInto = 18, RULE_partitionSpecLocation = 19, RULE_partitionSpec = 20,
            RULE_partitionVal = 21, RULE_namespace = 22, RULE_namespaces = 23, RULE_describeFuncName = 24,
            RULE_describeColName = 25, RULE_ctes = 26, RULE_namedQuery = 27, RULE_tableProvider = 28,
            RULE_createTableClauses = 29, RULE_propertyList = 30, RULE_property = 31,
            RULE_propertyKey = 32, RULE_propertyValue = 33, RULE_constantList = 34,
            RULE_nestedConstantList = 35, RULE_createFileFormat = 36, RULE_fileFormat = 37,
            RULE_storageHandler = 38, RULE_resource = 39, RULE_dmlStatementNoWith = 40,
            RULE_queryOrganization = 41, RULE_multiInsertQueryBody = 42, RULE_queryTerm = 43,
            RULE_queryPrimary = 44, RULE_sortItem = 45, RULE_fromStatement = 46, RULE_fromStatementBody = 47,
            RULE_querySpecification = 48, RULE_transformClause = 49, RULE_selectClause = 50,
            RULE_setClause = 51, RULE_matchedClause = 52, RULE_notMatchedClause = 53,
            RULE_matchedAction = 54, RULE_notMatchedAction = 55, RULE_assignmentList = 56,
            RULE_assignment = 57, RULE_whereClause = 58, RULE_havingClause = 59, RULE_hint = 60,
            RULE_hintStatement = 61, RULE_fromClause = 62, RULE_temporalClause = 63,
            RULE_aggregationClause = 64, RULE_groupByClause = 65, RULE_groupingAnalytics = 66,
            RULE_groupingElement = 67, RULE_groupingSet = 68, RULE_pivotClause = 69,
            RULE_pivotColumn = 70, RULE_pivotValue = 71, RULE_lateralView = 72, RULE_setQuantifier = 73,
            RULE_relation = 74, RULE_joinRelation = 75, RULE_joinType = 76, RULE_joinCriteria = 77,
            RULE_sample = 78, RULE_sampleMethod = 79, RULE_identifierList = 80, RULE_identifierSeq = 81,
            RULE_orderedIdentifierList = 82, RULE_orderedIdentifier = 83, RULE_identifierCommentList = 84,
            RULE_identifierComment = 85, RULE_relationPrimary = 86, RULE_inlineTable = 87,
            RULE_functionTable = 88, RULE_tableAlias = 89, RULE_rowFormat = 90, RULE_multipartIdentifierList = 91,
            RULE_multipartIdentifier = 92, RULE_multipartIdentifierPropertyList = 93,
            RULE_multipartIdentifierProperty = 94, RULE_tableIdentifier = 95, RULE_functionIdentifier = 96,
            RULE_namedExpression = 97, RULE_namedExpressionSeq = 98, RULE_partitionFieldList = 99,
            RULE_partitionField = 100, RULE_transform = 101, RULE_transformArgument = 102,
            RULE_expression = 103, RULE_expressionSeq = 104, RULE_booleanExpression = 105,
            RULE_predicate = 106, RULE_valueExpression = 107, RULE_datetimeUnit = 108,
            RULE_primaryExpression = 109, RULE_constant = 110, RULE_comparisonOperator = 111,
            RULE_arithmeticOperator = 112, RULE_predicateOperator = 113, RULE_booleanValue = 114,
            RULE_interval = 115, RULE_errorCapturingMultiUnitsInterval = 116, RULE_multiUnitsInterval = 117,
            RULE_errorCapturingUnitToUnitInterval = 118, RULE_unitToUnitInterval = 119,
            RULE_intervalValue = 120, RULE_colPosition = 121, RULE_dataType = 122,
            RULE_qualifiedColTypeWithPositionList = 123, RULE_qualifiedColTypeWithPosition = 124,
            RULE_defaultExpression = 125, RULE_colTypeList = 126, RULE_colType = 127,
            RULE_createOrReplaceTableColTypeList = 128, RULE_createOrReplaceTableColType = 129,
            RULE_complexColTypeList = 130, RULE_complexColType = 131, RULE_whenClause = 132,
            RULE_windowClause = 133, RULE_namedWindow = 134, RULE_windowSpec = 135,
            RULE_windowFrame = 136, RULE_frameBound = 137, RULE_qualifiedNameList = 138,
            RULE_functionName = 139, RULE_qualifiedName = 140, RULE_errorCapturingIdentifier = 141,
            RULE_errorCapturingIdentifierExtra = 142, RULE_identifier = 143, RULE_strictIdentifier = 144,
            RULE_quotedIdentifier = 145, RULE_number = 146, RULE_alterColumnAction = 147,
            RULE_ansiNonReserved = 148, RULE_strictNonReserved = 149, RULE_nonReserved = 150;
    public static final String[] ruleNames = makeRuleNames();
    /**
     * @deprecated Use {@link #VOCABULARY} instead.
     */
    @Deprecated
    public static final String[] tokenNames;
    protected static final DFA[] _decisionToDFA;
    protected static final PredictionContextCache _sharedContextCache =
            new PredictionContextCache();
    private static final String[] _LITERAL_NAMES = makeLiteralNames();
    private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
    public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);
    private static final String _serializedATNSegment0 =
            "\u0004\u0001\u0147\u0d18\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001" +
                    "\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004" +
                    "\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007" +
                    "\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b" +
                    "\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007" +
                    "\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007" +
                    "\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007" +
                    "\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007" +
                    "\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007" +
                    "\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007" +
                    "\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007" +
                    "\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002\'\u0007" +
                    "\'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007" +
                    ",\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u0007" +
                    "1\u00022\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u0007" +
                    "6\u00027\u00077\u00028\u00078\u00029\u00079\u0002:\u0007:\u0002;\u0007" +
                    ";\u0002<\u0007<\u0002=\u0007=\u0002>\u0007>\u0002?\u0007?\u0002@\u0007" +
                    "@\u0002A\u0007A\u0002B\u0007B\u0002C\u0007C\u0002D\u0007D\u0002E\u0007" +
                    "E\u0002F\u0007F\u0002G\u0007G\u0002H\u0007H\u0002I\u0007I\u0002J\u0007" +
                    "J\u0002K\u0007K\u0002L\u0007L\u0002M\u0007M\u0002N\u0007N\u0002O\u0007" +
                    "O\u0002P\u0007P\u0002Q\u0007Q\u0002R\u0007R\u0002S\u0007S\u0002T\u0007" +
                    "T\u0002U\u0007U\u0002V\u0007V\u0002W\u0007W\u0002X\u0007X\u0002Y\u0007" +
                    "Y\u0002Z\u0007Z\u0002[\u0007[\u0002\\\u0007\\\u0002]\u0007]\u0002^\u0007" +
                    "^\u0002_\u0007_\u0002`\u0007`\u0002a\u0007a\u0002b\u0007b\u0002c\u0007" +
                    "c\u0002d\u0007d\u0002e\u0007e\u0002f\u0007f\u0002g\u0007g\u0002h\u0007" +
                    "h\u0002i\u0007i\u0002j\u0007j\u0002k\u0007k\u0002l\u0007l\u0002m\u0007" +
                    "m\u0002n\u0007n\u0002o\u0007o\u0002p\u0007p\u0002q\u0007q\u0002r\u0007" +
                    "r\u0002s\u0007s\u0002t\u0007t\u0002u\u0007u\u0002v\u0007v\u0002w\u0007" +
                    "w\u0002x\u0007x\u0002y\u0007y\u0002z\u0007z\u0002{\u0007{\u0002|\u0007" +
                    "|\u0002}\u0007}\u0002~\u0007~\u0002\u007f\u0007\u007f\u0002\u0080\u0007" +
                    "\u0080\u0002\u0081\u0007\u0081\u0002\u0082\u0007\u0082\u0002\u0083\u0007" +
                    "\u0083\u0002\u0084\u0007\u0084\u0002\u0085\u0007\u0085\u0002\u0086\u0007" +
                    "\u0086\u0002\u0087\u0007\u0087\u0002\u0088\u0007\u0088\u0002\u0089\u0007" +
                    "\u0089\u0002\u008a\u0007\u008a\u0002\u008b\u0007\u008b\u0002\u008c\u0007" +
                    "\u008c\u0002\u008d\u0007\u008d\u0002\u008e\u0007\u008e\u0002\u008f\u0007" +
                    "\u008f\u0002\u0090\u0007\u0090\u0002\u0091\u0007\u0091\u0002\u0092\u0007" +
                    "\u0092\u0002\u0093\u0007\u0093\u0002\u0094\u0007\u0094\u0002\u0095\u0007" +
                    "\u0095\u0002\u0096\u0007\u0096\u0001\u0000\u0001\u0000\u0005\u0000\u0131" +
                    "\b\u0000\n\u0000\f\u0000\u0134\t\u0000\u0001\u0000\u0001\u0000\u0001\u0001" +
                    "\u0001\u0001\u0001\u0001\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0003" +
                    "\u0001\u0003\u0001\u0003\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0005" +
                    "\u0001\u0005\u0001\u0005\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0007" +
                    "\u0001\u0007\u0003\u0007\u014c\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0003\u0007\u0159\b\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0160\b\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0005\u0007" +
                    "\u0168\b\u0007\n\u0007\f\u0007\u016b\t\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u017e\b\u0007\u0001\u0007\u0001" +
                    "\u0007\u0003\u0007\u0182\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0003\u0007\u0188\b\u0007\u0001\u0007\u0003\u0007\u018b\b\u0007" +
                    "\u0001\u0007\u0003\u0007\u018e\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0003\u0007\u0195\b\u0007\u0001\u0007\u0003\u0007" +
                    "\u0198\b\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u019c\b\u0007\u0001" +
                    "\u0007\u0003\u0007\u019f\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0003\u0007\u01a6\b\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0005\u0007\u01b1\b\u0007\n\u0007\f\u0007\u01b4\t\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u01bb\b\u0007" +
                    "\u0001\u0007\u0003\u0007\u01be\b\u0007\u0001\u0007\u0001\u0007\u0003\u0007" +
                    "\u01c2\b\u0007\u0001\u0007\u0003\u0007\u01c5\b\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u01cb\b\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0003\u0007\u01d6\b\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0003\u0007\u01dc\b\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0003\u0007\u01e1\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0203" +
                    "\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003" +
                    "\u0007\u0210\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0003\u0007\u0229\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0232\b\u0007\u0001" +
                    "\u0007\u0001\u0007\u0003\u0007\u0236\b\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0003\u0007\u023c\b\u0007\u0001\u0007\u0001\u0007\u0003" +
                    "\u0007\u0240\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0245" +
                    "\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u024b" +
                    "\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0257" +
                    "\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0003\u0007\u025f\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0003\u0007\u0265\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0003\u0007\u0272\b\u0007\u0001\u0007\u0004\u0007\u0275" +
                    "\b\u0007\u000b\u0007\f\u0007\u0276\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007" +
                    "\u0287\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0005\u0007\u028c\b" +
                    "\u0007\n\u0007\f\u0007\u028f\t\u0007\u0001\u0007\u0003\u0007\u0292\b\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0298\b\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0003\u0007\u02a7\b\u0007\u0001\u0007\u0001\u0007\u0003\u0007" +
                    "\u02ab\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007" +
                    "\u02b1\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007" +
                    "\u02b7\b\u0007\u0001\u0007\u0003\u0007\u02ba\b\u0007\u0001\u0007\u0003" +
                    "\u0007\u02bd\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003" +
                    "\u0007\u02c3\b\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u02c7\b\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0005\u0007\u02cf\b\u0007\n\u0007\f\u0007\u02d2\t\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u02da" +
                    "\b\u0007\u0001\u0007\u0003\u0007\u02dd\b\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007" +
                    "\u02e6\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u02eb\b" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u02f1" +
                    "\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003" +
                    "\u0007\u02f8\b\u0007\u0001\u0007\u0003\u0007\u02fb\b\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0301\b\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0005\u0007\u030a\b\u0007\n\u0007\f\u0007\u030d\t\u0007\u0003\u0007\u030f" +
                    "\b\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0313\b\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0003\u0007\u0318\b\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0003\u0007\u031d\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0003\u0007\u0324\b\u0007\u0001\u0007\u0003\u0007" +
                    "\u0327\b\u0007\u0001\u0007\u0003\u0007\u032a\b\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0331\b\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0336\b\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003" +
                    "\u0007\u033f\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0003\u0007\u0347\b\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0003\u0007\u034d\b\u0007\u0001\u0007\u0003\u0007\u0350" +
                    "\b\u0007\u0001\u0007\u0003\u0007\u0353\b\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0003\u0007\u0359\b\u0007\u0001\u0007\u0001\u0007" +
                    "\u0003\u0007\u035d\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007" +
                    "\u0362\b\u0007\u0001\u0007\u0003\u0007\u0365\b\u0007\u0001\u0007\u0001" +
                    "\u0007\u0003\u0007\u0369\b\u0007\u0003\u0007\u036b\b\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007" +
                    "\u0373\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0003\u0007\u037b\b\u0007\u0001\u0007\u0003\u0007\u037e\b" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0383\b\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0389\b\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u038f\b\u0007\u0001" +
                    "\u0007\u0003\u0007\u0392\b\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0396" +
                    "\b\u0007\u0001\u0007\u0003\u0007\u0399\b\u0007\u0001\u0007\u0001\u0007" +
                    "\u0003\u0007\u039d\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0005\u0007\u03b7\b\u0007\n\u0007\f\u0007\u03ba" +
                    "\t\u0007\u0003\u0007\u03bc\b\u0007\u0001\u0007\u0001\u0007\u0003\u0007" +
                    "\u03c0\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007" +
                    "\u03c6\b\u0007\u0001\u0007\u0003\u0007\u03c9\b\u0007\u0001\u0007\u0003" +
                    "\u0007\u03cc\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003" +
                    "\u0007\u03d2\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0003\u0007\u03da\b\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0003\u0007\u03df\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0003\u0007\u03e5\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0003\u0007\u03eb\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u03f3\b\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0005\u0007\u03f8\b\u0007\n\u0007\f\u0007\u03fb\t\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0005\u0007\u0400\b\u0007\n\u0007" +
                    "\f\u0007\u0403\t\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0005\u0007\u0411\b\u0007\n\u0007\f\u0007\u0414" +
                    "\t\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0005\u0007\u041f\b\u0007\n" +
                    "\u0007\f\u0007\u0422\t\u0007\u0003\u0007\u0424\b\u0007\u0001\u0007\u0001" +
                    "\u0007\u0005\u0007\u0428\b\u0007\n\u0007\f\u0007\u042b\t\u0007\u0001\u0007" +
                    "\u0001\u0007\u0001\u0007\u0001\u0007\u0005\u0007\u0431\b\u0007\n\u0007" +
                    "\f\u0007\u0434\t\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007" +
                    "\u0005\u0007\u043a\b\u0007\n\u0007\f\u0007\u043d\t\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0444\b\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0449\b\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0003\u0007\u044e\b\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0455\b\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u045b\b\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0003\u0007\u0460\b\u0007\u0001\u0007\u0001\u0007\u0001" +
                    "\u0007\u0001\u0007\u0005\u0007\u0466\b\u0007\n\u0007\f\u0007\u0469\t\u0007" +
                    "\u0003\u0007\u046b\b\u0007\u0001\b\u0001\b\u0001\t\u0001\t\u0001\n\u0001" +
                    "\n\u0001\n\u0001\n\u0001\n\u0001\n\u0003\n\u0477\b\n\u0001\n\u0001\n\u0003" +
                    "\n\u047b\b\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0003\n\u0482\b\n" +
                    "\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001" +
                    "\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001" +
                    "\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001" +
                    "\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001" +
                    "\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001" +
                    "\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001" +
                    "\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001" +
                    "\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001" +
                    "\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001" +
                    "\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001" +
                    "\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001" +
                    "\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001" +
                    "\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0003\n\u04f6\b\n\u0001" +
                    "\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0003\n\u04fe\b\n\u0001\n\u0001" +
                    "\n\u0001\n\u0001\n\u0001\n\u0001\n\u0003\n\u0506\b\n\u0001\n\u0001\n\u0001" +
                    "\n\u0001\n\u0001\n\u0001\n\u0001\n\u0003\n\u050f\b\n\u0001\n\u0001\n\u0001" +
                    "\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0003\n\u0519\b\n\u0001\u000b" +
                    "\u0001\u000b\u0003\u000b\u051d\b\u000b\u0001\u000b\u0003\u000b\u0520\b" +
                    "\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0003\u000b\u0526" +
                    "\b\u000b\u0001\u000b\u0001\u000b\u0001\f\u0001\f\u0003\f\u052c\b\f\u0001" +
                    "\f\u0001\f\u0001\f\u0001\f\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001" +
                    "\r\u0003\r\u0538\b\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\u000e\u0001" +
                    "\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0003\u000e\u0544" +
                    "\b\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0003\u000e\u0549\b\u000e" +
                    "\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u0010\u0001\u0010\u0001\u0010" +
                    "\u0001\u0011\u0003\u0011\u0552\b\u0011\u0001\u0011\u0001\u0011\u0001\u0011" +
                    "\u0001\u0012\u0001\u0012\u0001\u0012\u0003\u0012\u055a\b\u0012\u0001\u0012" +
                    "\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0003\u0012\u0561\b\u0012" +
                    "\u0003\u0012\u0563\b\u0012\u0001\u0012\u0003\u0012\u0566\b\u0012\u0001" +
                    "\u0012\u0001\u0012\u0001\u0012\u0003\u0012\u056b\b\u0012\u0001\u0012\u0001" +
                    "\u0012\u0003\u0012\u056f\b\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0003" +
                    "\u0012\u0574\b\u0012\u0001\u0012\u0003\u0012\u0577\b\u0012\u0001\u0012" +
                    "\u0001\u0012\u0001\u0012\u0003\u0012\u057c\b\u0012\u0001\u0012\u0001\u0012" +
                    "\u0001\u0012\u0003\u0012\u0581\b\u0012\u0001\u0012\u0003\u0012\u0584\b" +
                    "\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0003\u0012\u0589\b\u0012\u0001" +
                    "\u0012\u0001\u0012\u0003\u0012\u058d\b\u0012\u0001\u0012\u0001\u0012\u0001" +
                    "\u0012\u0003\u0012\u0592\b\u0012\u0003\u0012\u0594\b\u0012\u0001\u0013" +
                    "\u0001\u0013\u0003\u0013\u0598\b\u0013\u0001\u0014\u0001\u0014\u0001\u0014" +
                    "\u0001\u0014\u0001\u0014\u0005\u0014\u059f\b\u0014\n\u0014\f\u0014\u05a2" +
                    "\t\u0014\u0001\u0014\u0001\u0014\u0001\u0015\u0001\u0015\u0001\u0015\u0003" +
                    "\u0015\u05a9\b\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0003" +
                    "\u0015\u05af\b\u0015\u0001\u0016\u0001\u0016\u0001\u0017\u0001\u0017\u0001" +
                    "\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0003\u0018\u05ba" +
                    "\b\u0018\u0001\u0019\u0001\u0019\u0001\u0019\u0005\u0019\u05bf\b\u0019" +
                    "\n\u0019\f\u0019\u05c2\t\u0019\u0001\u001a\u0001\u001a\u0001\u001a\u0001" +
                    "\u001a\u0005\u001a\u05c8\b\u001a\n\u001a\f\u001a\u05cb\t\u001a\u0001\u001b" +
                    "\u0001\u001b\u0003\u001b\u05cf\b\u001b\u0001\u001b\u0003\u001b\u05d2\b" +
                    "\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001c\u0001" +
                    "\u001c\u0001\u001c\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001" +
                    "\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001d\u0001" +
                    "\u001d\u0001\u001d\u0001\u001d\u0005\u001d\u05e8\b\u001d\n\u001d\f\u001d" +
                    "\u05eb\t\u001d\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0005\u001e" +
                    "\u05f1\b\u001e\n\u001e\f\u001e\u05f4\t\u001e\u0001\u001e\u0001\u001e\u0001" +
                    "\u001f\u0001\u001f\u0003\u001f\u05fa\b\u001f\u0001\u001f\u0003\u001f\u05fd" +
                    "\b\u001f\u0001 \u0001 \u0001 \u0005 \u0602\b \n \f \u0605\t \u0001 \u0003" +
                    " \u0608\b \u0001!\u0001!\u0001!\u0001!\u0003!\u060e\b!\u0001\"\u0001\"" +
                    "\u0001\"\u0001\"\u0005\"\u0614\b\"\n\"\f\"\u0617\t\"\u0001\"\u0001\"\u0001" +
                    "#\u0001#\u0001#\u0001#\u0005#\u061f\b#\n#\f#\u0622\t#\u0001#\u0001#\u0001" +
                    "$\u0001$\u0001$\u0001$\u0001$\u0001$\u0003$\u062c\b$\u0001%\u0001%\u0001" +
                    "%\u0001%\u0001%\u0003%\u0633\b%\u0001&\u0001&\u0001&\u0001&\u0003&\u0639" +
                    "\b&\u0001\'\u0001\'\u0001\'\u0001(\u0001(\u0001(\u0001(\u0001(\u0004(" +
                    "\u0643\b(\u000b(\f(\u0644\u0001(\u0001(\u0001(\u0001(\u0001(\u0003(\u064c" +
                    "\b(\u0001(\u0001(\u0001(\u0001(\u0001(\u0003(\u0653\b(\u0001(\u0001(\u0001" +
                    "(\u0001(\u0001(\u0001(\u0001(\u0001(\u0001(\u0001(\u0003(\u065f\b(\u0001" +
                    "(\u0001(\u0001(\u0001(\u0005(\u0665\b(\n(\f(\u0668\t(\u0001(\u0005(\u066b" +
                    "\b(\n(\f(\u066e\t(\u0003(\u0670\b(\u0001)\u0001)\u0001)\u0001)\u0001)" +
                    "\u0005)\u0677\b)\n)\f)\u067a\t)\u0003)\u067c\b)\u0001)\u0001)\u0001)\u0001" +
                    ")\u0001)\u0005)\u0683\b)\n)\f)\u0686\t)\u0003)\u0688\b)\u0001)\u0001)" +
                    "\u0001)\u0001)\u0001)\u0005)\u068f\b)\n)\f)\u0692\t)\u0003)\u0694\b)\u0001" +
                    ")\u0001)\u0001)\u0001)\u0001)\u0005)\u069b\b)\n)\f)\u069e\t)\u0003)\u06a0" +
                    "\b)\u0001)\u0003)\u06a3\b)\u0001)\u0001)\u0001)\u0003)\u06a8\b)\u0003" +
                    ")\u06aa\b)\u0001)\u0001)\u0003)\u06ae\b)\u0001*\u0001*\u0001*\u0001+\u0001" +
                    "+\u0001+\u0001+\u0001+\u0001+\u0001+\u0003+\u06ba\b+\u0001+\u0001+\u0001" +
                    "+\u0001+\u0001+\u0003+\u06c1\b+\u0001+\u0001+\u0001+\u0001+\u0001+\u0003" +
                    "+\u06c8\b+\u0001+\u0005+\u06cb\b+\n+\f+\u06ce\t+\u0001,\u0001,\u0001," +
                    "\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0003,\u06d9\b,\u0001-\u0001" +
                    "-\u0003-\u06dd\b-\u0001-\u0001-\u0003-\u06e1\b-\u0001.\u0001.\u0004.\u06e5" +
                    "\b.\u000b.\f.\u06e6\u0001/\u0001/\u0003/\u06eb\b/\u0001/\u0001/\u0001" +
                    "/\u0001/\u0005/\u06f1\b/\n/\f/\u06f4\t/\u0001/\u0003/\u06f7\b/\u0001/" +
                    "\u0003/\u06fa\b/\u0001/\u0003/\u06fd\b/\u0001/\u0003/\u0700\b/\u0001/" +
                    "\u0001/\u0003/\u0704\b/\u00010\u00010\u00030\u0708\b0\u00010\u00050\u070b" +
                    "\b0\n0\f0\u070e\t0\u00010\u00030\u0711\b0\u00010\u00030\u0714\b0\u0001" +
                    "0\u00030\u0717\b0\u00010\u00030\u071a\b0\u00010\u00010\u00030\u071e\b" +
                    "0\u00010\u00050\u0721\b0\n0\f0\u0724\t0\u00010\u00030\u0727\b0\u00010" +
                    "\u00030\u072a\b0\u00010\u00030\u072d\b0\u00010\u00030\u0730\b0\u00030" +
                    "\u0732\b0\u00011\u00011\u00011\u00011\u00031\u0738\b1\u00011\u00011\u0001" +
                    "1\u00011\u00011\u00031\u073f\b1\u00011\u00011\u00011\u00031\u0744\b1\u0001" +
                    "1\u00031\u0747\b1\u00011\u00031\u074a\b1\u00011\u00011\u00031\u074e\b" +
                    "1\u00011\u00011\u00011\u00011\u00011\u00011\u00011\u00011\u00031\u0758" +
                    "\b1\u00011\u00011\u00031\u075c\b1\u00031\u075e\b1\u00011\u00031\u0761" +
                    "\b1\u00011\u00011\u00031\u0765\b1\u00012\u00012\u00052\u0769\b2\n2\f2" +
                    "\u076c\t2\u00012\u00032\u076f\b2\u00012\u00012\u00013\u00013\u00013\u0001" +
                    "4\u00014\u00014\u00014\u00034\u077a\b4\u00014\u00014\u00014\u00015\u0001" +
                    "5\u00015\u00015\u00015\u00035\u0784\b5\u00015\u00015\u00015\u00016\u0001" +
                    "6\u00016\u00016\u00016\u00016\u00016\u00036\u0790\b6\u00017\u00017\u0001" +
                    "7\u00017\u00017\u00017\u00017\u00017\u00017\u00017\u00017\u00057\u079d" +
                    "\b7\n7\f7\u07a0\t7\u00017\u00017\u00037\u07a4\b7\u00018\u00018\u00018" +
                    "\u00058\u07a9\b8\n8\f8\u07ac\t8\u00019\u00019\u00019\u00019\u0001:\u0001" +
                    ":\u0001:\u0001;\u0001;\u0001;\u0001<\u0001<\u0001<\u0003<\u07bb\b<\u0001" +
                    "<\u0005<\u07be\b<\n<\f<\u07c1\t<\u0001<\u0001<\u0001=\u0001=\u0001=\u0001" +
                    "=\u0001=\u0001=\u0005=\u07cb\b=\n=\f=\u07ce\t=\u0001=\u0001=\u0003=\u07d2" +
                    "\b=\u0001>\u0001>\u0001>\u0001>\u0005>\u07d8\b>\n>\f>\u07db\t>\u0001>" +
                    "\u0005>\u07de\b>\n>\f>\u07e1\t>\u0001>\u0003>\u07e4\b>\u0001?\u0003?\u07e7" +
                    "\b?\u0001?\u0001?\u0001?\u0001?\u0001?\u0003?\u07ee\b?\u0001?\u0001?\u0001" +
                    "?\u0001?\u0003?\u07f4\b?\u0001@\u0001@\u0001@\u0001@\u0001@\u0005@\u07fb" +
                    "\b@\n@\f@\u07fe\t@\u0001@\u0001@\u0001@\u0001@\u0001@\u0005@\u0805\b@" +
                    "\n@\f@\u0808\t@\u0001@\u0001@\u0001@\u0001@\u0001@\u0001@\u0001@\u0001" +
                    "@\u0001@\u0001@\u0005@\u0814\b@\n@\f@\u0817\t@\u0001@\u0001@\u0003@\u081b" +
                    "\b@\u0003@\u081d\b@\u0001A\u0001A\u0003A\u0821\bA\u0001B\u0001B\u0001" +
                    "B\u0001B\u0001B\u0005B\u0828\bB\nB\fB\u082b\tB\u0001B\u0001B\u0001B\u0001" +
                    "B\u0001B\u0001B\u0001B\u0001B\u0005B\u0835\bB\nB\fB\u0838\tB\u0001B\u0001" +
                    "B\u0003B\u083c\bB\u0001C\u0001C\u0003C\u0840\bC\u0001D\u0001D\u0001D\u0001" +
                    "D\u0005D\u0846\bD\nD\fD\u0849\tD\u0003D\u084b\bD\u0001D\u0001D\u0003D" +
                    "\u084f\bD\u0001E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001E\u0001" +
                    "E\u0001E\u0005E\u085b\bE\nE\fE\u085e\tE\u0001E\u0001E\u0001E\u0001F\u0001" +
                    "F\u0001F\u0001F\u0001F\u0005F\u0868\bF\nF\fF\u086b\tF\u0001F\u0001F\u0003" +
                    "F\u086f\bF\u0001G\u0001G\u0003G\u0873\bG\u0001G\u0003G\u0876\bG\u0001" +
                    "H\u0001H\u0001H\u0003H\u087b\bH\u0001H\u0001H\u0001H\u0001H\u0001H\u0005" +
                    "H\u0882\bH\nH\fH\u0885\tH\u0003H\u0887\bH\u0001H\u0001H\u0001H\u0003H" +
                    "\u088c\bH\u0001H\u0001H\u0001H\u0005H\u0891\bH\nH\fH\u0894\tH\u0003H\u0896" +
                    "\bH\u0001I\u0001I\u0001J\u0003J\u089b\bJ\u0001J\u0001J\u0005J\u089f\b" +
                    "J\nJ\fJ\u08a2\tJ\u0001K\u0001K\u0001K\u0003K\u08a7\bK\u0001K\u0001K\u0003" +
                    "K\u08ab\bK\u0001K\u0001K\u0001K\u0001K\u0003K\u08b1\bK\u0001K\u0001K\u0003" +
                    "K\u08b5\bK\u0001L\u0003L\u08b8\bL\u0001L\u0001L\u0001L\u0003L\u08bd\b" +
                    "L\u0001L\u0003L\u08c0\bL\u0001L\u0001L\u0001L\u0003L\u08c5\bL\u0001L\u0001" +
                    "L\u0003L\u08c9\bL\u0001L\u0003L\u08cc\bL\u0001L\u0003L\u08cf\bL\u0001" +
                    "M\u0001M\u0001M\u0001M\u0003M\u08d5\bM\u0001N\u0001N\u0001N\u0003N\u08da" +
                    "\bN\u0001N\u0001N\u0001N\u0001N\u0001N\u0003N\u08e1\bN\u0001O\u0003O\u08e4" +
                    "\bO\u0001O\u0001O\u0001O\u0001O\u0001O\u0001O\u0001O\u0001O\u0001O\u0001" +
                    "O\u0001O\u0001O\u0001O\u0001O\u0001O\u0001O\u0003O\u08f6\bO\u0003O\u08f8" +
                    "\bO\u0001O\u0003O\u08fb\bO\u0001P\u0001P\u0001P\u0001P\u0001Q\u0001Q\u0001" +
                    "Q\u0005Q\u0904\bQ\nQ\fQ\u0907\tQ\u0001R\u0001R\u0001R\u0001R\u0005R\u090d" +
                    "\bR\nR\fR\u0910\tR\u0001R\u0001R\u0001S\u0001S\u0003S\u0916\bS\u0001T" +
                    "\u0001T\u0001T\u0001T\u0005T\u091c\bT\nT\fT\u091f\tT\u0001T\u0001T\u0001" +
                    "U\u0001U\u0003U\u0925\bU\u0001V\u0001V\u0003V\u0929\bV\u0001V\u0003V\u092c" +
                    "\bV\u0001V\u0001V\u0001V\u0001V\u0001V\u0001V\u0003V\u0934\bV\u0001V\u0001" +
                    "V\u0001V\u0001V\u0001V\u0001V\u0003V\u093c\bV\u0001V\u0001V\u0001V\u0001" +
                    "V\u0003V\u0942\bV\u0001W\u0001W\u0001W\u0001W\u0005W\u0948\bW\nW\fW\u094b" +
                    "\tW\u0001W\u0001W\u0001X\u0001X\u0001X\u0001X\u0001X\u0005X\u0954\bX\n" +
                    "X\fX\u0957\tX\u0003X\u0959\bX\u0001X\u0001X\u0001X\u0001Y\u0003Y\u095f" +
                    "\bY\u0001Y\u0001Y\u0003Y\u0963\bY\u0003Y\u0965\bY\u0001Z\u0001Z\u0001" +
                    "Z\u0001Z\u0001Z\u0001Z\u0001Z\u0003Z\u096e\bZ\u0001Z\u0001Z\u0001Z\u0001" +
                    "Z\u0001Z\u0001Z\u0001Z\u0001Z\u0001Z\u0001Z\u0003Z\u097a\bZ\u0003Z\u097c" +
                    "\bZ\u0001Z\u0001Z\u0001Z\u0001Z\u0001Z\u0003Z\u0983\bZ\u0001Z\u0001Z\u0001" +
                    "Z\u0001Z\u0001Z\u0003Z\u098a\bZ\u0001Z\u0001Z\u0001Z\u0001Z\u0003Z\u0990" +
                    "\bZ\u0001Z\u0001Z\u0001Z\u0001Z\u0003Z\u0996\bZ\u0003Z\u0998\bZ\u0001" +
                    "[\u0001[\u0001[\u0005[\u099d\b[\n[\f[\u09a0\t[\u0001\\\u0001\\\u0001\\" +
                    "\u0005\\\u09a5\b\\\n\\\f\\\u09a8\t\\\u0001]\u0001]\u0001]\u0005]\u09ad" +
                    "\b]\n]\f]\u09b0\t]\u0001^\u0001^\u0001^\u0003^\u09b5\b^\u0001_\u0001_" +
                    "\u0001_\u0003_\u09ba\b_\u0001_\u0001_\u0001`\u0001`\u0001`\u0003`\u09c1" +
                    "\b`\u0001`\u0001`\u0001a\u0001a\u0003a\u09c7\ba\u0001a\u0001a\u0003a\u09cb" +
                    "\ba\u0003a\u09cd\ba\u0001b\u0001b\u0001b\u0005b\u09d2\bb\nb\fb\u09d5\t" +
                    "b\u0001c\u0001c\u0001c\u0001c\u0005c\u09db\bc\nc\fc\u09de\tc\u0001c\u0001" +
                    "c\u0001d\u0001d\u0003d\u09e4\bd\u0001e\u0001e\u0001e\u0001e\u0001e\u0001" +
                    "e\u0005e\u09ec\be\ne\fe\u09ef\te\u0001e\u0001e\u0003e\u09f3\be\u0001f" +
                    "\u0001f\u0003f\u09f7\bf\u0001g\u0001g\u0001h\u0001h\u0001h\u0005h\u09fe" +
                    "\bh\nh\fh\u0a01\th\u0001i\u0001i\u0001i\u0001i\u0001i\u0001i\u0001i\u0001" +
                    "i\u0001i\u0001i\u0003i\u0a0d\bi\u0003i\u0a0f\bi\u0001i\u0001i\u0001i\u0001" +
                    "i\u0001i\u0001i\u0005i\u0a17\bi\ni\fi\u0a1a\ti\u0001j\u0003j\u0a1d\bj" +
                    "\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0003j\u0a25\bj\u0001j\u0001" +
                    "j\u0001j\u0001j\u0001j\u0005j\u0a2c\bj\nj\fj\u0a2f\tj\u0001j\u0001j\u0001" +
                    "j\u0003j\u0a34\bj\u0001j\u0001j\u0001j\u0001j\u0001j\u0001j\u0003j\u0a3c" +
                    "\bj\u0001j\u0001j\u0001j\u0003j\u0a41\bj\u0001j\u0001j\u0001j\u0001j\u0001" +
                    "j\u0001j\u0001j\u0001j\u0005j\u0a4b\bj\nj\fj\u0a4e\tj\u0001j\u0001j\u0003" +
                    "j\u0a52\bj\u0001j\u0003j\u0a55\bj\u0001j\u0001j\u0001j\u0001j\u0003j\u0a5b" +
                    "\bj\u0001j\u0001j\u0003j\u0a5f\bj\u0001j\u0001j\u0001j\u0003j\u0a64\b" +
                    "j\u0001j\u0001j\u0001j\u0003j\u0a69\bj\u0001j\u0001j\u0001j\u0003j\u0a6e" +
                    "\bj\u0001k\u0001k\u0001k\u0001k\u0003k\u0a74\bk\u0001k\u0001k\u0001k\u0001" +
                    "k\u0001k\u0001k\u0001k\u0001k\u0001k\u0001k\u0001k\u0001k\u0001k\u0001" +
                    "k\u0001k\u0001k\u0001k\u0001k\u0001k\u0005k\u0a89\bk\nk\fk\u0a8c\tk\u0001" +
                    "l\u0001l\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001" +
                    "m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001" +
                    "m\u0001m\u0001m\u0001m\u0004m\u0aa6\bm\u000bm\fm\u0aa7\u0001m\u0001m\u0003" +
                    "m\u0aac\bm\u0001m\u0001m\u0001m\u0001m\u0001m\u0004m\u0ab3\bm\u000bm\f" +
                    "m\u0ab4\u0001m\u0001m\u0003m\u0ab9\bm\u0001m\u0001m\u0001m\u0001m\u0001" +
                    "m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0005" +
                    "m\u0ac9\bm\nm\fm\u0acc\tm\u0003m\u0ace\bm\u0001m\u0001m\u0001m\u0001m" +
                    "\u0001m\u0001m\u0003m\u0ad6\bm\u0001m\u0001m\u0001m\u0001m\u0001m\u0001" +
                    "m\u0001m\u0003m\u0adf\bm\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001" +
                    "m\u0003m\u0ae8\bm\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001" +
                    "m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001" +
                    "m\u0001m\u0004m\u0afd\bm\u000bm\fm\u0afe\u0001m\u0001m\u0001m\u0001m\u0001" +
                    "m\u0001m\u0001m\u0001m\u0001m\u0003m\u0b0a\bm\u0001m\u0001m\u0001m\u0005" +
                    "m\u0b0f\bm\nm\fm\u0b12\tm\u0003m\u0b14\bm\u0001m\u0001m\u0001m\u0001m" +
                    "\u0001m\u0001m\u0001m\u0003m\u0b1d\bm\u0001m\u0001m\u0003m\u0b21\bm\u0001" +
                    "m\u0001m\u0003m\u0b25\bm\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001" +
                    "m\u0001m\u0004m\u0b2f\bm\u000bm\fm\u0b30\u0001m\u0001m\u0001m\u0001m\u0001" +
                    "m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001" +
                    "m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0003m\u0b4a" +
                    "\bm\u0001m\u0001m\u0001m\u0001m\u0001m\u0003m\u0b51\bm\u0001m\u0003m\u0b54" +
                    "\bm\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001" +
                    "m\u0001m\u0001m\u0001m\u0003m\u0b63\bm\u0001m\u0001m\u0001m\u0001m\u0001" +
                    "m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001" +
                    "m\u0001m\u0001m\u0001m\u0001m\u0003m\u0b78\bm\u0001m\u0001m\u0003m\u0b7c" +
                    "\bm\u0003m\u0b7e\bm\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001" +
                    "m\u0005m\u0b88\bm\nm\fm\u0b8b\tm\u0001n\u0001n\u0001n\u0001n\u0001n\u0001" +
                    "n\u0001n\u0001n\u0004n\u0b95\bn\u000bn\fn\u0b96\u0003n\u0b99\bn\u0001" +
                    "o\u0001o\u0001p\u0001p\u0001q\u0001q\u0001r\u0001r\u0001s\u0001s\u0001" +
                    "s\u0003s\u0ba6\bs\u0001t\u0001t\u0003t\u0baa\bt\u0001u\u0001u\u0001u\u0004" +
                    "u\u0baf\bu\u000bu\fu\u0bb0\u0001v\u0001v\u0001v\u0003v\u0bb6\bv\u0001" +
                    "w\u0001w\u0001w\u0001w\u0001w\u0001x\u0003x\u0bbe\bx\u0001x\u0001x\u0001" +
                    "y\u0001y\u0001y\u0003y\u0bc5\by\u0001z\u0001z\u0001z\u0001z\u0001z\u0001" +
                    "z\u0001z\u0001z\u0001z\u0001z\u0001z\u0001z\u0001z\u0001z\u0001z\u0003" +
                    "z\u0bd6\bz\u0001z\u0001z\u0003z\u0bda\bz\u0001z\u0001z\u0001z\u0001z\u0003" +
                    "z\u0be0\bz\u0001z\u0001z\u0001z\u0001z\u0003z\u0be6\bz\u0001z\u0001z\u0001" +
                    "z\u0001z\u0001z\u0005z\u0bed\bz\nz\fz\u0bf0\tz\u0001z\u0003z\u0bf3\bz" +
                    "\u0003z\u0bf5\bz\u0001{\u0001{\u0001{\u0005{\u0bfa\b{\n{\f{\u0bfd\t{\u0001" +
                    "|\u0001|\u0001|\u0001|\u0003|\u0c03\b|\u0001|\u0003|\u0c06\b|\u0001|\u0003" +
                    "|\u0c09\b|\u0001|\u0003|\u0c0c\b|\u0001}\u0001}\u0001}\u0001~\u0001~\u0001" +
                    "~\u0005~\u0c14\b~\n~\f~\u0c17\t~\u0001\u007f\u0001\u007f\u0001\u007f\u0001" +
                    "\u007f\u0003\u007f\u0c1d\b\u007f\u0001\u007f\u0003\u007f\u0c20\b\u007f" +
                    "\u0001\u0080\u0001\u0080\u0001\u0080\u0005\u0080\u0c25\b\u0080\n\u0080" +
                    "\f\u0080\u0c28\t\u0080\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0081" +
                    "\u0003\u0081\u0c2e\b\u0081\u0001\u0081\u0003\u0081\u0c31\b\u0081\u0001" +
                    "\u0081\u0003\u0081\u0c34\b\u0081\u0001\u0082\u0001\u0082\u0001\u0082\u0005" +
                    "\u0082\u0c39\b\u0082\n\u0082\f\u0082\u0c3c\t\u0082\u0001\u0083\u0001\u0083" +
                    "\u0003\u0083\u0c40\b\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0003\u0083" +
                    "\u0c45\b\u0083\u0001\u0083\u0003\u0083\u0c48\b\u0083\u0001\u0084\u0001" +
                    "\u0084\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0085\u0001\u0085\u0001" +
                    "\u0085\u0001\u0085\u0005\u0085\u0c53\b\u0085\n\u0085\f\u0085\u0c56\t\u0085" +
                    "\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0087\u0001\u0087" +
                    "\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087" +
                    "\u0001\u0087\u0001\u0087\u0001\u0087\u0005\u0087\u0c67\b\u0087\n\u0087" +
                    "\f\u0087\u0c6a\t\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087" +
                    "\u0001\u0087\u0005\u0087\u0c71\b\u0087\n\u0087\f\u0087\u0c74\t\u0087\u0003" +
                    "\u0087\u0c76\b\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001\u0087\u0001" +
                    "\u0087\u0005\u0087\u0c7d\b\u0087\n\u0087\f\u0087\u0c80\t\u0087\u0003\u0087" +
                    "\u0c82\b\u0087\u0003\u0087\u0c84\b\u0087\u0001\u0087\u0003\u0087\u0c87" +
                    "\b\u0087\u0001\u0087\u0003\u0087\u0c8a\b\u0087\u0001\u0088\u0001\u0088" +
                    "\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088" +
                    "\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088" +
                    "\u0001\u0088\u0001\u0088\u0003\u0088\u0c9c\b\u0088\u0001\u0089\u0001\u0089" +
                    "\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0003\u0089" +
                    "\u0ca5\b\u0089\u0001\u008a\u0001\u008a\u0001\u008a\u0005\u008a\u0caa\b" +
                    "\u008a\n\u008a\f\u008a\u0cad\t\u008a\u0001\u008b\u0001\u008b\u0001\u008b" +
                    "\u0001\u008b\u0003\u008b\u0cb3\b\u008b\u0001\u008c\u0001\u008c\u0001\u008c" +
                    "\u0005\u008c\u0cb8\b\u008c\n\u008c\f\u008c\u0cbb\t\u008c\u0001\u008d\u0001" +
                    "\u008d\u0001\u008d\u0001\u008e\u0001\u008e\u0004\u008e\u0cc2\b\u008e\u000b" +
                    "\u008e\f\u008e\u0cc3\u0001\u008e\u0003\u008e\u0cc7\b\u008e\u0001\u008f" +
                    "\u0001\u008f\u0001\u008f\u0003\u008f\u0ccc\b\u008f\u0001\u0090\u0001\u0090" +
                    "\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090\u0003\u0090\u0cd4\b\u0090" +
                    "\u0001\u0091\u0001\u0091\u0001\u0092\u0001\u0092\u0003\u0092\u0cda\b\u0092" +
                    "\u0001\u0092\u0001\u0092\u0001\u0092\u0003\u0092\u0cdf\b\u0092\u0001\u0092" +
                    "\u0001\u0092\u0001\u0092\u0003\u0092\u0ce4\b\u0092\u0001\u0092\u0001\u0092" +
                    "\u0003\u0092\u0ce8\b\u0092\u0001\u0092\u0001\u0092\u0003\u0092\u0cec\b" +
                    "\u0092\u0001\u0092\u0001\u0092\u0003\u0092\u0cf0\b\u0092\u0001\u0092\u0001" +
                    "\u0092\u0003\u0092\u0cf4\b\u0092\u0001\u0092\u0001\u0092\u0003\u0092\u0cf8" +
                    "\b\u0092\u0001\u0092\u0001\u0092\u0003\u0092\u0cfc\b\u0092\u0001\u0092" +
                    "\u0001\u0092\u0003\u0092\u0d00\b\u0092\u0001\u0092\u0003\u0092\u0d03\b" +
                    "\u0092\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001" +
                    "\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0003" +
                    "\u0093\u0d10\b\u0093\u0001\u0094\u0001\u0094\u0001\u0095\u0001\u0095\u0001" +
                    "\u0096\u0001\u0096\u0001\u0096\t\u03b8\u03f9\u0401\u0412\u0420\u0429\u0432" +
                    "\u043b\u0467\u0004V\u00d2\u00d6\u00da\u0097\u0000\u0002\u0004\u0006\b" +
                    "\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02" +
                    "468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088" +
                    "\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0" +
                    "\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8" +
                    "\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0" +
                    "\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8" +
                    "\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100" +
                    "\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118" +
                    "\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u0000;\u0002" +
                    "\u0000CC\u00be\u00be\u0002\u0000\u001d\u001d\u00cf\u00cf\u0002\u0000h" +
                    "huu\u0001\u0000*+\u0002\u0000\u00f4\u00f4\u0118\u0118\u0002\u0000\u000b" +
                    "\u000b\"\"\u0005\u0000\'\'33ZZgg\u0092\u0092\u0001\u0000HI\u0002\u0000" +
                    "ZZgg\u0002\u0000\u00a1\u00a1\u0138\u0138\u0003\u0000\b\bPP\u00f1\u00f1" +
                    "\u0002\u0000\b\b\u008c\u008c\u0002\u0000\u008e\u008e\u0138\u0138\u0003" +
                    "\u0000??\u009c\u009c\u00da\u00da\u0003\u0000@@\u009d\u009d\u00db\u00db" +
                    "\u0004\u0000UU||\u00e3\u00e3\u010d\u010d\u0003\u0000UU\u00e3\u00e3\u010d" +
                    "\u010d\u0002\u0000\u0014\u0014HH\u0002\u0000bb\u0083\u0083\u0002\u0000" +
                    "\u00f3\u00f3\u0117\u0117\u0002\u0000\u0138\u0138\u013c\u013c\u0002\u0000" +
                    "\u00f2\u00f2\u00fc\u00fc\u0002\u000066\u00d6\u00d6\u0002\u0000\n\nMM\u0002" +
                    "\u0000\u013c\u013c\u013e\u013e\u0001\u0000\u0088\u0089\u0003\u0000\n\n" +
                    "\u000f\u000f\u00e7\u00e7\u0003\u0000]]\u0106\u0106\u010f\u010f\u0002\u0000" +
                    "\u012a\u012b\u012f\u012f\u0002\u0000OO\u012c\u012e\u0002\u0000\u012a\u012b" +
                    "\u0132\u0132\u0007\u0000<=qq\u0097\u009a\u00c0\u00c0\u00d9\u00d9\u011a" +
                    "\u011a\u0120\u0120\u0003\u000088:;\u0114\u0114\u0002\u0000AA\u00fd\u00fd" +
                    "\u0002\u0000BB\u00fe\u00fe\u0002\u0000\u001f\u001f\u0108\u0108\u0002\u0000" +
                    "ss\u00ce\u00ce\u0001\u0000\u00ef\u00f0\u0002\u0000\u0004\u0004hh\u0002" +
                    "\u0000\u0004\u0004dd\u0003\u0000\u0018\u0018\u0086\u0086\u0101\u0101\u0001" +
                    "\u0000\u00b5\u00b6\u0001\u0000\u0122\u0129\u0002\u0000OO\u012a\u0133\u0004" +
                    "\u0000\r\ruu\u00a0\u00a0\u00a9\u00a9\u0002\u0000]]\u0106\u0106\u0001\u0000" +
                    "\u012a\u012b\u0003\u0000\u0138\u0138\u013c\u013c\u013e\u013e\u0002\u0000" +
                    "\u009a\u009a\u0120\u0120\u0004\u0000<<qq\u0099\u0099\u00d9\u00d9\u0003" +
                    "\u0000qq\u0099\u0099\u00d9\u00d9\u0002\u0000NN\u00b2\u00b2\u0002\u0000" +
                    "\u00aa\u00aa\u00e8\u00e8\u0002\u0000cc\u00bb\u00bb\u0001\u0000\u013d\u013e" +
                    "\u0002\u0000PP\u00e2\u00e23\u0000\b\t\u000b\f\u000e\u000e\u0010\u0012" +
                    "\u0014\u0015\u0017\u0017\u0019\u001d \"$\'))+13367<LNPTTV\\__acfgjloo" +
                    "qtvwy{}}\u0080\u0080\u0082\u0083\u0085\u0085\u0088\u009d\u009f\u009f\u00a2" +
                    "\u00a3\u00a7\u00a8\u00ab\u00ab\u00ad\u00ae\u00b0\u00b4\u00b7\u00bb\u00bd" +
                    "\u00c6\u00c8\u00d0\u00d2\u00db\u00dd\u00e0\u00e2\u00e6\u00e8\u00f3\u00f5" +
                    "\u00f9\u00fc\u00fe\u0100\u0100\u0102\u010c\u0110\u0113\u0116\u011a\u011d" +
                    "\u011d\u0120\u0121\u0010\u0000\u000e\u000e55UUiixx||\u0081\u0081\u0084" +
                    "\u0084\u0087\u0087\u009e\u009e\u00a5\u00a5\u00d1\u00d1\u00dd\u00dd\u00e3" +
                    "\u00e3\u010d\u010d\u0115\u0115\u0011\u0000\b\r\u000f46TVhjwy{}\u0080\u0082" +
                    "\u0083\u0085\u0086\u0088\u009d\u009f\u00a4\u00a6\u00d0\u00d2\u00dc\u00de" +
                    "\u00e2\u00e4\u010c\u010e\u0114\u0116\u0121\u0f20\u0000\u012e\u0001\u0000" +
                    "\u0000\u0000\u0002\u0137\u0001\u0000\u0000\u0000\u0004\u013a\u0001\u0000" +
                    "\u0000\u0000\u0006\u013d\u0001\u0000\u0000\u0000\b\u0140\u0001\u0000\u0000" +
                    "\u0000\n\u0143\u0001\u0000\u0000\u0000\f\u0146\u0001\u0000\u0000\u0000" +
                    "\u000e\u046a\u0001\u0000\u0000\u0000\u0010\u046c\u0001\u0000\u0000\u0000" +
                    "\u0012\u046e\u0001\u0000\u0000\u0000\u0014\u0518\u0001\u0000\u0000\u0000" +
                    "\u0016\u051a\u0001\u0000\u0000\u0000\u0018\u052b\u0001\u0000\u0000\u0000" +
                    "\u001a\u0531\u0001\u0000\u0000\u0000\u001c\u053d\u0001\u0000\u0000\u0000" +
                    "\u001e\u054a\u0001\u0000\u0000\u0000 \u054d\u0001\u0000\u0000\u0000\"" +
                    "\u0551\u0001\u0000\u0000\u0000$\u0593\u0001\u0000\u0000\u0000&\u0595\u0001" +
                    "\u0000\u0000\u0000(\u0599\u0001\u0000\u0000\u0000*\u05ae\u0001\u0000\u0000" +
                    "\u0000,\u05b0\u0001\u0000\u0000\u0000.\u05b2\u0001\u0000\u0000\u00000" +
                    "\u05b9\u0001\u0000\u0000\u00002\u05bb\u0001\u0000\u0000\u00004\u05c3\u0001" +
                    "\u0000\u0000\u00006\u05cc\u0001\u0000\u0000\u00008\u05d7\u0001\u0000\u0000" +
                    "\u0000:\u05e9\u0001\u0000\u0000\u0000<\u05ec\u0001\u0000\u0000\u0000>" +
                    "\u05f7\u0001\u0000\u0000\u0000@\u0607\u0001\u0000\u0000\u0000B\u060d\u0001" +
                    "\u0000\u0000\u0000D\u060f\u0001\u0000\u0000\u0000F\u061a\u0001\u0000\u0000" +
                    "\u0000H\u062b\u0001\u0000\u0000\u0000J\u0632\u0001\u0000\u0000\u0000L" +
                    "\u0634\u0001\u0000\u0000\u0000N\u063a\u0001\u0000\u0000\u0000P\u066f\u0001" +
                    "\u0000\u0000\u0000R\u067b\u0001\u0000\u0000\u0000T\u06af\u0001\u0000\u0000" +
                    "\u0000V\u06b2\u0001\u0000\u0000\u0000X\u06d8\u0001\u0000\u0000\u0000Z" +
                    "\u06da\u0001\u0000\u0000\u0000\\\u06e2\u0001\u0000\u0000\u0000^\u0703" +
                    "\u0001\u0000\u0000\u0000`\u0731\u0001\u0000\u0000\u0000b\u0746\u0001\u0000" +
                    "\u0000\u0000d\u0766\u0001\u0000\u0000\u0000f\u0772\u0001\u0000\u0000\u0000" +
                    "h\u0775\u0001\u0000\u0000\u0000j\u077e\u0001\u0000\u0000\u0000l\u078f" +
                    "\u0001\u0000\u0000\u0000n\u07a3\u0001\u0000\u0000\u0000p\u07a5\u0001\u0000" +
                    "\u0000\u0000r\u07ad\u0001\u0000\u0000\u0000t\u07b1\u0001\u0000\u0000\u0000" +
                    "v\u07b4\u0001\u0000\u0000\u0000x\u07b7\u0001\u0000\u0000\u0000z\u07d1" +
                    "\u0001\u0000\u0000\u0000|\u07d3\u0001\u0000\u0000\u0000~\u07f3\u0001\u0000" +
                    "\u0000\u0000\u0080\u081c\u0001\u0000\u0000\u0000\u0082\u0820\u0001\u0000" +
                    "\u0000\u0000\u0084\u083b\u0001\u0000\u0000\u0000\u0086\u083f\u0001\u0000" +
                    "\u0000\u0000\u0088\u084e\u0001\u0000\u0000\u0000\u008a\u0850\u0001\u0000" +
                    "\u0000\u0000\u008c\u086e\u0001\u0000\u0000\u0000\u008e\u0870\u0001\u0000" +
                    "\u0000\u0000\u0090\u0877\u0001\u0000\u0000\u0000\u0092\u0897\u0001\u0000" +
                    "\u0000\u0000\u0094\u089a\u0001\u0000\u0000\u0000\u0096\u08b4\u0001\u0000" +
                    "\u0000\u0000\u0098\u08ce\u0001\u0000\u0000\u0000\u009a\u08d4\u0001\u0000" +
                    "\u0000\u0000\u009c\u08d6\u0001\u0000\u0000\u0000\u009e\u08fa\u0001\u0000" +
                    "\u0000\u0000\u00a0\u08fc\u0001\u0000\u0000\u0000\u00a2\u0900\u0001\u0000" +
                    "\u0000\u0000\u00a4\u0908\u0001\u0000\u0000\u0000\u00a6\u0913\u0001\u0000" +
                    "\u0000\u0000\u00a8\u0917\u0001\u0000\u0000\u0000\u00aa\u0922\u0001\u0000" +
                    "\u0000\u0000\u00ac\u0941\u0001\u0000\u0000\u0000\u00ae\u0943\u0001\u0000" +
                    "\u0000\u0000\u00b0\u094e\u0001\u0000\u0000\u0000\u00b2\u0964\u0001\u0000" +
                    "\u0000\u0000\u00b4\u0997\u0001\u0000\u0000\u0000\u00b6\u0999\u0001\u0000" +
                    "\u0000\u0000\u00b8\u09a1\u0001\u0000\u0000\u0000\u00ba\u09a9\u0001\u0000" +
                    "\u0000\u0000\u00bc\u09b1\u0001\u0000\u0000\u0000\u00be\u09b9\u0001\u0000" +
                    "\u0000\u0000\u00c0\u09c0\u0001\u0000\u0000\u0000\u00c2\u09c4\u0001\u0000" +
                    "\u0000\u0000\u00c4\u09ce\u0001\u0000\u0000\u0000\u00c6\u09d6\u0001\u0000" +
                    "\u0000\u0000\u00c8\u09e3\u0001\u0000\u0000\u0000\u00ca\u09f2\u0001\u0000" +
                    "\u0000\u0000\u00cc\u09f6\u0001\u0000\u0000\u0000\u00ce\u09f8\u0001\u0000" +
                    "\u0000\u0000\u00d0\u09fa\u0001\u0000\u0000\u0000\u00d2\u0a0e\u0001\u0000" +
                    "\u0000\u0000\u00d4\u0a6d\u0001\u0000\u0000\u0000\u00d6\u0a73\u0001\u0000" +
                    "\u0000\u0000\u00d8\u0a8d\u0001\u0000\u0000\u0000\u00da\u0b7d\u0001\u0000" +
                    "\u0000\u0000\u00dc\u0b98\u0001\u0000\u0000\u0000\u00de\u0b9a\u0001\u0000" +
                    "\u0000\u0000\u00e0\u0b9c\u0001\u0000\u0000\u0000\u00e2\u0b9e\u0001\u0000" +
                    "\u0000\u0000\u00e4\u0ba0\u0001\u0000\u0000\u0000\u00e6\u0ba2\u0001\u0000" +
                    "\u0000\u0000\u00e8\u0ba7\u0001\u0000\u0000\u0000\u00ea\u0bae\u0001\u0000" +
                    "\u0000\u0000\u00ec\u0bb2\u0001\u0000\u0000\u0000\u00ee\u0bb7\u0001\u0000" +
                    "\u0000\u0000\u00f0\u0bbd\u0001\u0000\u0000\u0000\u00f2\u0bc4\u0001\u0000" +
                    "\u0000\u0000\u00f4\u0bf4\u0001\u0000\u0000\u0000\u00f6\u0bf6\u0001\u0000" +
                    "\u0000\u0000\u00f8\u0bfe\u0001\u0000\u0000\u0000\u00fa\u0c0d\u0001\u0000" +
                    "\u0000\u0000\u00fc\u0c10\u0001\u0000\u0000\u0000\u00fe\u0c18\u0001\u0000" +
                    "\u0000\u0000\u0100\u0c21\u0001\u0000\u0000\u0000\u0102\u0c29\u0001\u0000" +
                    "\u0000\u0000\u0104\u0c35\u0001\u0000\u0000\u0000\u0106\u0c3d\u0001\u0000" +
                    "\u0000\u0000\u0108\u0c49\u0001\u0000\u0000\u0000\u010a\u0c4e\u0001\u0000" +
                    "\u0000\u0000\u010c\u0c57\u0001\u0000\u0000\u0000\u010e\u0c89\u0001\u0000" +
                    "\u0000\u0000\u0110\u0c9b\u0001\u0000\u0000\u0000\u0112\u0ca4\u0001\u0000" +
                    "\u0000\u0000\u0114\u0ca6\u0001\u0000\u0000\u0000\u0116\u0cb2\u0001\u0000" +
                    "\u0000\u0000\u0118\u0cb4\u0001\u0000\u0000\u0000\u011a\u0cbc\u0001\u0000" +
                    "\u0000\u0000\u011c\u0cc6\u0001\u0000\u0000\u0000\u011e\u0ccb\u0001\u0000" +
                    "\u0000\u0000\u0120\u0cd3\u0001\u0000\u0000\u0000\u0122\u0cd5\u0001\u0000" +
                    "\u0000\u0000\u0124\u0d02\u0001\u0000\u0000\u0000\u0126\u0d0f\u0001\u0000" +
                    "\u0000\u0000\u0128\u0d11\u0001\u0000\u0000\u0000\u012a\u0d13\u0001\u0000" +
                    "\u0000\u0000\u012c\u0d15\u0001\u0000\u0000\u0000\u012e\u0132\u0003\u000e" +
                    "\u0007\u0000\u012f\u0131\u0005\u0001\u0000\u0000\u0130\u012f\u0001\u0000" +
                    "\u0000\u0000\u0131\u0134\u0001\u0000\u0000\u0000\u0132\u0130\u0001\u0000" +
                    "\u0000\u0000\u0132\u0133\u0001\u0000\u0000\u0000\u0133\u0135\u0001\u0000" +
                    "\u0000\u0000\u0134\u0132\u0001\u0000\u0000\u0000\u0135\u0136\u0005\u0000" +
                    "\u0000\u0001\u0136\u0001\u0001\u0000\u0000\u0000\u0137\u0138\u0003\u00c2" +
                    "a\u0000\u0138\u0139\u0005\u0000\u0000\u0001\u0139\u0003\u0001\u0000\u0000" +
                    "\u0000\u013a\u013b\u0003\u00be_\u0000\u013b\u013c\u0005\u0000\u0000\u0001" +
                    "\u013c\u0005\u0001\u0000\u0000\u0000\u013d\u013e\u0003\u00b8\\\u0000\u013e" +
                    "\u013f\u0005\u0000\u0000\u0001\u013f\u0007\u0001\u0000\u0000\u0000\u0140" +
                    "\u0141\u0003\u00c0`\u0000\u0141\u0142\u0005\u0000\u0000\u0001\u0142\t" +
                    "\u0001\u0000\u0000\u0000\u0143\u0144\u0003\u00f4z\u0000\u0144\u0145\u0005" +
                    "\u0000\u0000\u0001\u0145\u000b\u0001\u0000\u0000\u0000\u0146\u0147\u0003" +
                    "\u00fc~\u0000\u0147\u0148\u0005\u0000\u0000\u0001\u0148\r\u0001\u0000" +
                    "\u0000\u0000\u0149\u046b\u0003\"\u0011\u0000\u014a\u014c\u00034\u001a" +
                    "\u0000\u014b\u014a\u0001\u0000\u0000\u0000\u014b\u014c\u0001\u0000\u0000" +
                    "\u0000\u014c\u014d\u0001\u0000\u0000\u0000\u014d\u046b\u0003P(\u0000\u014e" +
                    "\u014f\u0005\u0113\u0000\u0000\u014f\u046b\u0003\u00b8\\\u0000\u0150\u0151" +
                    "\u0005\u0113\u0000\u0000\u0151\u0152\u0003,\u0016\u0000\u0152\u0153\u0003" +
                    "\u00b8\\\u0000\u0153\u046b\u0001\u0000\u0000\u0000\u0154\u0155\u0005\u00e2" +
                    "\u0000\u0000\u0155\u0158\u0005 \u0000\u0000\u0156\u0159\u0003\u011e\u008f" +
                    "\u0000\u0157\u0159\u0005\u0138\u0000\u0000\u0158\u0156\u0001\u0000\u0000" +
                    "\u0000\u0158\u0157\u0001\u0000\u0000\u0000\u0159\u046b\u0001\u0000\u0000" +
                    "\u0000\u015a\u015b\u00054\u0000\u0000\u015b\u015f\u0003,\u0016\u0000\u015c" +
                    "\u015d\u0005r\u0000\u0000\u015d\u015e\u0005\u00a0\u0000\u0000\u015e\u0160" +
                    "\u0005W\u0000\u0000\u015f\u015c\u0001\u0000\u0000\u0000\u015f\u0160\u0001" +
                    "\u0000\u0000\u0000\u0160\u0161\u0001\u0000\u0000\u0000\u0161\u0169\u0003" +
                    "\u00b8\\\u0000\u0162\u0168\u0003 \u0010\u0000\u0163\u0168\u0003\u001e" +
                    "\u000f\u0000\u0164\u0165\u0005\u011e\u0000\u0000\u0165\u0166\u0007\u0000" +
                    "\u0000\u0000\u0166\u0168\u0003<\u001e\u0000\u0167\u0162\u0001\u0000\u0000" +
                    "\u0000\u0167\u0163\u0001\u0000\u0000\u0000\u0167\u0164\u0001\u0000\u0000" +
                    "\u0000\u0168\u016b\u0001\u0000\u0000\u0000\u0169\u0167\u0001\u0000\u0000" +
                    "\u0000\u0169\u016a\u0001\u0000\u0000\u0000\u016a\u046b\u0001\u0000\u0000" +
                    "\u0000\u016b\u0169\u0001\u0000\u0000\u0000\u016c\u016d\u0005\u000b\u0000" +
                    "\u0000\u016d\u016e\u0003,\u0016\u0000\u016e\u016f\u0003\u00b8\\\u0000" +
                    "\u016f\u0170\u0005\u00e2\u0000\u0000\u0170\u0171\u0007\u0000\u0000\u0000" +
                    "\u0171\u0172\u0003<\u001e\u0000\u0172\u046b\u0001\u0000\u0000\u0000\u0173" +
                    "\u0174\u0005\u000b\u0000\u0000\u0174\u0175\u0003,\u0016\u0000\u0175\u0176" +
                    "\u0003\u00b8\\\u0000\u0176\u0177\u0005\u00e2\u0000\u0000\u0177\u0178\u0003" +
                    "\u001e\u000f\u0000\u0178\u046b\u0001\u0000\u0000\u0000\u0179\u017a\u0005" +
                    "P\u0000\u0000\u017a\u017d\u0003,\u0016\u0000\u017b\u017c\u0005r\u0000" +
                    "\u0000\u017c\u017e\u0005W\u0000\u0000\u017d\u017b\u0001\u0000\u0000\u0000" +
                    "\u017d\u017e\u0001\u0000\u0000\u0000\u017e\u017f\u0001\u0000\u0000\u0000" +
                    "\u017f\u0181\u0003\u00b8\\\u0000\u0180\u0182\u0007\u0001\u0000\u0000\u0181" +
                    "\u0180\u0001\u0000\u0000\u0000\u0181\u0182\u0001\u0000\u0000\u0000\u0182" +
                    "\u046b\u0001\u0000\u0000\u0000\u0183\u0184\u0005\u00e5\u0000\u0000\u0184" +
                    "\u0187\u0003.\u0017\u0000\u0185\u0186\u0007\u0002\u0000\u0000\u0186\u0188" +
                    "\u0003\u00b8\\\u0000\u0187\u0185\u0001\u0000\u0000\u0000\u0187\u0188\u0001" +
                    "\u0000\u0000\u0000\u0188\u018d\u0001\u0000\u0000\u0000\u0189\u018b\u0005" +
                    "\u0088\u0000\u0000\u018a\u0189\u0001\u0000\u0000\u0000\u018a\u018b\u0001" +
                    "\u0000\u0000\u0000\u018b\u018c\u0001\u0000\u0000\u0000\u018c\u018e\u0005" +
                    "\u0138\u0000\u0000\u018d\u018a\u0001\u0000\u0000\u0000\u018d\u018e\u0001" +
                    "\u0000\u0000\u0000\u018e\u046b\u0001\u0000\u0000\u0000\u018f\u0194\u0003" +
                    "\u0016\u000b\u0000\u0190\u0191\u0005\u0002\u0000\u0000\u0191\u0192\u0003" +
                    "\u0100\u0080\u0000\u0192\u0193\u0005\u0003\u0000\u0000\u0193\u0195\u0001" +
                    "\u0000\u0000\u0000\u0194\u0190\u0001\u0000\u0000\u0000\u0194\u0195\u0001" +
                    "\u0000\u0000\u0000\u0195\u0197\u0001\u0000\u0000\u0000\u0196\u0198\u0003" +
                    "8\u001c\u0000\u0197\u0196\u0001\u0000\u0000\u0000\u0197\u0198\u0001\u0000" +
                    "\u0000\u0000\u0198\u0199\u0001\u0000\u0000\u0000\u0199\u019e\u0003:\u001d" +
                    "\u0000\u019a\u019c\u0005\u0013\u0000\u0000\u019b\u019a\u0001\u0000\u0000" +
                    "\u0000\u019b\u019c\u0001\u0000\u0000\u0000\u019c\u019d\u0001\u0000\u0000" +
                    "\u0000\u019d\u019f\u0003\"\u0011\u0000\u019e\u019b\u0001\u0000\u0000\u0000" +
                    "\u019e\u019f\u0001\u0000\u0000\u0000\u019f\u046b\u0001\u0000\u0000\u0000" +
                    "\u01a0\u01a1\u00054\u0000\u0000\u01a1\u01a5\u0005\u00f4\u0000\u0000\u01a2" +
                    "\u01a3\u0005r\u0000\u0000\u01a3\u01a4\u0005\u00a0\u0000\u0000\u01a4\u01a6" +
                    "\u0005W\u0000\u0000\u01a5\u01a2\u0001\u0000\u0000\u0000\u01a5\u01a6\u0001" +
                    "\u0000\u0000\u0000\u01a6\u01a7\u0001\u0000\u0000\u0000\u01a7\u01a8\u0003" +
                    "\u00be_\u0000\u01a8\u01a9\u0005\u0088\u0000\u0000\u01a9\u01b2\u0003\u00be" +
                    "_\u0000\u01aa\u01b1\u00038\u001c\u0000\u01ab\u01b1\u0003\u00b4Z\u0000" +
                    "\u01ac\u01b1\u0003H$\u0000\u01ad\u01b1\u0003\u001e\u000f\u0000\u01ae\u01af" +
                    "\u0005\u00f7\u0000\u0000\u01af\u01b1\u0003<\u001e\u0000\u01b0\u01aa\u0001" +
                    "\u0000\u0000\u0000\u01b0\u01ab\u0001\u0000\u0000\u0000\u01b0\u01ac\u0001" +
                    "\u0000\u0000\u0000\u01b0\u01ad\u0001\u0000\u0000\u0000\u01b0\u01ae\u0001" +
                    "\u0000\u0000\u0000\u01b1\u01b4\u0001\u0000\u0000\u0000\u01b2\u01b0\u0001" +
                    "\u0000\u0000\u0000\u01b2\u01b3\u0001\u0000\u0000\u0000\u01b3\u046b\u0001" +
                    "\u0000\u0000\u0000\u01b4\u01b2\u0001\u0000\u0000\u0000\u01b5\u01ba\u0003" +
                    "\u0018\f\u0000\u01b6\u01b7\u0005\u0002\u0000\u0000\u01b7\u01b8\u0003\u0100" +
                    "\u0080\u0000\u01b8\u01b9\u0005\u0003\u0000\u0000\u01b9\u01bb\u0001\u0000" +
                    "\u0000\u0000\u01ba\u01b6\u0001\u0000\u0000\u0000\u01ba\u01bb\u0001\u0000" +
                    "\u0000\u0000\u01bb\u01bd\u0001\u0000\u0000\u0000\u01bc\u01be\u00038\u001c" +
                    "\u0000\u01bd\u01bc\u0001\u0000\u0000\u0000\u01bd\u01be\u0001\u0000\u0000" +
                    "\u0000\u01be\u01bf\u0001\u0000\u0000\u0000\u01bf\u01c4\u0003:\u001d\u0000" +
                    "\u01c0\u01c2\u0005\u0013\u0000\u0000\u01c1\u01c0\u0001\u0000\u0000\u0000" +
                    "\u01c1\u01c2\u0001\u0000\u0000\u0000\u01c2\u01c3\u0001\u0000\u0000\u0000" +
                    "\u01c3\u01c5\u0003\"\u0011\u0000\u01c4\u01c1\u0001\u0000\u0000\u0000\u01c4" +
                    "\u01c5\u0001\u0000\u0000\u0000\u01c5\u046b\u0001\u0000\u0000\u0000\u01c6" +
                    "\u01c7\u0005\f\u0000\u0000\u01c7\u01c8\u0005\u00f4\u0000\u0000\u01c8\u01ca" +
                    "\u0003\u00b8\\\u0000\u01c9\u01cb\u0003(\u0014\u0000\u01ca\u01c9\u0001" +
                    "\u0000\u0000\u0000\u01ca\u01cb\u0001\u0000\u0000\u0000\u01cb\u01cc\u0001" +
                    "\u0000\u0000\u0000\u01cc\u01cd\u00050\u0000\u0000\u01cd\u01d5\u0005\u00eb" +
                    "\u0000\u0000\u01ce\u01d6\u0003\u011e\u008f\u0000\u01cf\u01d0\u0005d\u0000" +
                    "\u0000\u01d0\u01d1\u0005+\u0000\u0000\u01d1\u01d6\u0003\u00a2Q\u0000\u01d2" +
                    "\u01d3\u0005d\u0000\u0000\u01d3\u01d4\u0005\n\u0000\u0000\u01d4\u01d6" +
                    "\u0005+\u0000\u0000\u01d5\u01ce\u0001\u0000\u0000\u0000\u01d5\u01cf\u0001" +
                    "\u0000\u0000\u0000\u01d5\u01d2\u0001\u0000\u0000\u0000\u01d5\u01d6\u0001" +
                    "\u0000\u0000\u0000\u01d6\u046b\u0001\u0000\u0000\u0000\u01d7\u01d8\u0005" +
                    "\f\u0000\u0000\u01d8\u01db\u0005\u00f5\u0000\u0000\u01d9\u01da\u0007\u0002" +
                    "\u0000\u0000\u01da\u01dc\u0003\u00b8\\\u0000\u01db\u01d9\u0001\u0000\u0000" +
                    "\u0000\u01db\u01dc\u0001\u0000\u0000\u0000\u01dc\u01dd\u0001\u0000\u0000" +
                    "\u0000\u01dd\u01de\u00050\u0000\u0000\u01de\u01e0\u0005\u00eb\u0000\u0000" +
                    "\u01df\u01e1\u0003\u011e\u008f\u0000\u01e0\u01df\u0001\u0000\u0000\u0000" +
                    "\u01e0\u01e1\u0001\u0000\u0000\u0000\u01e1\u046b\u0001\u0000\u0000\u0000" +
                    "\u01e2\u01e3\u0005\u000b\u0000\u0000\u01e3\u01e4\u0005\u00f4\u0000\u0000" +
                    "\u01e4\u01e5\u0003\u00b8\\\u0000\u01e5\u01e6\u0005\b\u0000\u0000\u01e6" +
                    "\u01e7\u0007\u0003\u0000\u0000\u01e7\u01e8\u0003\u00f6{\u0000\u01e8\u046b" +
                    "\u0001\u0000\u0000\u0000\u01e9\u01ea\u0005\u000b\u0000\u0000\u01ea\u01eb" +
                    "\u0005\u00f4\u0000\u0000\u01eb\u01ec\u0003\u00b8\\\u0000\u01ec\u01ed\u0005" +
                    "\b\u0000\u0000\u01ed\u01ee\u0007\u0003\u0000\u0000\u01ee\u01ef\u0005\u0002" +
                    "\u0000\u0000\u01ef\u01f0\u0003\u00f6{\u0000\u01f0\u01f1\u0005\u0003\u0000" +
                    "\u0000\u01f1\u046b\u0001\u0000\u0000\u0000\u01f2\u01f3\u0005\u000b\u0000" +
                    "\u0000\u01f3\u01f4\u0005\u00f4\u0000\u0000\u01f4\u01f5\u0003\u00b8\\\u0000" +
                    "\u01f5\u01f6\u0005\u00c9\u0000\u0000\u01f6\u01f7\u0005*\u0000\u0000\u01f7" +
                    "\u01f8\u0003\u00b8\\\u0000\u01f8\u01f9\u0005\u00ff\u0000\u0000\u01f9\u01fa" +
                    "\u0003\u011a\u008d\u0000\u01fa\u046b\u0001\u0000\u0000\u0000\u01fb\u01fc" +
                    "\u0005\u000b\u0000\u0000\u01fc\u01fd\u0005\u00f4\u0000\u0000\u01fd\u01fe" +
                    "\u0003\u00b8\\\u0000\u01fe\u01ff\u0005P\u0000\u0000\u01ff\u0202\u0007" +
                    "\u0003\u0000\u0000\u0200\u0201\u0005r\u0000\u0000\u0201\u0203\u0005W\u0000" +
                    "\u0000\u0202\u0200\u0001\u0000\u0000\u0000\u0202\u0203\u0001\u0000\u0000" +
                    "\u0000\u0203\u0204\u0001\u0000\u0000\u0000\u0204\u0205\u0005\u0002\u0000" +
                    "\u0000\u0205\u0206\u0003\u00b6[\u0000\u0206\u0207\u0005\u0003\u0000\u0000" +
                    "\u0207\u046b\u0001\u0000\u0000\u0000\u0208\u0209\u0005\u000b\u0000\u0000" +
                    "\u0209\u020a\u0005\u00f4\u0000\u0000\u020a\u020b\u0003\u00b8\\\u0000\u020b" +
                    "\u020c\u0005P\u0000\u0000\u020c\u020f\u0007\u0003\u0000\u0000\u020d\u020e" +
                    "\u0005r\u0000\u0000\u020e\u0210\u0005W\u0000\u0000\u020f\u020d\u0001\u0000" +
                    "\u0000\u0000\u020f\u0210\u0001\u0000\u0000\u0000\u0210\u0211\u0001\u0000" +
                    "\u0000\u0000\u0211\u0212\u0003\u00b6[\u0000\u0212\u046b\u0001\u0000\u0000" +
                    "\u0000\u0213\u0214\u0005\u000b\u0000\u0000\u0214\u0215\u0007\u0004\u0000" +
                    "\u0000\u0215\u0216\u0003\u00b8\\\u0000\u0216\u0217\u0005\u00c9\u0000\u0000" +
                    "\u0217\u0218\u0005\u00ff\u0000\u0000\u0218\u0219\u0003\u00b8\\\u0000\u0219" +
                    "\u046b\u0001\u0000\u0000\u0000\u021a\u021b\u0005\u000b\u0000\u0000\u021b" +
                    "\u021c\u0007\u0004\u0000\u0000\u021c\u021d\u0003\u00b8\\\u0000\u021d\u021e" +
                    "\u0005\u00e2\u0000\u0000\u021e\u021f\u0005\u00f7\u0000\u0000\u021f\u0220" +
                    "\u0003<\u001e\u0000\u0220\u046b\u0001\u0000\u0000\u0000\u0221\u0222\u0005" +
                    "\u000b\u0000\u0000\u0222\u0223\u0007\u0004\u0000\u0000\u0223\u0224\u0003" +
                    "\u00b8\\\u0000\u0224\u0225\u0005\u0111\u0000\u0000\u0225\u0228\u0005\u00f7" +
                    "\u0000\u0000\u0226\u0227\u0005r\u0000\u0000\u0227\u0229\u0005W\u0000\u0000" +
                    "\u0228\u0226\u0001\u0000\u0000\u0000\u0228\u0229\u0001\u0000\u0000\u0000" +
                    "\u0229\u022a\u0001\u0000\u0000\u0000\u022a\u022b\u0003<\u001e\u0000\u022b" +
                    "\u046b\u0001\u0000\u0000\u0000\u022c\u022d\u0005\u000b\u0000\u0000\u022d" +
                    "\u022e\u0005\u00f4\u0000\u0000\u022e\u022f\u0003\u00b8\\\u0000\u022f\u0231" +
                    "\u0007\u0005\u0000\u0000\u0230\u0232\u0005*\u0000\u0000\u0231\u0230\u0001" +
                    "\u0000\u0000\u0000\u0231\u0232\u0001\u0000\u0000\u0000\u0232\u0233\u0001" +
                    "\u0000\u0000\u0000\u0233\u0235\u0003\u00b8\\\u0000\u0234\u0236\u0003\u0126" +
                    "\u0093\u0000\u0235\u0234\u0001\u0000\u0000\u0000\u0235\u0236\u0001\u0000" +
                    "\u0000\u0000\u0236\u046b\u0001\u0000\u0000\u0000\u0237\u0238\u0005\u000b" +
                    "\u0000\u0000\u0238\u0239\u0005\u00f4\u0000\u0000\u0239\u023b\u0003\u00b8" +
                    "\\\u0000\u023a\u023c\u0003(\u0014\u0000\u023b\u023a\u0001\u0000\u0000" +
                    "\u0000\u023b\u023c\u0001\u0000\u0000\u0000\u023c\u023d\u0001\u0000\u0000" +
                    "\u0000\u023d\u023f\u0005\"\u0000\u0000\u023e\u0240\u0005*\u0000\u0000" +
                    "\u023f\u023e\u0001\u0000\u0000\u0000\u023f\u0240\u0001\u0000\u0000\u0000" +
                    "\u0240\u0241\u0001\u0000\u0000\u0000\u0241\u0242\u0003\u00b8\\\u0000\u0242" +
                    "\u0244\u0003\u00fe\u007f\u0000\u0243\u0245\u0003\u00f2y\u0000\u0244\u0243" +
                    "\u0001\u0000\u0000\u0000\u0244\u0245\u0001\u0000\u0000\u0000\u0245\u046b" +
                    "\u0001\u0000\u0000\u0000\u0246\u0247\u0005\u000b\u0000\u0000\u0247\u0248" +
                    "\u0005\u00f4\u0000\u0000\u0248\u024a\u0003\u00b8\\\u0000\u0249\u024b\u0003" +
                    "(\u0014\u0000\u024a\u0249\u0001\u0000\u0000\u0000\u024a\u024b\u0001\u0000" +
                    "\u0000\u0000\u024b\u024c\u0001\u0000\u0000\u0000\u024c\u024d\u0005\u00cc" +
                    "\u0000\u0000\u024d\u024e\u0005+\u0000\u0000\u024e\u024f\u0005\u0002\u0000" +
                    "\u0000\u024f\u0250\u0003\u00f6{\u0000\u0250\u0251\u0005\u0003\u0000\u0000" +
                    "\u0251\u046b\u0001\u0000\u0000\u0000\u0252\u0253\u0005\u000b\u0000\u0000" +
                    "\u0253\u0254\u0005\u00f4\u0000\u0000\u0254\u0256\u0003\u00b8\\\u0000\u0255" +
                    "\u0257\u0003(\u0014\u0000\u0256\u0255\u0001\u0000\u0000\u0000\u0256\u0257" +
                    "\u0001\u0000\u0000\u0000\u0257\u0258\u0001\u0000\u0000\u0000\u0258\u0259" +
                    "\u0005\u00e2\u0000\u0000\u0259\u025a\u0005\u00df\u0000\u0000\u025a\u025e" +
                    "\u0005\u0138\u0000\u0000\u025b\u025c\u0005\u011e\u0000\u0000\u025c\u025d" +
                    "\u0005\u00e0\u0000\u0000\u025d\u025f\u0003<\u001e\u0000\u025e\u025b\u0001" +
                    "\u0000\u0000\u0000\u025e\u025f\u0001\u0000\u0000\u0000\u025f\u046b\u0001" +
                    "\u0000\u0000\u0000\u0260\u0261\u0005\u000b\u0000\u0000\u0261\u0262\u0005" +
                    "\u00f4\u0000\u0000\u0262\u0264\u0003\u00b8\\\u0000\u0263\u0265\u0003(" +
                    "\u0014\u0000\u0264\u0263\u0001\u0000\u0000\u0000\u0264\u0265\u0001\u0000" +
                    "\u0000\u0000\u0265\u0266\u0001\u0000\u0000\u0000\u0266\u0267\u0005\u00e2" +
                    "\u0000\u0000\u0267\u0268\u0005\u00e0\u0000\u0000\u0268\u0269\u0003<\u001e" +
                    "\u0000\u0269\u046b\u0001\u0000\u0000\u0000\u026a\u026b\u0005\u000b\u0000" +
                    "\u0000\u026b\u026c\u0007\u0004\u0000\u0000\u026c\u026d\u0003\u00b8\\\u0000" +
                    "\u026d\u0271\u0005\b\u0000\u0000\u026e\u026f\u0005r\u0000\u0000\u026f" +
                    "\u0270\u0005\u00a0\u0000\u0000\u0270\u0272\u0005W\u0000\u0000\u0271\u026e" +
                    "\u0001\u0000\u0000\u0000\u0271\u0272\u0001\u0000\u0000\u0000\u0272\u0274" +
                    "\u0001\u0000\u0000\u0000\u0273\u0275\u0003&\u0013\u0000\u0274\u0273\u0001" +
                    "\u0000\u0000\u0000\u0275\u0276\u0001\u0000\u0000\u0000\u0276\u0274\u0001" +
                    "\u0000\u0000\u0000\u0276\u0277\u0001\u0000\u0000\u0000\u0277\u046b\u0001" +
                    "\u0000\u0000\u0000\u0278\u0279\u0005\u000b\u0000\u0000\u0279\u027a\u0005" +
                    "\u00f4\u0000\u0000\u027a\u027b\u0003\u00b8\\\u0000\u027b\u027c\u0003(" +
                    "\u0014\u0000\u027c\u027d\u0005\u00c9\u0000\u0000\u027d\u027e\u0005\u00ff" +
                    "\u0000\u0000\u027e\u027f\u0003(\u0014\u0000\u027f\u046b\u0001\u0000\u0000" +
                    "\u0000\u0280\u0281\u0005\u000b\u0000\u0000\u0281\u0282\u0007\u0004\u0000" +
                    "\u0000\u0282\u0283\u0003\u00b8\\\u0000\u0283\u0286\u0005P\u0000\u0000" +
                    "\u0284\u0285\u0005r\u0000\u0000\u0285\u0287\u0005W\u0000\u0000\u0286\u0284" +
                    "\u0001\u0000\u0000\u0000\u0286\u0287\u0001\u0000\u0000\u0000\u0287\u0288" +
                    "\u0001\u0000\u0000\u0000\u0288\u028d\u0003(\u0014\u0000\u0289\u028a\u0005" +
                    "\u0004\u0000\u0000\u028a\u028c\u0003(\u0014\u0000\u028b\u0289\u0001\u0000" +
                    "\u0000\u0000\u028c\u028f\u0001\u0000\u0000\u0000\u028d\u028b\u0001\u0000" +
                    "\u0000\u0000\u028d\u028e\u0001\u0000\u0000\u0000\u028e\u0291\u0001\u0000" +
                    "\u0000\u0000\u028f\u028d\u0001\u0000\u0000\u0000\u0290\u0292\u0005\u00bf" +
                    "\u0000\u0000\u0291\u0290\u0001\u0000\u0000\u0000\u0291\u0292\u0001\u0000" +
                    "\u0000\u0000\u0292\u046b\u0001\u0000\u0000\u0000\u0293\u0294\u0005\u000b" +
                    "\u0000\u0000\u0294\u0295\u0005\u00f4\u0000\u0000\u0295\u0297\u0003\u00b8" +
                    "\\\u0000\u0296\u0298\u0003(\u0014\u0000\u0297\u0296\u0001\u0000\u0000" +
                    "\u0000\u0297\u0298\u0001\u0000\u0000\u0000\u0298\u0299\u0001\u0000\u0000" +
                    "\u0000\u0299\u029a\u0005\u00e2\u0000\u0000\u029a\u029b\u0003\u001e\u000f" +
                    "\u0000\u029b\u046b\u0001\u0000\u0000\u0000\u029c\u029d\u0005\u000b\u0000" +
                    "\u0000\u029d\u029e\u0005\u00f4\u0000\u0000\u029e\u029f\u0003\u00b8\\\u0000" +
                    "\u029f\u02a0\u0005\u00c5\u0000\u0000\u02a0\u02a1\u0005\u00b4\u0000\u0000" +
                    "\u02a1\u046b\u0001\u0000\u0000\u0000\u02a2\u02a3\u0005P\u0000\u0000\u02a3" +
                    "\u02a6\u0005\u00f4\u0000\u0000\u02a4\u02a5\u0005r\u0000\u0000\u02a5\u02a7" +
                    "\u0005W\u0000\u0000\u02a6\u02a4\u0001\u0000\u0000\u0000\u02a6\u02a7\u0001" +
                    "\u0000\u0000\u0000\u02a7\u02a8\u0001\u0000\u0000\u0000\u02a8\u02aa\u0003" +
                    "\u00b8\\\u0000\u02a9\u02ab\u0005\u00bf\u0000\u0000\u02aa\u02a9\u0001\u0000" +
                    "\u0000\u0000\u02aa\u02ab\u0001\u0000\u0000\u0000\u02ab\u046b\u0001\u0000" +
                    "\u0000\u0000\u02ac\u02ad\u0005P\u0000\u0000\u02ad\u02b0\u0005\u0118\u0000" +
                    "\u0000\u02ae\u02af\u0005r\u0000\u0000\u02af\u02b1\u0005W\u0000\u0000\u02b0" +
                    "\u02ae\u0001\u0000\u0000\u0000\u02b0\u02b1\u0001\u0000\u0000\u0000\u02b1" +
                    "\u02b2\u0001\u0000\u0000\u0000\u02b2\u046b\u0003\u00b8\\\u0000\u02b3\u02b6" +
                    "\u00054\u0000\u0000\u02b4\u02b5\u0005\u00a9\u0000\u0000\u02b5\u02b7\u0005" +
                    "\u00cc\u0000\u0000\u02b6\u02b4\u0001\u0000\u0000\u0000\u02b6\u02b7\u0001" +
                    "\u0000\u0000\u0000\u02b7\u02bc\u0001\u0000\u0000\u0000\u02b8\u02ba\u0005" +
                    "l\u0000\u0000\u02b9\u02b8\u0001\u0000\u0000\u0000\u02b9\u02ba\u0001\u0000" +
                    "\u0000\u0000\u02ba\u02bb\u0001\u0000\u0000\u0000\u02bb\u02bd\u0005\u00f8" +
                    "\u0000\u0000\u02bc\u02b9\u0001\u0000\u0000\u0000\u02bc\u02bd\u0001\u0000" +
                    "\u0000\u0000\u02bd\u02be\u0001\u0000\u0000\u0000\u02be\u02c2\u0005\u0118" +
                    "\u0000\u0000\u02bf\u02c0\u0005r\u0000\u0000\u02c0\u02c1\u0005\u00a0\u0000" +
                    "\u0000\u02c1\u02c3\u0005W\u0000\u0000\u02c2\u02bf\u0001\u0000\u0000\u0000" +
                    "\u02c2\u02c3\u0001\u0000\u0000\u0000\u02c3\u02c4\u0001\u0000\u0000\u0000" +
                    "\u02c4\u02c6\u0003\u00b8\\\u0000\u02c5\u02c7\u0003\u00a8T\u0000\u02c6" +
                    "\u02c5\u0001\u0000\u0000\u0000\u02c6\u02c7\u0001\u0000\u0000\u0000\u02c7" +
                    "\u02d0\u0001\u0000\u0000\u0000\u02c8\u02cf\u0003 \u0010\u0000\u02c9\u02ca" +
                    "\u0005\u00b3\u0000\u0000\u02ca\u02cb\u0005\u00a5\u0000\u0000\u02cb\u02cf" +
                    "\u0003\u00a0P\u0000\u02cc\u02cd\u0005\u00f7\u0000\u0000\u02cd\u02cf\u0003" +
                    "<\u001e\u0000\u02ce\u02c8\u0001\u0000\u0000\u0000\u02ce\u02c9\u0001\u0000" +
                    "\u0000\u0000\u02ce\u02cc\u0001\u0000\u0000\u0000\u02cf\u02d2\u0001\u0000" +
                    "\u0000\u0000\u02d0\u02ce\u0001\u0000\u0000\u0000\u02d0\u02d1\u0001\u0000" +
                    "\u0000\u0000\u02d1\u02d3\u0001\u0000\u0000\u0000\u02d2\u02d0\u0001\u0000" +
                    "\u0000\u0000\u02d3\u02d4\u0005\u0013\u0000\u0000\u02d4\u02d5\u0003\"\u0011" +
                    "\u0000\u02d5\u046b\u0001\u0000\u0000\u0000\u02d6\u02d9\u00054\u0000\u0000" +
                    "\u02d7\u02d8\u0005\u00a9\u0000\u0000\u02d8\u02da\u0005\u00cc\u0000\u0000" +
                    "\u02d9\u02d7\u0001\u0000\u0000\u0000\u02d9\u02da\u0001\u0000\u0000\u0000" +
                    "\u02da\u02dc\u0001\u0000\u0000\u0000\u02db\u02dd\u0005l\u0000\u0000\u02dc" +
                    "\u02db\u0001\u0000\u0000\u0000\u02dc\u02dd\u0001\u0000\u0000\u0000\u02dd" +
                    "\u02de\u0001\u0000\u0000\u0000\u02de\u02df\u0005\u00f8\u0000\u0000\u02df" +
                    "\u02e0\u0005\u0118\u0000\u0000\u02e0\u02e5\u0003\u00be_\u0000\u02e1\u02e2" +
                    "\u0005\u0002\u0000\u0000\u02e2\u02e3\u0003\u00fc~\u0000\u02e3\u02e4\u0005" +
                    "\u0003\u0000\u0000\u02e4\u02e6\u0001\u0000\u0000\u0000\u02e5\u02e1\u0001" +
                    "\u0000\u0000\u0000\u02e5\u02e6\u0001\u0000\u0000\u0000\u02e6\u02e7\u0001" +
                    "\u0000\u0000\u0000\u02e7\u02ea\u00038\u001c\u0000\u02e8\u02e9\u0005\u00a8" +
                    "\u0000\u0000\u02e9\u02eb\u0003<\u001e\u0000\u02ea\u02e8\u0001\u0000\u0000" +
                    "\u0000\u02ea\u02eb\u0001\u0000\u0000\u0000\u02eb\u046b\u0001\u0000\u0000" +
                    "\u0000\u02ec\u02ed\u0005\u000b\u0000\u0000\u02ed\u02ee\u0005\u0118\u0000" +
                    "\u0000\u02ee\u02f0\u0003\u00b8\\\u0000\u02ef\u02f1\u0005\u0013\u0000\u0000" +
                    "\u02f0\u02ef\u0001\u0000\u0000\u0000\u02f0\u02f1\u0001\u0000\u0000\u0000" +
                    "\u02f1\u02f2\u0001\u0000\u0000\u0000\u02f2\u02f3\u0003\"\u0011\u0000\u02f3" +
                    "\u046b\u0001\u0000\u0000\u0000\u02f4\u02f7\u00054\u0000\u0000\u02f5\u02f6" +
                    "\u0005\u00a9\u0000\u0000\u02f6\u02f8\u0005\u00cc\u0000\u0000\u02f7\u02f5" +
                    "\u0001\u0000\u0000\u0000\u02f7\u02f8\u0001\u0000\u0000\u0000\u02f8\u02fa" +
                    "\u0001\u0000\u0000\u0000\u02f9\u02fb\u0005\u00f8\u0000\u0000\u02fa\u02f9" +
                    "\u0001\u0000\u0000\u0000\u02fa\u02fb\u0001\u0000\u0000\u0000\u02fb\u02fc" +
                    "\u0001\u0000\u0000\u0000\u02fc\u0300\u0005j\u0000\u0000\u02fd\u02fe\u0005" +
                    "r\u0000\u0000\u02fe\u02ff\u0005\u00a0\u0000\u0000\u02ff\u0301\u0005W\u0000" +
                    "\u0000\u0300\u02fd\u0001\u0000\u0000\u0000\u0300\u0301\u0001\u0000\u0000" +
                    "\u0000\u0301\u0302\u0001\u0000\u0000\u0000\u0302\u0303\u0003\u00b8\\\u0000" +
                    "\u0303\u0304\u0005\u0013\u0000\u0000\u0304\u030e\u0005\u0138\u0000\u0000" +
                    "\u0305\u0306\u0005\u0115\u0000\u0000\u0306\u030b\u0003N\'\u0000\u0307" +
                    "\u0308\u0005\u0004\u0000\u0000\u0308\u030a\u0003N\'\u0000\u0309\u0307" +
                    "\u0001\u0000\u0000\u0000\u030a\u030d\u0001\u0000\u0000\u0000\u030b\u0309" +
                    "\u0001\u0000\u0000\u0000\u030b\u030c\u0001\u0000\u0000\u0000\u030c\u030f" +
                    "\u0001\u0000\u0000\u0000\u030d\u030b\u0001\u0000\u0000\u0000\u030e\u0305" +
                    "\u0001\u0000\u0000\u0000\u030e\u030f\u0001\u0000\u0000\u0000\u030f\u046b" +
                    "\u0001\u0000\u0000\u0000\u0310\u0312\u0005P\u0000\u0000\u0311\u0313\u0005" +
                    "\u00f8\u0000\u0000\u0312\u0311\u0001\u0000\u0000\u0000\u0312\u0313\u0001" +
                    "\u0000\u0000\u0000\u0313\u0314\u0001\u0000\u0000\u0000\u0314\u0317\u0005" +
                    "j\u0000\u0000\u0315\u0316\u0005r\u0000\u0000\u0316\u0318\u0005W\u0000" +
                    "\u0000\u0317\u0315\u0001\u0000\u0000\u0000\u0317\u0318\u0001\u0000\u0000" +
                    "\u0000\u0318\u0319\u0001\u0000\u0000\u0000\u0319\u046b\u0003\u00b8\\\u0000" +
                    "\u031a\u031c\u0005X\u0000\u0000\u031b\u031d\u0007\u0006\u0000\u0000\u031c" +
                    "\u031b\u0001\u0000\u0000\u0000\u031c\u031d\u0001\u0000\u0000\u0000\u031d" +
                    "\u031e\u0001\u0000\u0000\u0000\u031e\u046b\u0003\u000e\u0007\u0000\u031f" +
                    "\u0320\u0005\u00e5\u0000\u0000\u0320\u0323\u0005\u00f5\u0000\u0000\u0321" +
                    "\u0322\u0007\u0002\u0000\u0000\u0322\u0324\u0003\u00b8\\\u0000\u0323\u0321" +
                    "\u0001\u0000\u0000\u0000\u0323\u0324\u0001\u0000\u0000\u0000\u0324\u0329" +
                    "\u0001\u0000\u0000\u0000\u0325\u0327\u0005\u0088\u0000\u0000\u0326\u0325" +
                    "\u0001\u0000\u0000\u0000\u0326\u0327\u0001\u0000\u0000\u0000\u0327\u0328" +
                    "\u0001\u0000\u0000\u0000\u0328\u032a\u0005\u0138\u0000\u0000\u0329\u0326" +
                    "\u0001\u0000\u0000\u0000\u0329\u032a\u0001\u0000\u0000\u0000\u032a\u046b" +
                    "\u0001\u0000\u0000\u0000\u032b\u032c\u0005\u00e5\u0000\u0000\u032c\u032d" +
                    "\u0005\u00f4\u0000\u0000\u032d\u0330\u0005Z\u0000\u0000\u032e\u032f\u0007" +
                    "\u0002\u0000\u0000\u032f\u0331\u0003\u00b8\\\u0000\u0330\u032e\u0001\u0000" +
                    "\u0000\u0000\u0330\u0331\u0001\u0000\u0000\u0000\u0331\u0332\u0001\u0000" +
                    "\u0000\u0000\u0332\u0333\u0005\u0088\u0000\u0000\u0333\u0335\u0005\u0138" +
                    "\u0000\u0000\u0334\u0336\u0003(\u0014\u0000\u0335\u0334\u0001\u0000\u0000" +
                    "\u0000\u0335\u0336\u0001\u0000\u0000\u0000\u0336\u046b\u0001\u0000\u0000" +
                    "\u0000\u0337\u0338\u0005\u00e5\u0000\u0000\u0338\u0339\u0005\u00f7\u0000" +
                    "\u0000\u0339\u033e\u0003\u00b8\\\u0000\u033a\u033b\u0005\u0002\u0000\u0000" +
                    "\u033b\u033c\u0003@ \u0000\u033c\u033d\u0005\u0003\u0000\u0000\u033d\u033f" +
                    "\u0001\u0000\u0000\u0000\u033e\u033a\u0001\u0000\u0000\u0000\u033e\u033f" +
                    "\u0001\u0000\u0000\u0000\u033f\u046b\u0001\u0000\u0000\u0000\u0340\u0341" +
                    "\u0005\u00e5\u0000\u0000\u0341\u0342\u0005+\u0000\u0000\u0342\u0343\u0007" +
                    "\u0002\u0000\u0000\u0343\u0346\u0003\u00b8\\\u0000\u0344\u0345\u0007\u0002" +
                    "\u0000\u0000\u0345\u0347\u0003\u00b8\\\u0000\u0346\u0344\u0001\u0000\u0000" +
                    "\u0000\u0346\u0347\u0001\u0000\u0000\u0000\u0347\u046b\u0001\u0000\u0000" +
                    "\u0000\u0348\u0349\u0005\u00e5\u0000\u0000\u0349\u034c\u0005\u0119\u0000" +
                    "\u0000\u034a\u034b\u0007\u0002\u0000\u0000\u034b\u034d\u0003\u00b8\\\u0000" +
                    "\u034c\u034a\u0001\u0000\u0000\u0000\u034c\u034d\u0001\u0000\u0000\u0000" +
                    "\u034d\u0352\u0001\u0000\u0000\u0000\u034e\u0350\u0005\u0088\u0000\u0000" +
                    "\u034f\u034e\u0001\u0000\u0000\u0000\u034f\u0350\u0001\u0000\u0000\u0000" +
                    "\u0350\u0351\u0001\u0000\u0000\u0000\u0351\u0353\u0005\u0138\u0000\u0000" +
                    "\u0352\u034f\u0001\u0000\u0000\u0000\u0352\u0353\u0001\u0000\u0000\u0000" +
                    "\u0353\u046b\u0001\u0000\u0000\u0000\u0354\u0355\u0005\u00e5\u0000\u0000" +
                    "\u0355\u0356\u0005\u00b4\u0000\u0000\u0356\u0358\u0003\u00b8\\\u0000\u0357" +
                    "\u0359\u0003(\u0014\u0000\u0358\u0357\u0001\u0000\u0000\u0000\u0358\u0359" +
                    "\u0001\u0000\u0000\u0000\u0359\u046b\u0001\u0000\u0000\u0000\u035a\u035c" +
                    "\u0005\u00e5\u0000\u0000\u035b\u035d\u0003\u011e\u008f\u0000\u035c\u035b" +
                    "\u0001\u0000\u0000\u0000\u035c\u035d\u0001\u0000\u0000\u0000\u035d\u035e" +
                    "\u0001\u0000\u0000\u0000\u035e\u0361\u0005k\u0000\u0000\u035f\u0360\u0007" +
                    "\u0002\u0000\u0000\u0360\u0362\u0003\u00b8\\\u0000\u0361\u035f\u0001\u0000" +
                    "\u0000\u0000\u0361\u0362\u0001\u0000\u0000\u0000\u0362\u036a\u0001\u0000" +
                    "\u0000\u0000\u0363\u0365\u0005\u0088\u0000\u0000\u0364\u0363\u0001\u0000" +
                    "\u0000\u0000\u0364\u0365\u0001\u0000\u0000\u0000\u0365\u0368\u0001\u0000" +
                    "\u0000\u0000\u0366\u0369\u0003\u00b8\\\u0000\u0367\u0369\u0005\u0138\u0000" +
                    "\u0000\u0368\u0366\u0001\u0000\u0000\u0000\u0368\u0367\u0001\u0000\u0000" +
                    "\u0000\u0369\u036b\u0001\u0000\u0000\u0000\u036a\u0364\u0001\u0000\u0000" +
                    "\u0000\u036a\u036b\u0001\u0000\u0000\u0000\u036b\u046b\u0001\u0000\u0000" +
                    "\u0000\u036c\u036d\u0005\u00e5\u0000\u0000\u036d\u036e\u00054\u0000\u0000" +
                    "\u036e\u036f\u0005\u00f4\u0000\u0000\u036f\u0372\u0003\u00b8\\\u0000\u0370" +
                    "\u0371\u0005\u0013\u0000\u0000\u0371\u0373\u0005\u00df\u0000\u0000\u0372" +
                    "\u0370\u0001\u0000\u0000\u0000\u0372\u0373\u0001\u0000\u0000\u0000\u0373" +
                    "\u046b\u0001\u0000\u0000\u0000\u0374\u0375\u0005\u00e5\u0000\u0000\u0375" +
                    "\u0376\u00057\u0000\u0000\u0376\u046b\u0003,\u0016\u0000\u0377\u0378\u0005" +
                    "\u00e5\u0000\u0000\u0378\u037d\u0005!\u0000\u0000\u0379\u037b\u0005\u0088" +
                    "\u0000\u0000\u037a\u0379\u0001\u0000\u0000\u0000\u037a\u037b\u0001\u0000" +
                    "\u0000\u0000\u037b\u037c\u0001\u0000\u0000\u0000\u037c\u037e\u0005\u0138" +
                    "\u0000\u0000\u037d\u037a\u0001\u0000\u0000\u0000\u037d\u037e\u0001\u0000" +
                    "\u0000\u0000\u037e\u046b\u0001\u0000\u0000\u0000\u037f\u0380\u0007\u0007" +
                    "\u0000\u0000\u0380\u0382\u0005j\u0000\u0000\u0381\u0383\u0005Z\u0000\u0000" +
                    "\u0382\u0381\u0001\u0000\u0000\u0000\u0382\u0383\u0001\u0000\u0000\u0000" +
                    "\u0383\u0384\u0001\u0000\u0000\u0000\u0384\u046b\u00030\u0018\u0000\u0385" +
                    "\u0386\u0007\u0007\u0000\u0000\u0386\u0388\u0003,\u0016\u0000\u0387\u0389" +
                    "\u0005Z\u0000\u0000\u0388\u0387\u0001\u0000\u0000\u0000\u0388\u0389\u0001" +
                    "\u0000\u0000\u0000\u0389\u038a\u0001\u0000\u0000\u0000\u038a\u038b\u0003" +
                    "\u00b8\\\u0000\u038b\u046b\u0001\u0000\u0000\u0000\u038c\u038e\u0007\u0007" +
                    "\u0000\u0000\u038d\u038f\u0005\u00f4\u0000\u0000\u038e\u038d\u0001\u0000" +
                    "\u0000\u0000\u038e\u038f\u0001\u0000\u0000\u0000\u038f\u0391\u0001\u0000" +
                    "\u0000\u0000\u0390\u0392\u0007\b\u0000\u0000\u0391\u0390\u0001\u0000\u0000" +
                    "\u0000\u0391\u0392\u0001\u0000\u0000\u0000\u0392\u0393\u0001\u0000\u0000" +
                    "\u0000\u0393\u0395\u0003\u00b8\\\u0000\u0394\u0396\u0003(\u0014\u0000" +
                    "\u0395\u0394\u0001\u0000\u0000\u0000\u0395\u0396\u0001\u0000\u0000\u0000" +
                    "\u0396\u0398\u0001\u0000\u0000\u0000\u0397\u0399\u00032\u0019\u0000\u0398" +
                    "\u0397\u0001\u0000\u0000\u0000\u0398\u0399\u0001\u0000\u0000\u0000\u0399" +
                    "\u046b\u0001\u0000\u0000\u0000\u039a\u039c\u0007\u0007\u0000\u0000\u039b" +
                    "\u039d\u0005\u00c1\u0000\u0000\u039c\u039b\u0001\u0000\u0000\u0000\u039c" +
                    "\u039d\u0001\u0000\u0000\u0000\u039d\u039e\u0001\u0000\u0000\u0000\u039e" +
                    "\u046b\u0003\"\u0011\u0000\u039f\u03a0\u0005,\u0000\u0000\u03a0\u03a1" +
                    "\u0005\u00a5\u0000\u0000\u03a1\u03a2\u0003,\u0016\u0000\u03a2\u03a3\u0003" +
                    "\u00b8\\\u0000\u03a3\u03a4\u0005\u007f\u0000\u0000\u03a4\u03a5\u0007\t" +
                    "\u0000\u0000\u03a5\u046b\u0001\u0000\u0000\u0000\u03a6\u03a7\u0005,\u0000" +
                    "\u0000\u03a7\u03a8\u0005\u00a5\u0000\u0000\u03a8\u03a9\u0005\u00f4\u0000" +
                    "\u0000\u03a9\u03aa\u0003\u00b8\\\u0000\u03aa\u03ab\u0005\u007f\u0000\u0000" +
                    "\u03ab\u03ac\u0007\t\u0000\u0000\u03ac\u046b\u0001\u0000\u0000\u0000\u03ad" +
                    "\u03ae\u0005\u00c8\u0000\u0000\u03ae\u03af\u0005\u00f4\u0000\u0000\u03af" +
                    "\u046b\u0003\u00b8\\\u0000\u03b0\u03b1\u0005\u00c8\u0000\u0000\u03b1\u03b2" +
                    "\u0005j\u0000\u0000\u03b2\u046b\u0003\u00b8\\\u0000\u03b3\u03bb\u0005" +
                    "\u00c8\u0000\u0000\u03b4\u03bc\u0005\u0138\u0000\u0000\u03b5\u03b7\t\u0000" +
                    "\u0000\u0000\u03b6\u03b5\u0001\u0000\u0000\u0000\u03b7\u03ba\u0001\u0000" +
                    "\u0000\u0000\u03b8\u03b9\u0001\u0000\u0000\u0000\u03b8\u03b6\u0001\u0000" +
                    "\u0000\u0000\u03b9\u03bc\u0001\u0000\u0000\u0000\u03ba\u03b8\u0001\u0000" +
                    "\u0000\u0000\u03bb\u03b4\u0001\u0000\u0000\u0000\u03bb\u03b8\u0001\u0000" +
                    "\u0000\u0000\u03bc\u046b\u0001\u0000\u0000\u0000\u03bd\u03bf\u0005\u001c" +
                    "\u0000\u0000\u03be\u03c0\u0005\u0085\u0000\u0000\u03bf\u03be\u0001\u0000" +
                    "\u0000\u0000\u03bf\u03c0\u0001\u0000\u0000\u0000\u03c0\u03c1\u0001\u0000" +
                    "\u0000\u0000\u03c1\u03c2\u0005\u00f4\u0000\u0000\u03c2\u03c5\u0003\u00b8" +
                    "\\\u0000\u03c3\u03c4\u0005\u00a8\u0000\u0000\u03c4\u03c6\u0003<\u001e" +
                    "\u0000\u03c5\u03c3\u0001\u0000\u0000\u0000\u03c5\u03c6\u0001\u0000\u0000" +
                    "\u0000\u03c6\u03cb\u0001\u0000\u0000\u0000\u03c7\u03c9\u0005\u0013\u0000" +
                    "\u0000\u03c8\u03c7\u0001\u0000\u0000\u0000\u03c8\u03c9\u0001\u0000\u0000" +
                    "\u0000\u03c9\u03ca\u0001\u0000\u0000\u0000\u03ca\u03cc\u0003\"\u0011\u0000" +
                    "\u03cb\u03c8\u0001\u0000\u0000\u0000\u03cb\u03cc\u0001\u0000\u0000\u0000" +
                    "\u03cc\u046b\u0001\u0000\u0000\u0000\u03cd\u03ce\u0005\u010c\u0000\u0000" +
                    "\u03ce\u03d1\u0005\u00f4\u0000\u0000\u03cf\u03d0\u0005r\u0000\u0000\u03d0" +
                    "\u03d2\u0005W\u0000\u0000\u03d1\u03cf\u0001\u0000\u0000\u0000\u03d1\u03d2" +
                    "\u0001\u0000\u0000\u0000\u03d2\u03d3\u0001\u0000\u0000\u0000\u03d3\u046b" +
                    "\u0003\u00b8\\\u0000\u03d4\u03d5\u0005$\u0000\u0000\u03d5\u046b\u0005" +
                    "\u001c\u0000\u0000\u03d6\u03d7\u0005\u008d\u0000\u0000\u03d7\u03d9\u0005" +
                    ">\u0000\u0000\u03d8\u03da\u0005\u008e\u0000\u0000\u03d9\u03d8\u0001\u0000" +
                    "\u0000\u0000\u03d9\u03da\u0001\u0000\u0000\u0000\u03da\u03db\u0001\u0000" +
                    "\u0000\u0000\u03db\u03dc\u0005y\u0000\u0000\u03dc\u03de\u0005\u0138\u0000" +
                    "\u0000\u03dd\u03df\u0005\u00b1\u0000\u0000\u03de\u03dd\u0001\u0000\u0000" +
                    "\u0000\u03de\u03df\u0001\u0000\u0000\u0000\u03df\u03e0\u0001\u0000\u0000" +
                    "\u0000\u03e0\u03e1\u0005~\u0000\u0000\u03e1\u03e2\u0005\u00f4\u0000\u0000" +
                    "\u03e2\u03e4\u0003\u00b8\\\u0000\u03e3\u03e5\u0003(\u0014\u0000\u03e4" +
                    "\u03e3\u0001\u0000\u0000\u0000\u03e4\u03e5\u0001\u0000\u0000\u0000\u03e5" +
                    "\u046b\u0001\u0000\u0000\u0000\u03e6\u03e7\u0005\u0107\u0000\u0000\u03e7" +
                    "\u03e8\u0005\u00f4\u0000\u0000\u03e8\u03ea\u0003\u00b8\\\u0000\u03e9\u03eb" +
                    "\u0003(\u0014\u0000\u03ea\u03e9\u0001\u0000\u0000\u0000\u03ea\u03eb\u0001" +
                    "\u0000\u0000\u0000\u03eb\u046b\u0001\u0000\u0000\u0000\u03ec\u03ed\u0005" +
                    "\u009b\u0000\u0000\u03ed\u03ee\u0005\u00ca\u0000\u0000\u03ee\u03ef\u0005" +
                    "\u00f4\u0000\u0000\u03ef\u03f2\u0003\u00b8\\\u0000\u03f0\u03f1\u0007\n" +
                    "\u0000\u0000\u03f1\u03f3\u0005\u00b4\u0000\u0000\u03f2\u03f0\u0001\u0000" +
                    "\u0000\u0000\u03f2\u03f3\u0001\u0000\u0000\u0000\u03f3\u046b\u0001\u0000" +
                    "\u0000\u0000\u03f4\u03f5\u0007\u000b\u0000\u0000\u03f5\u03f9\u0003\u011e" +
                    "\u008f\u0000\u03f6\u03f8\t\u0000\u0000\u0000\u03f7\u03f6\u0001\u0000\u0000" +
                    "\u0000\u03f8\u03fb\u0001\u0000\u0000\u0000\u03f9\u03fa\u0001\u0000\u0000" +
                    "\u0000\u03f9\u03f7\u0001\u0000\u0000\u0000\u03fa\u046b\u0001\u0000\u0000" +
                    "\u0000\u03fb\u03f9\u0001\u0000\u0000\u0000\u03fc\u03fd\u0005\u00e2\u0000" +
                    "\u0000\u03fd\u0401\u0005\u00d3\u0000\u0000\u03fe\u0400\t\u0000\u0000\u0000" +
                    "\u03ff\u03fe\u0001\u0000\u0000\u0000\u0400\u0403\u0001\u0000\u0000\u0000" +
                    "\u0401\u0402\u0001\u0000\u0000\u0000\u0401\u03ff\u0001\u0000\u0000\u0000" +
                    "\u0402\u046b\u0001\u0000\u0000\u0000\u0403\u0401\u0001\u0000\u0000\u0000" +
                    "\u0404\u0405\u0005\u00e2\u0000\u0000\u0405\u0406\u0005\u00fb\u0000\u0000" +
                    "\u0406\u0407\u0005\u0121\u0000\u0000\u0407\u046b\u0003\u00e6s\u0000\u0408" +
                    "\u0409\u0005\u00e2\u0000\u0000\u0409\u040a\u0005\u00fb\u0000\u0000\u040a" +
                    "\u040b\u0005\u0121\u0000\u0000\u040b\u046b\u0007\f\u0000\u0000\u040c\u040d" +
                    "\u0005\u00e2\u0000\u0000\u040d\u040e\u0005\u00fb\u0000\u0000\u040e\u0412" +
                    "\u0005\u0121\u0000\u0000\u040f\u0411\t\u0000\u0000\u0000\u0410\u040f\u0001" +
                    "\u0000\u0000\u0000\u0411\u0414\u0001\u0000\u0000\u0000\u0412\u0413\u0001" +
                    "\u0000\u0000\u0000\u0412\u0410\u0001\u0000\u0000\u0000\u0413\u046b\u0001" +
                    "\u0000\u0000\u0000\u0414\u0412\u0001\u0000\u0000\u0000\u0415\u0416\u0005" +
                    "\u00e2\u0000\u0000\u0416\u0417\u0003\u0010\b\u0000\u0417\u0418\u0005\u0122" +
                    "\u0000\u0000\u0418\u0419\u0003\u0012\t\u0000\u0419\u046b\u0001\u0000\u0000" +
                    "\u0000\u041a\u041b\u0005\u00e2\u0000\u0000\u041b\u0423\u0003\u0010\b\u0000" +
                    "\u041c\u0420\u0005\u0122\u0000\u0000\u041d\u041f\t\u0000\u0000\u0000\u041e" +
                    "\u041d\u0001\u0000\u0000\u0000\u041f\u0422\u0001\u0000\u0000\u0000\u0420" +
                    "\u0421\u0001\u0000\u0000\u0000\u0420\u041e\u0001\u0000\u0000\u0000\u0421" +
                    "\u0424\u0001\u0000\u0000\u0000\u0422\u0420\u0001\u0000\u0000\u0000\u0423" +
                    "\u041c\u0001\u0000\u0000\u0000\u0423\u0424\u0001\u0000\u0000\u0000\u0424" +
                    "\u046b\u0001\u0000\u0000\u0000\u0425\u0429\u0005\u00e2\u0000\u0000\u0426" +
                    "\u0428\t\u0000\u0000\u0000\u0427\u0426\u0001\u0000\u0000\u0000\u0428\u042b" +
                    "\u0001\u0000\u0000\u0000\u0429\u042a\u0001\u0000\u0000\u0000\u0429\u0427" +
                    "\u0001\u0000\u0000\u0000\u042a\u042c\u0001\u0000\u0000\u0000\u042b\u0429" +
                    "\u0001\u0000\u0000\u0000\u042c\u042d\u0005\u0122\u0000\u0000\u042d\u046b" +
                    "\u0003\u0012\t\u0000\u042e\u0432\u0005\u00e2\u0000\u0000\u042f\u0431\t" +
                    "\u0000\u0000\u0000\u0430\u042f\u0001\u0000\u0000\u0000\u0431\u0434\u0001" +
                    "\u0000\u0000\u0000\u0432\u0433\u0001\u0000\u0000\u0000\u0432\u0430\u0001" +
                    "\u0000\u0000\u0000\u0433\u046b\u0001\u0000\u0000\u0000\u0434\u0432\u0001" +
                    "\u0000\u0000\u0000\u0435\u0436\u0005\u00cd\u0000\u0000\u0436\u046b\u0003" +
                    "\u0010\b\u0000\u0437\u043b\u0005\u00cd\u0000\u0000\u0438\u043a\t\u0000" +
                    "\u0000\u0000\u0439\u0438\u0001\u0000\u0000\u0000\u043a\u043d\u0001\u0000" +
                    "\u0000\u0000\u043b\u043c\u0001\u0000\u0000\u0000\u043b\u0439\u0001\u0000" +
                    "\u0000\u0000\u043c\u046b\u0001\u0000\u0000\u0000\u043d\u043b\u0001\u0000" +
                    "\u0000\u0000\u043e\u043f\u00054\u0000\u0000\u043f\u0443\u0005v\u0000\u0000" +
                    "\u0440\u0441\u0005r\u0000\u0000\u0441\u0442\u0005\u00a0\u0000\u0000\u0442" +
                    "\u0444\u0005W\u0000\u0000\u0443\u0440\u0001\u0000\u0000\u0000\u0443\u0444" +
                    "\u0001\u0000\u0000\u0000\u0444\u0445\u0001\u0000\u0000\u0000\u0445\u0446" +
                    "\u0003\u011e\u008f\u0000\u0446\u0448\u0005\u00a5\u0000\u0000\u0447\u0449" +
                    "\u0005\u00f4\u0000\u0000\u0448\u0447\u0001\u0000\u0000\u0000\u0448\u0449" +
                    "\u0001\u0000\u0000\u0000\u0449\u044a\u0001\u0000\u0000\u0000\u044a\u044d" +
                    "\u0003\u00b8\\\u0000\u044b\u044c\u0005\u0115\u0000\u0000\u044c\u044e\u0003" +
                    "\u011e\u008f\u0000\u044d\u044b\u0001\u0000\u0000\u0000\u044d\u044e\u0001" +
                    "\u0000\u0000\u0000\u044e\u044f\u0001\u0000\u0000\u0000\u044f\u0450\u0005" +
                    "\u0002\u0000\u0000\u0450\u0451\u0003\u00ba]\u0000\u0451\u0454\u0005\u0003" +
                    "\u0000\u0000\u0452\u0453\u0005\u00a8\u0000\u0000\u0453\u0455\u0003<\u001e" +
                    "\u0000\u0454\u0452\u0001\u0000\u0000\u0000\u0454\u0455\u0001\u0000\u0000" +
                    "\u0000\u0455\u046b\u0001\u0000\u0000\u0000\u0456\u0457\u0005P\u0000\u0000" +
                    "\u0457\u045a\u0005v\u0000\u0000\u0458\u0459\u0005r\u0000\u0000\u0459\u045b" +
                    "\u0005W\u0000\u0000\u045a\u0458\u0001\u0000\u0000\u0000\u045a\u045b\u0001" +
                    "\u0000\u0000\u0000\u045b\u045c\u0001\u0000\u0000\u0000\u045c\u045d\u0003" +
                    "\u011e\u008f\u0000\u045d\u045f\u0005\u00a5\u0000\u0000\u045e\u0460\u0005" +
                    "\u00f4\u0000\u0000\u045f\u045e\u0001\u0000\u0000\u0000\u045f\u0460\u0001" +
                    "\u0000\u0000\u0000\u0460\u0461\u0001\u0000\u0000\u0000\u0461\u0462\u0003" +
                    "\u00b8\\\u0000\u0462\u046b\u0001\u0000\u0000\u0000\u0463\u0467\u0003\u0014" +
                    "\n\u0000\u0464\u0466\t\u0000\u0000\u0000\u0465\u0464\u0001\u0000\u0000" +
                    "\u0000\u0466\u0469\u0001\u0000\u0000\u0000\u0467\u0468\u0001\u0000\u0000" +
                    "\u0000\u0467\u0465\u0001\u0000\u0000\u0000\u0468\u046b\u0001\u0000\u0000" +
                    "\u0000\u0469\u0467\u0001\u0000\u0000\u0000\u046a\u0149\u0001\u0000\u0000" +
                    "\u0000\u046a\u014b\u0001\u0000\u0000\u0000\u046a\u014e\u0001\u0000\u0000" +
                    "\u0000\u046a\u0150\u0001\u0000\u0000\u0000\u046a\u0154\u0001\u0000\u0000" +
                    "\u0000\u046a\u015a\u0001\u0000\u0000\u0000\u046a\u016c\u0001\u0000\u0000" +
                    "\u0000\u046a\u0173\u0001\u0000\u0000\u0000\u046a\u0179\u0001\u0000\u0000" +
                    "\u0000\u046a\u0183\u0001\u0000\u0000\u0000\u046a\u018f\u0001\u0000\u0000" +
                    "\u0000\u046a\u01a0\u0001\u0000\u0000\u0000\u046a\u01b5\u0001\u0000\u0000" +
                    "\u0000\u046a\u01c6\u0001\u0000\u0000\u0000\u046a\u01d7\u0001\u0000\u0000" +
                    "\u0000\u046a\u01e2\u0001\u0000\u0000\u0000\u046a\u01e9\u0001\u0000\u0000" +
                    "\u0000\u046a\u01f2\u0001\u0000\u0000\u0000\u046a\u01fb\u0001\u0000\u0000" +
                    "\u0000\u046a\u0208\u0001\u0000\u0000\u0000\u046a\u0213\u0001\u0000\u0000" +
                    "\u0000\u046a\u021a\u0001\u0000\u0000\u0000\u046a\u0221\u0001\u0000\u0000" +
                    "\u0000\u046a\u022c\u0001\u0000\u0000\u0000\u046a\u0237\u0001\u0000\u0000" +
                    "\u0000\u046a\u0246\u0001\u0000\u0000\u0000\u046a\u0252\u0001\u0000\u0000" +
                    "\u0000\u046a\u0260\u0001\u0000\u0000\u0000\u046a\u026a\u0001\u0000\u0000" +
                    "\u0000\u046a\u0278\u0001\u0000\u0000\u0000\u046a\u0280\u0001\u0000\u0000" +
                    "\u0000\u046a\u0293\u0001\u0000\u0000\u0000\u046a\u029c\u0001\u0000\u0000" +
                    "\u0000\u046a\u02a2\u0001\u0000\u0000\u0000\u046a\u02ac\u0001\u0000\u0000" +
                    "\u0000\u046a\u02b3\u0001\u0000\u0000\u0000\u046a\u02d6\u0001\u0000\u0000" +
                    "\u0000\u046a\u02ec\u0001\u0000\u0000\u0000\u046a\u02f4\u0001\u0000\u0000" +
                    "\u0000\u046a\u0310\u0001\u0000\u0000\u0000\u046a\u031a\u0001\u0000\u0000" +
                    "\u0000\u046a\u031f\u0001\u0000\u0000\u0000\u046a\u032b\u0001\u0000\u0000" +
                    "\u0000\u046a\u0337\u0001\u0000\u0000\u0000\u046a\u0340\u0001\u0000\u0000" +
                    "\u0000\u046a\u0348\u0001\u0000\u0000\u0000\u046a\u0354\u0001\u0000\u0000" +
                    "\u0000\u046a\u035a\u0001\u0000\u0000\u0000\u046a\u036c\u0001\u0000\u0000" +
                    "\u0000\u046a\u0374\u0001\u0000\u0000\u0000\u046a\u0377\u0001\u0000\u0000" +
                    "\u0000\u046a\u037f\u0001\u0000\u0000\u0000\u046a\u0385\u0001\u0000\u0000" +
                    "\u0000\u046a\u038c\u0001\u0000\u0000\u0000\u046a\u039a\u0001\u0000\u0000" +
                    "\u0000\u046a\u039f\u0001\u0000\u0000\u0000\u046a\u03a6\u0001\u0000\u0000" +
                    "\u0000\u046a\u03ad\u0001\u0000\u0000\u0000\u046a\u03b0\u0001\u0000\u0000" +
                    "\u0000\u046a\u03b3\u0001\u0000\u0000\u0000\u046a\u03bd\u0001\u0000\u0000" +
                    "\u0000\u046a\u03cd\u0001\u0000\u0000\u0000\u046a\u03d4\u0001\u0000\u0000" +
                    "\u0000\u046a\u03d6\u0001\u0000\u0000\u0000\u046a\u03e6\u0001\u0000\u0000" +
                    "\u0000\u046a\u03ec\u0001\u0000\u0000\u0000\u046a\u03f4\u0001\u0000\u0000" +
                    "\u0000\u046a\u03fc\u0001\u0000\u0000\u0000\u046a\u0404\u0001\u0000\u0000" +
                    "\u0000\u046a\u0408\u0001\u0000\u0000\u0000\u046a\u040c\u0001\u0000\u0000" +
                    "\u0000\u046a\u0415\u0001\u0000\u0000\u0000\u046a\u041a\u0001\u0000\u0000" +
                    "\u0000\u046a\u0425\u0001\u0000\u0000\u0000\u046a\u042e\u0001\u0000\u0000" +
                    "\u0000\u046a\u0435\u0001\u0000\u0000\u0000\u046a\u0437\u0001\u0000\u0000" +
                    "\u0000\u046a\u043e\u0001\u0000\u0000\u0000\u046a\u0456\u0001\u0000\u0000" +
                    "\u0000\u046a\u0463\u0001\u0000\u0000\u0000\u046b\u000f\u0001\u0000\u0000" +
                    "\u0000\u046c\u046d\u0003\u0122\u0091\u0000\u046d\u0011\u0001\u0000\u0000" +
                    "\u0000\u046e\u046f\u0003\u0122\u0091\u0000\u046f\u0013\u0001\u0000\u0000" +
                    "\u0000\u0470\u0471\u00054\u0000\u0000\u0471\u0519\u0005\u00d3\u0000\u0000" +
                    "\u0472\u0473\u0005P\u0000\u0000\u0473\u0519\u0005\u00d3\u0000\u0000\u0474" +
                    "\u0476\u0005m\u0000\u0000\u0475\u0477\u0005\u00d3\u0000\u0000\u0476\u0475" +
                    "\u0001\u0000\u0000\u0000\u0476\u0477\u0001\u0000\u0000\u0000\u0477\u0519" +
                    "\u0001\u0000\u0000\u0000\u0478\u047a\u0005\u00d0\u0000\u0000\u0479\u047b" +
                    "\u0005\u00d3\u0000\u0000\u047a\u0479\u0001\u0000\u0000\u0000\u047a\u047b" +
                    "\u0001\u0000\u0000\u0000\u047b\u0519\u0001\u0000\u0000\u0000\u047c\u047d" +
                    "\u0005\u00e5\u0000\u0000\u047d\u0519\u0005m\u0000\u0000\u047e\u047f\u0005" +
                    "\u00e5\u0000\u0000\u047f\u0481\u0005\u00d3\u0000\u0000\u0480\u0482\u0005" +
                    "m\u0000\u0000\u0481\u0480\u0001\u0000\u0000\u0000\u0481\u0482\u0001\u0000" +
                    "\u0000\u0000\u0482\u0519\u0001\u0000\u0000\u0000\u0483\u0484\u0005\u00e5" +
                    "\u0000\u0000\u0484\u0519\u0005\u00bd\u0000\u0000\u0485\u0486\u0005\u00e5" +
                    "\u0000\u0000\u0486\u0519\u0005\u00d4\u0000\u0000\u0487\u0488\u0005\u00e5" +
                    "\u0000\u0000\u0488\u0489\u00057\u0000\u0000\u0489\u0519\u0005\u00d4\u0000" +
                    "\u0000\u048a\u048b\u0005Y\u0000\u0000\u048b\u0519\u0005\u00f4\u0000\u0000" +
                    "\u048c\u048d\u0005t\u0000\u0000\u048d\u0519\u0005\u00f4\u0000\u0000\u048e" +
                    "\u048f\u0005\u00e5\u0000\u0000\u048f\u0519\u0005/\u0000\u0000\u0490\u0491" +
                    "\u0005\u00e5\u0000\u0000\u0491\u0492\u00054\u0000\u0000\u0492\u0519\u0005" +
                    "\u00f4\u0000\u0000\u0493\u0494\u0005\u00e5\u0000\u0000\u0494\u0519\u0005" +
                    "\u0103\u0000\u0000\u0495\u0496\u0005\u00e5\u0000\u0000\u0496\u0519\u0005" +
                    "w\u0000\u0000\u0497\u0498\u0005\u00e5\u0000\u0000\u0498\u0519\u0005\u0091" +
                    "\u0000\u0000\u0499\u049a\u00054\u0000\u0000\u049a\u0519\u0005v\u0000\u0000" +
                    "\u049b\u049c\u0005P\u0000\u0000\u049c\u0519\u0005v\u0000\u0000\u049d\u049e" +
                    "\u0005\u000b\u0000\u0000\u049e\u0519\u0005v\u0000\u0000\u049f\u04a0\u0005" +
                    "\u0090\u0000\u0000\u04a0\u0519\u0005\u00f4\u0000\u0000\u04a1\u04a2\u0005" +
                    "\u0090\u0000\u0000\u04a2\u0519\u0005?\u0000\u0000\u04a3\u04a4\u0005\u0110" +
                    "\u0000\u0000\u04a4\u0519\u0005\u00f4\u0000\u0000\u04a5\u04a6\u0005\u0110" +
                    "\u0000\u0000\u04a6\u0519\u0005?\u0000\u0000\u04a7\u04a8\u00054\u0000\u0000" +
                    "\u04a8\u04a9\u0005\u00f8\u0000\u0000\u04a9\u0519\u0005\u0093\u0000\u0000" +
                    "\u04aa\u04ab\u0005P\u0000\u0000\u04ab\u04ac\u0005\u00f8\u0000\u0000\u04ac" +
                    "\u0519\u0005\u0093\u0000\u0000\u04ad\u04ae\u0005\u000b\u0000\u0000\u04ae" +
                    "\u04af\u0005\u00f4\u0000\u0000\u04af\u04b0\u0003\u00be_\u0000\u04b0\u04b1" +
                    "\u0005\u00a0\u0000\u0000\u04b1\u04b2\u0005&\u0000\u0000\u04b2\u0519\u0001" +
                    "\u0000\u0000\u0000\u04b3\u04b4\u0005\u000b\u0000\u0000\u04b4\u04b5\u0005" +
                    "\u00f4\u0000\u0000\u04b5\u04b6\u0003\u00be_\u0000\u04b6\u04b7\u0005&\u0000" +
                    "\u0000\u04b7\u04b8\u0005\u001b\u0000\u0000\u04b8\u0519\u0001\u0000\u0000" +
                    "\u0000\u04b9\u04ba\u0005\u000b\u0000\u0000\u04ba\u04bb\u0005\u00f4\u0000" +
                    "\u0000\u04bb\u04bc\u0003\u00be_\u0000\u04bc\u04bd\u0005\u00a0\u0000\u0000" +
                    "\u04bd\u04be\u0005\u00e9\u0000\u0000\u04be\u0519\u0001\u0000\u0000\u0000" +
                    "\u04bf\u04c0\u0005\u000b\u0000\u0000\u04c0\u04c1\u0005\u00f4\u0000\u0000" +
                    "\u04c1\u04c2\u0003\u00be_\u0000\u04c2\u04c3\u0005\u00e6\u0000\u0000\u04c3" +
                    "\u04c4\u0005\u001b\u0000\u0000\u04c4\u0519\u0001\u0000\u0000\u0000\u04c5" +
                    "\u04c6\u0005\u000b\u0000\u0000\u04c6\u04c7\u0005\u00f4\u0000\u0000\u04c7" +
                    "\u04c8\u0003\u00be_\u0000\u04c8\u04c9\u0005\u00a0\u0000\u0000\u04c9\u04ca" +
                    "\u0005\u00e6\u0000\u0000\u04ca\u0519\u0001\u0000\u0000\u0000\u04cb\u04cc" +
                    "\u0005\u000b\u0000\u0000\u04cc\u04cd\u0005\u00f4\u0000\u0000\u04cd\u04ce" +
                    "\u0003\u00be_\u0000\u04ce\u04cf\u0005\u00a0\u0000\u0000\u04cf\u04d0\u0005" +
                    "\u00ec\u0000\u0000\u04d0\u04d1\u0005\u0013\u0000\u0000\u04d1\u04d2\u0005" +
                    "K\u0000\u0000\u04d2\u0519\u0001\u0000\u0000\u0000\u04d3\u04d4\u0005\u000b" +
                    "\u0000\u0000\u04d4\u04d5\u0005\u00f4\u0000\u0000\u04d5\u04d6\u0003\u00be" +
                    "_\u0000\u04d6\u04d7\u0005\u00e2\u0000\u0000\u04d7\u04d8\u0005\u00e6\u0000" +
                    "\u0000\u04d8\u04d9\u0005\u008f\u0000\u0000\u04d9\u0519\u0001\u0000\u0000" +
                    "\u0000\u04da\u04db\u0005\u000b\u0000\u0000\u04db\u04dc\u0005\u00f4\u0000" +
                    "\u0000\u04dc\u04dd\u0003\u00be_\u0000\u04dd\u04de\u0005V\u0000\u0000\u04de" +
                    "\u04df\u0005\u00b2\u0000\u0000\u04df\u0519\u0001\u0000\u0000\u0000\u04e0" +
                    "\u04e1\u0005\u000b\u0000\u0000\u04e1\u04e2\u0005\u00f4\u0000\u0000\u04e2" +
                    "\u04e3\u0003\u00be_\u0000\u04e3\u04e4\u0005\u0011\u0000\u0000\u04e4\u04e5" +
                    "\u0005\u00b2\u0000\u0000\u04e5\u0519\u0001\u0000\u0000\u0000\u04e6\u04e7" +
                    "\u0005\u000b\u0000\u0000\u04e7\u04e8\u0005\u00f4\u0000\u0000\u04e8\u04e9" +
                    "\u0003\u00be_\u0000\u04e9\u04ea\u0005\u010a\u0000\u0000\u04ea\u04eb\u0005" +
                    "\u00b2\u0000\u0000\u04eb\u0519\u0001\u0000\u0000\u0000\u04ec\u04ed\u0005" +
                    "\u000b\u0000\u0000\u04ed\u04ee\u0005\u00f4\u0000\u0000\u04ee\u04ef\u0003" +
                    "\u00be_\u0000\u04ef\u04f0\u0005\u0100\u0000\u0000\u04f0\u0519\u0001\u0000" +
                    "\u0000\u0000\u04f1\u04f2\u0005\u000b\u0000\u0000\u04f2\u04f3\u0005\u00f4" +
                    "\u0000\u0000\u04f3\u04f5\u0003\u00be_\u0000\u04f4\u04f6\u0003(\u0014\u0000" +
                    "\u04f5\u04f4\u0001\u0000\u0000\u0000\u04f5\u04f6\u0001\u0000\u0000\u0000" +
                    "\u04f6\u04f7\u0001\u0000\u0000\u0000\u04f7\u04f8\u0005.\u0000\u0000\u04f8" +
                    "\u0519\u0001\u0000\u0000\u0000\u04f9\u04fa\u0005\u000b\u0000\u0000\u04fa" +
                    "\u04fb\u0005\u00f4\u0000\u0000\u04fb\u04fd\u0003\u00be_\u0000\u04fc\u04fe" +
                    "\u0003(\u0014\u0000\u04fd\u04fc\u0001\u0000\u0000\u0000\u04fd\u04fe\u0001" +
                    "\u0000\u0000\u0000\u04fe\u04ff\u0001\u0000\u0000\u0000\u04ff\u0500\u0005" +
                    "1\u0000\u0000\u0500\u0519\u0001\u0000\u0000\u0000\u0501\u0502\u0005\u000b" +
                    "\u0000\u0000\u0502\u0503\u0005\u00f4\u0000\u0000\u0503\u0505\u0003\u00be" +
                    "_\u0000\u0504\u0506\u0003(\u0014\u0000\u0505\u0504\u0001\u0000\u0000\u0000" +
                    "\u0505\u0506\u0001\u0000\u0000\u0000\u0506\u0507\u0001\u0000\u0000\u0000" +
                    "\u0507\u0508\u0005\u00e2\u0000\u0000\u0508\u0509\u0005a\u0000\u0000\u0509" +
                    "\u0519\u0001\u0000\u0000\u0000\u050a\u050b\u0005\u000b\u0000\u0000\u050b" +
                    "\u050c\u0005\u00f4\u0000\u0000\u050c\u050e\u0003\u00be_\u0000\u050d\u050f" +
                    "\u0003(\u0014\u0000\u050e\u050d\u0001\u0000\u0000\u0000\u050e\u050f\u0001" +
                    "\u0000\u0000\u0000\u050f\u0510\u0001\u0000\u0000\u0000\u0510\u0511\u0005" +
                    "\u00cc\u0000\u0000\u0511\u0512\u0005+\u0000\u0000\u0512\u0519\u0001\u0000" +
                    "\u0000\u0000\u0513\u0514\u0005\u00ea\u0000\u0000\u0514\u0519\u0005\u0102" +
                    "\u0000\u0000\u0515\u0519\u0005-\u0000\u0000\u0516\u0519\u0005\u00d5\u0000" +
                    "\u0000\u0517\u0519\u0005J\u0000\u0000\u0518\u0470\u0001\u0000\u0000\u0000" +
                    "\u0518\u0472\u0001\u0000\u0000\u0000\u0518\u0474\u0001\u0000\u0000\u0000" +
                    "\u0518\u0478\u0001\u0000\u0000\u0000\u0518\u047c\u0001\u0000\u0000\u0000" +
                    "\u0518\u047e\u0001\u0000\u0000\u0000\u0518\u0483\u0001\u0000\u0000\u0000" +
                    "\u0518\u0485\u0001\u0000\u0000\u0000\u0518\u0487\u0001\u0000\u0000\u0000" +
                    "\u0518\u048a\u0001\u0000\u0000\u0000\u0518\u048c\u0001\u0000\u0000\u0000" +
                    "\u0518\u048e\u0001\u0000\u0000\u0000\u0518\u0490\u0001\u0000\u0000\u0000" +
                    "\u0518\u0493\u0001\u0000\u0000\u0000\u0518\u0495\u0001\u0000\u0000\u0000" +
                    "\u0518\u0497\u0001\u0000\u0000\u0000\u0518\u0499\u0001\u0000\u0000\u0000" +
                    "\u0518\u049b\u0001\u0000\u0000\u0000\u0518\u049d\u0001\u0000\u0000\u0000" +
                    "\u0518\u049f\u0001\u0000\u0000\u0000\u0518\u04a1\u0001\u0000\u0000\u0000" +
                    "\u0518\u04a3\u0001\u0000\u0000\u0000\u0518\u04a5\u0001\u0000\u0000\u0000" +
                    "\u0518\u04a7\u0001\u0000\u0000\u0000\u0518\u04aa\u0001\u0000\u0000\u0000" +
                    "\u0518\u04ad\u0001\u0000\u0000\u0000\u0518\u04b3\u0001\u0000\u0000\u0000" +
                    "\u0518\u04b9\u0001\u0000\u0000\u0000\u0518\u04bf\u0001\u0000\u0000\u0000" +
                    "\u0518\u04c5\u0001\u0000\u0000\u0000\u0518\u04cb\u0001\u0000\u0000\u0000" +
                    "\u0518\u04d3\u0001\u0000\u0000\u0000\u0518\u04da\u0001\u0000\u0000\u0000" +
                    "\u0518\u04e0\u0001\u0000\u0000\u0000\u0518\u04e6\u0001\u0000\u0000\u0000" +
                    "\u0518\u04ec\u0001\u0000\u0000\u0000\u0518\u04f1\u0001\u0000\u0000\u0000" +
                    "\u0518\u04f9\u0001\u0000\u0000\u0000\u0518\u0501\u0001\u0000\u0000\u0000" +
                    "\u0518\u050a\u0001\u0000\u0000\u0000\u0518\u0513\u0001\u0000\u0000\u0000" +
                    "\u0518\u0515\u0001\u0000\u0000\u0000\u0518\u0516\u0001\u0000\u0000\u0000" +
                    "\u0518\u0517\u0001\u0000\u0000\u0000\u0519\u0015\u0001\u0000\u0000\u0000" +
                    "\u051a\u051c\u00054\u0000\u0000\u051b\u051d\u0005\u00f8\u0000\u0000\u051c" +
                    "\u051b\u0001\u0000\u0000\u0000\u051c\u051d\u0001\u0000\u0000\u0000\u051d" +
                    "\u051f\u0001\u0000\u0000\u0000\u051e\u0520\u0005[\u0000\u0000\u051f\u051e" +
                    "\u0001\u0000\u0000\u0000\u051f\u0520\u0001\u0000\u0000\u0000\u0520\u0521" +
                    "\u0001\u0000\u0000\u0000\u0521\u0525\u0005\u00f4\u0000\u0000\u0522\u0523" +
                    "\u0005r\u0000\u0000\u0523\u0524\u0005\u00a0\u0000\u0000\u0524\u0526\u0005" +
                    "W\u0000\u0000\u0525\u0522\u0001\u0000\u0000\u0000\u0525\u0526\u0001\u0000" +
                    "\u0000\u0000\u0526\u0527\u0001\u0000\u0000\u0000\u0527\u0528\u0003\u00b8" +
                    "\\\u0000\u0528\u0017\u0001\u0000\u0000\u0000\u0529\u052a\u00054\u0000" +
                    "\u0000\u052a\u052c\u0005\u00a9\u0000\u0000\u052b\u0529\u0001\u0000\u0000" +
                    "\u0000\u052b\u052c\u0001\u0000\u0000\u0000\u052c\u052d\u0001\u0000\u0000" +
                    "\u0000\u052d\u052e\u0005\u00cc\u0000\u0000\u052e\u052f\u0005\u00f4\u0000" +
                    "\u0000\u052f\u0530\u0003\u00b8\\\u0000\u0530\u0019\u0001\u0000\u0000\u0000" +
                    "\u0531\u0532\u0005&\u0000\u0000\u0532\u0533\u0005\u001b\u0000\u0000\u0533" +
                    "\u0537\u0003\u00a0P\u0000\u0534\u0535\u0005\u00e9\u0000\u0000\u0535\u0536" +
                    "\u0005\u001b\u0000\u0000\u0536\u0538\u0003\u00a4R\u0000\u0537\u0534\u0001" +
                    "\u0000\u0000\u0000\u0537\u0538\u0001\u0000\u0000\u0000\u0538\u0539\u0001" +
                    "\u0000\u0000\u0000\u0539\u053a\u0005~\u0000\u0000\u053a\u053b\u0005\u013c" +
                    "\u0000\u0000\u053b\u053c\u0005\u001a\u0000\u0000\u053c\u001b\u0001\u0000" +
                    "\u0000\u0000\u053d\u053e\u0005\u00e6\u0000\u0000\u053e\u053f\u0005\u001b" +
                    "\u0000\u0000\u053f\u0540\u0003\u00a0P\u0000\u0540\u0543\u0005\u00a5\u0000" +
                    "\u0000\u0541\u0544\u0003D\"\u0000\u0542\u0544\u0003F#\u0000\u0543\u0541" +
                    "\u0001\u0000\u0000\u0000\u0543\u0542\u0001\u0000\u0000\u0000\u0544\u0548" +
                    "\u0001\u0000\u0000\u0000\u0545\u0546\u0005\u00ec\u0000\u0000\u0546\u0547" +
                    "\u0005\u0013\u0000\u0000\u0547\u0549\u0005K\u0000\u0000\u0548\u0545\u0001" +
                    "\u0000\u0000\u0000\u0548\u0549\u0001\u0000\u0000\u0000\u0549\u001d\u0001" +
                    "\u0000\u0000\u0000\u054a\u054b\u0005\u008f\u0000\u0000\u054b\u054c\u0005" +
                    "\u0138\u0000\u0000\u054c\u001f\u0001\u0000\u0000\u0000\u054d\u054e\u0005" +
                    ",\u0000\u0000\u054e\u054f\u0005\u0138\u0000\u0000\u054f!\u0001\u0000\u0000" +
                    "\u0000\u0550\u0552\u00034\u001a\u0000\u0551\u0550\u0001\u0000\u0000\u0000" +
                    "\u0551\u0552\u0001\u0000\u0000\u0000\u0552\u0553\u0001\u0000\u0000\u0000" +
                    "\u0553\u0554\u0003V+\u0000\u0554\u0555\u0003R)\u0000\u0555#\u0001\u0000" +
                    "\u0000\u0000\u0556\u0557\u0005{\u0000\u0000\u0557\u0559\u0005\u00b1\u0000" +
                    "\u0000\u0558\u055a\u0005\u00f4\u0000\u0000\u0559\u0558\u0001\u0000\u0000" +
                    "\u0000\u0559\u055a\u0001\u0000\u0000\u0000\u055a\u055b\u0001\u0000\u0000" +
                    "\u0000\u055b\u0562\u0003\u00b8\\\u0000\u055c\u0560\u0003(\u0014\u0000" +
                    "\u055d\u055e\u0005r\u0000\u0000\u055e\u055f\u0005\u00a0\u0000\u0000\u055f" +
                    "\u0561\u0005W\u0000\u0000\u0560\u055d\u0001\u0000\u0000\u0000\u0560\u0561" +
                    "\u0001\u0000\u0000\u0000\u0561\u0563\u0001\u0000\u0000\u0000\u0562\u055c" +
                    "\u0001\u0000\u0000\u0000\u0562\u0563\u0001\u0000\u0000\u0000\u0563\u0565" +
                    "\u0001\u0000\u0000\u0000\u0564\u0566\u0003\u00a0P\u0000\u0565\u0564\u0001" +
                    "\u0000\u0000\u0000\u0565\u0566\u0001\u0000\u0000\u0000\u0566\u0594\u0001" +
                    "\u0000\u0000\u0000\u0567\u0568\u0005{\u0000\u0000\u0568\u056a\u0005~\u0000" +
                    "\u0000\u0569\u056b\u0005\u00f4\u0000\u0000\u056a\u0569\u0001\u0000\u0000" +
                    "\u0000\u056a\u056b\u0001\u0000\u0000\u0000\u056b\u056c\u0001\u0000\u0000" +
                    "\u0000\u056c\u056e\u0003\u00b8\\\u0000\u056d\u056f\u0003(\u0014\u0000" +
                    "\u056e\u056d\u0001\u0000\u0000\u0000\u056e\u056f\u0001\u0000\u0000\u0000" +
                    "\u056f\u0573\u0001\u0000\u0000\u0000\u0570\u0571\u0005r\u0000\u0000\u0571" +
                    "\u0572\u0005\u00a0\u0000\u0000\u0572\u0574\u0005W\u0000\u0000\u0573\u0570" +
                    "\u0001\u0000\u0000\u0000\u0573\u0574\u0001\u0000\u0000\u0000\u0574\u0576" +
                    "\u0001\u0000\u0000\u0000\u0575\u0577\u0003\u00a0P\u0000\u0576\u0575\u0001" +
                    "\u0000\u0000\u0000\u0576\u0577\u0001\u0000\u0000\u0000\u0577\u0594\u0001" +
                    "\u0000\u0000\u0000\u0578\u0579\u0005{\u0000\u0000\u0579\u057b\u0005\u00b1" +
                    "\u0000\u0000\u057a\u057c\u0005\u008e\u0000\u0000\u057b\u057a\u0001\u0000" +
                    "\u0000\u0000\u057b\u057c\u0001\u0000\u0000\u0000\u057c\u057d\u0001\u0000" +
                    "\u0000\u0000\u057d\u057e\u0005L\u0000\u0000\u057e\u0580\u0005\u0138\u0000" +
                    "\u0000\u057f\u0581\u0003\u00b4Z\u0000\u0580\u057f\u0001\u0000\u0000\u0000" +
                    "\u0580\u0581\u0001\u0000\u0000\u0000\u0581\u0583\u0001\u0000\u0000\u0000" +
                    "\u0582\u0584\u0003H$\u0000\u0583\u0582\u0001\u0000\u0000\u0000\u0583\u0584" +
                    "\u0001\u0000\u0000\u0000\u0584\u0594\u0001\u0000\u0000\u0000\u0585\u0586" +
                    "\u0005{\u0000\u0000\u0586\u0588\u0005\u00b1\u0000\u0000\u0587\u0589\u0005" +
                    "\u008e\u0000\u0000\u0588\u0587\u0001\u0000\u0000\u0000\u0588\u0589\u0001" +
                    "\u0000\u0000\u0000\u0589\u058a\u0001\u0000\u0000\u0000\u058a\u058c\u0005" +
                    "L\u0000\u0000\u058b\u058d\u0005\u0138\u0000\u0000\u058c\u058b\u0001\u0000" +
                    "\u0000\u0000\u058c\u058d\u0001\u0000\u0000\u0000\u058d\u058e\u0001\u0000" +
                    "\u0000\u0000\u058e\u0591\u00038\u001c\u0000\u058f\u0590\u0005\u00a8\u0000" +
                    "\u0000\u0590\u0592\u0003<\u001e\u0000\u0591\u058f\u0001\u0000\u0000\u0000" +
                    "\u0591\u0592\u0001\u0000\u0000\u0000\u0592\u0594\u0001\u0000\u0000\u0000" +
                    "\u0593\u0556\u0001\u0000\u0000\u0000\u0593\u0567\u0001\u0000\u0000\u0000" +
                    "\u0593\u0578\u0001\u0000\u0000\u0000\u0593\u0585\u0001\u0000\u0000\u0000" +
                    "\u0594%\u0001\u0000\u0000\u0000\u0595\u0597\u0003(\u0014\u0000\u0596\u0598" +
                    "\u0003\u001e\u000f\u0000\u0597\u0596\u0001\u0000\u0000\u0000\u0597\u0598" +
                    "\u0001\u0000\u0000\u0000\u0598\'\u0001\u0000\u0000\u0000\u0599\u059a\u0005" +
                    "\u00b2\u0000\u0000\u059a\u059b\u0005\u0002\u0000\u0000\u059b\u05a0\u0003" +
                    "*\u0015\u0000\u059c\u059d\u0005\u0004\u0000\u0000\u059d\u059f\u0003*\u0015" +
                    "\u0000\u059e\u059c\u0001\u0000\u0000\u0000\u059f\u05a2\u0001\u0000\u0000" +
                    "\u0000\u05a0\u059e\u0001\u0000\u0000\u0000\u05a0\u05a1\u0001\u0000\u0000" +
                    "\u0000\u05a1\u05a3\u0001\u0000\u0000\u0000\u05a2\u05a0\u0001\u0000\u0000" +
                    "\u0000\u05a3\u05a4\u0005\u0003\u0000\u0000\u05a4)\u0001\u0000\u0000\u0000" +
                    "\u05a5\u05a8\u0003\u011e\u008f\u0000\u05a6\u05a7\u0005\u0122\u0000\u0000" +
                    "\u05a7\u05a9\u0003\u00dcn\u0000\u05a8\u05a6\u0001\u0000\u0000\u0000\u05a8" +
                    "\u05a9\u0001\u0000\u0000\u0000\u05a9\u05af\u0001\u0000\u0000\u0000\u05aa" +
                    "\u05ab\u0003\u011e\u008f\u0000\u05ab\u05ac\u0005\u0122\u0000\u0000\u05ac" +
                    "\u05ad\u0005D\u0000\u0000\u05ad\u05af\u0001\u0000\u0000\u0000\u05ae\u05a5" +
                    "\u0001\u0000\u0000\u0000\u05ae\u05aa\u0001\u0000\u0000\u0000\u05af+\u0001" +
                    "\u0000\u0000\u0000\u05b0\u05b1\u0007\r\u0000\u0000\u05b1-\u0001\u0000" +
                    "\u0000\u0000\u05b2\u05b3\u0007\u000e\u0000\u0000\u05b3/\u0001\u0000\u0000" +
                    "\u0000\u05b4\u05ba\u0003\u0118\u008c\u0000\u05b5\u05ba\u0005\u0138\u0000" +
                    "\u0000\u05b6\u05ba\u0003\u00deo\u0000\u05b7\u05ba\u0003\u00e0p\u0000\u05b8" +
                    "\u05ba\u0003\u00e2q\u0000\u05b9\u05b4\u0001\u0000\u0000\u0000\u05b9\u05b5" +
                    "\u0001\u0000\u0000\u0000\u05b9\u05b6\u0001\u0000\u0000\u0000\u05b9\u05b7" +
                    "\u0001\u0000\u0000\u0000\u05b9\u05b8\u0001\u0000\u0000\u0000\u05ba1\u0001" +
                    "\u0000\u0000\u0000\u05bb\u05c0\u0003\u011e\u008f\u0000\u05bc\u05bd\u0005" +
                    "\u0005\u0000\u0000\u05bd\u05bf\u0003\u011e\u008f\u0000\u05be\u05bc\u0001" +
                    "\u0000\u0000\u0000\u05bf\u05c2\u0001\u0000\u0000\u0000\u05c0\u05be\u0001" +
                    "\u0000\u0000\u0000\u05c0\u05c1\u0001\u0000\u0000\u0000\u05c13\u0001\u0000" +
                    "\u0000\u0000\u05c2\u05c0\u0001\u0000\u0000\u0000\u05c3\u05c4\u0005\u011e" +
                    "\u0000\u0000\u05c4\u05c9\u00036\u001b\u0000\u05c5\u05c6\u0005\u0004\u0000" +
                    "\u0000\u05c6\u05c8\u00036\u001b\u0000\u05c7\u05c5\u0001\u0000\u0000\u0000" +
                    "\u05c8\u05cb\u0001\u0000\u0000\u0000\u05c9\u05c7\u0001\u0000\u0000\u0000" +
                    "\u05c9\u05ca\u0001\u0000\u0000\u0000\u05ca5\u0001\u0000\u0000\u0000\u05cb" +
                    "\u05c9\u0001\u0000\u0000\u0000\u05cc\u05ce\u0003\u011a\u008d\u0000\u05cd" +
                    "\u05cf\u0003\u00a0P\u0000\u05ce\u05cd\u0001\u0000\u0000\u0000\u05ce\u05cf" +
                    "\u0001\u0000\u0000\u0000\u05cf\u05d1\u0001\u0000\u0000\u0000\u05d0\u05d2" +
                    "\u0005\u0013\u0000\u0000\u05d1\u05d0\u0001\u0000\u0000\u0000\u05d1\u05d2" +
                    "\u0001\u0000\u0000\u0000\u05d2\u05d3\u0001\u0000\u0000\u0000\u05d3\u05d4" +
                    "\u0005\u0002\u0000\u0000\u05d4\u05d5\u0003\"\u0011\u0000\u05d5\u05d6\u0005" +
                    "\u0003\u0000\u0000\u05d67\u0001\u0000\u0000\u0000\u05d7\u05d8\u0005\u0115" +
                    "\u0000\u0000\u05d8\u05d9\u0003\u00b8\\\u0000\u05d99\u0001\u0000\u0000" +
                    "\u0000\u05da\u05db\u0005\u00a8\u0000\u0000\u05db\u05e8\u0003<\u001e\u0000" +
                    "\u05dc\u05dd\u0005\u00b3\u0000\u0000\u05dd\u05de\u0005\u001b\u0000\u0000" +
                    "\u05de\u05e8\u0003\u00c6c\u0000\u05df\u05e8\u0003\u001c\u000e\u0000\u05e0" +
                    "\u05e8\u0003\u001a\r\u0000\u05e1\u05e8\u0003\u00b4Z\u0000\u05e2\u05e8" +
                    "\u0003H$\u0000\u05e3\u05e8\u0003\u001e\u000f\u0000\u05e4\u05e8\u0003 " +
                    "\u0010\u0000\u05e5\u05e6\u0005\u00f7\u0000\u0000\u05e6\u05e8\u0003<\u001e" +
                    "\u0000\u05e7\u05da\u0001\u0000\u0000\u0000\u05e7\u05dc\u0001\u0000\u0000" +
                    "\u0000\u05e7\u05df\u0001\u0000\u0000\u0000\u05e7\u05e0\u0001\u0000\u0000" +
                    "\u0000\u05e7\u05e1\u0001\u0000\u0000\u0000\u05e7\u05e2\u0001\u0000\u0000" +
                    "\u0000\u05e7\u05e3\u0001\u0000\u0000\u0000\u05e7\u05e4\u0001\u0000\u0000" +
                    "\u0000\u05e7\u05e5\u0001\u0000\u0000\u0000\u05e8\u05eb\u0001\u0000\u0000" +
                    "\u0000\u05e9\u05e7\u0001\u0000\u0000\u0000\u05e9\u05ea\u0001\u0000\u0000" +
                    "\u0000\u05ea;\u0001\u0000\u0000\u0000\u05eb\u05e9\u0001\u0000\u0000\u0000" +
                    "\u05ec\u05ed\u0005\u0002\u0000\u0000\u05ed\u05f2\u0003>\u001f\u0000\u05ee" +
                    "\u05ef\u0005\u0004\u0000\u0000\u05ef\u05f1\u0003>\u001f\u0000\u05f0\u05ee" +
                    "\u0001\u0000\u0000\u0000\u05f1\u05f4\u0001\u0000\u0000\u0000\u05f2\u05f0" +
                    "\u0001\u0000\u0000\u0000\u05f2\u05f3\u0001\u0000\u0000\u0000\u05f3\u05f5" +
                    "\u0001\u0000\u0000\u0000\u05f4\u05f2\u0001\u0000\u0000\u0000\u05f5\u05f6" +
                    "\u0005\u0003\u0000\u0000\u05f6=\u0001\u0000\u0000\u0000\u05f7\u05fc\u0003" +
                    "@ \u0000\u05f8\u05fa\u0005\u0122\u0000\u0000\u05f9\u05f8\u0001\u0000\u0000" +
                    "\u0000\u05f9\u05fa\u0001\u0000\u0000\u0000\u05fa\u05fb\u0001\u0000\u0000" +
                    "\u0000\u05fb\u05fd\u0003B!\u0000\u05fc\u05f9\u0001\u0000\u0000\u0000\u05fc" +
                    "\u05fd\u0001\u0000\u0000\u0000\u05fd?\u0001\u0000\u0000\u0000\u05fe\u0603" +
                    "\u0003\u011e\u008f\u0000\u05ff\u0600\u0005\u0005\u0000\u0000\u0600\u0602" +
                    "\u0003\u011e\u008f\u0000\u0601\u05ff\u0001\u0000\u0000\u0000\u0602\u0605" +
                    "\u0001\u0000\u0000\u0000\u0603\u0601\u0001\u0000\u0000\u0000\u0603\u0604" +
                    "\u0001\u0000\u0000\u0000\u0604\u0608\u0001\u0000\u0000\u0000\u0605\u0603" +
                    "\u0001\u0000\u0000\u0000\u0606\u0608\u0005\u0138\u0000\u0000\u0607\u05fe" +
                    "\u0001\u0000\u0000\u0000\u0607\u0606\u0001\u0000\u0000\u0000\u0608A\u0001" +
                    "\u0000\u0000\u0000\u0609\u060e\u0005\u013c\u0000\u0000\u060a\u060e\u0005" +
                    "\u013e\u0000\u0000\u060b\u060e\u0003\u00e4r\u0000\u060c\u060e\u0005\u0138" +
                    "\u0000\u0000\u060d\u0609\u0001\u0000\u0000\u0000\u060d\u060a\u0001\u0000" +
                    "\u0000\u0000\u060d\u060b\u0001\u0000\u0000\u0000\u060d\u060c\u0001\u0000" +
                    "\u0000\u0000\u060eC\u0001\u0000\u0000\u0000\u060f\u0610\u0005\u0002\u0000" +
                    "\u0000\u0610\u0615\u0003\u00dcn\u0000\u0611\u0612\u0005\u0004\u0000\u0000" +
                    "\u0612\u0614\u0003\u00dcn\u0000\u0613\u0611\u0001\u0000\u0000\u0000\u0614" +
                    "\u0617\u0001\u0000\u0000\u0000\u0615\u0613\u0001\u0000\u0000\u0000\u0615" +
                    "\u0616\u0001\u0000\u0000\u0000\u0616\u0618\u0001\u0000\u0000\u0000\u0617" +
                    "\u0615\u0001\u0000\u0000\u0000\u0618\u0619\u0005\u0003\u0000\u0000\u0619" +
                    "E\u0001\u0000\u0000\u0000\u061a\u061b\u0005\u0002\u0000\u0000\u061b\u0620" +
                    "\u0003D\"\u0000\u061c\u061d\u0005\u0004\u0000\u0000\u061d\u061f\u0003" +
                    "D\"\u0000\u061e\u061c\u0001\u0000\u0000\u0000\u061f\u0622\u0001\u0000" +
                    "\u0000\u0000\u0620\u061e\u0001\u0000\u0000\u0000\u0620\u0621\u0001\u0000" +
                    "\u0000\u0000\u0621\u0623\u0001\u0000\u0000\u0000\u0622\u0620\u0001\u0000" +
                    "\u0000\u0000\u0623\u0624\u0005\u0003\u0000\u0000\u0624G\u0001\u0000\u0000" +
                    "\u0000\u0625\u0626\u0005\u00ec\u0000\u0000\u0626\u0627\u0005\u0013\u0000" +
                    "\u0000\u0627\u062c\u0003J%\u0000\u0628\u0629\u0005\u00ec\u0000\u0000\u0629" +
                    "\u062a\u0005\u001b\u0000\u0000\u062a\u062c\u0003L&\u0000\u062b\u0625\u0001" +
                    "\u0000\u0000\u0000\u062b\u0628\u0001\u0000\u0000\u0000\u062cI\u0001\u0000" +
                    "\u0000\u0000\u062d\u062e\u0005z\u0000\u0000\u062e\u062f\u0005\u0138\u0000" +
                    "\u0000\u062f\u0630\u0005\u00ad\u0000\u0000\u0630\u0633\u0005\u0138\u0000" +
                    "\u0000\u0631\u0633\u0003\u011e\u008f\u0000\u0632\u062d\u0001\u0000\u0000" +
                    "\u0000\u0632\u0631\u0001\u0000\u0000\u0000\u0633K\u0001\u0000\u0000\u0000" +
                    "\u0634\u0638\u0005\u0138\u0000\u0000\u0635\u0636\u0005\u011e\u0000\u0000" +
                    "\u0636\u0637\u0005\u00e0\u0000\u0000\u0637\u0639\u0003<\u001e\u0000\u0638" +
                    "\u0635\u0001\u0000\u0000\u0000\u0638\u0639\u0001\u0000\u0000\u0000\u0639" +
                    "M\u0001\u0000\u0000\u0000\u063a\u063b\u0003\u011e\u008f\u0000\u063b\u063c" +
                    "\u0005\u0138\u0000\u0000\u063cO\u0001\u0000\u0000\u0000\u063d\u063e\u0003" +
                    "$\u0012\u0000\u063e\u063f\u0003\"\u0011\u0000\u063f\u0670\u0001\u0000" +
                    "\u0000\u0000\u0640\u0642\u0003|>\u0000\u0641\u0643\u0003T*\u0000\u0642" +
                    "\u0641\u0001\u0000\u0000\u0000\u0643\u0644\u0001\u0000\u0000\u0000\u0644" +
                    "\u0642\u0001\u0000\u0000\u0000\u0644\u0645\u0001\u0000\u0000\u0000\u0645" +
                    "\u0670\u0001\u0000\u0000\u0000\u0646\u0647\u0005F\u0000\u0000\u0647\u0648" +
                    "\u0005h\u0000\u0000\u0648\u0649\u0003\u00b8\\\u0000\u0649\u064b\u0003" +
                    "\u00b2Y\u0000\u064a\u064c\u0003t:\u0000\u064b\u064a\u0001\u0000\u0000" +
                    "\u0000\u064b\u064c\u0001\u0000\u0000\u0000\u064c\u0670\u0001\u0000\u0000" +
                    "\u0000\u064d\u064e\u0005\u0112\u0000\u0000\u064e\u064f\u0003\u00b8\\\u0000" +
                    "\u064f\u0650\u0003\u00b2Y\u0000\u0650\u0652\u0003f3\u0000\u0651\u0653" +
                    "\u0003t:\u0000\u0652\u0651\u0001\u0000\u0000\u0000\u0652\u0653\u0001\u0000" +
                    "\u0000\u0000\u0653\u0670\u0001\u0000\u0000\u0000\u0654\u0655\u0005\u0096" +
                    "\u0000\u0000\u0655\u0656\u0005~\u0000\u0000\u0656\u0657\u0003\u00b8\\" +
                    "\u0000\u0657\u0658\u0003\u00b2Y\u0000\u0658\u065e\u0005\u0115\u0000\u0000" +
                    "\u0659\u065f\u0003\u00b8\\\u0000\u065a\u065b\u0005\u0002\u0000\u0000\u065b" +
                    "\u065c\u0003\"\u0011\u0000\u065c\u065d\u0005\u0003\u0000\u0000\u065d\u065f" +
                    "\u0001\u0000\u0000\u0000\u065e\u0659\u0001\u0000\u0000\u0000\u065e\u065a" +
                    "\u0001\u0000\u0000\u0000\u065f\u0660\u0001\u0000\u0000\u0000\u0660\u0661" +
                    "\u0003\u00b2Y\u0000\u0661\u0662\u0005\u00a5\u0000\u0000\u0662\u0666\u0003" +
                    "\u00d2i\u0000\u0663\u0665\u0003h4\u0000\u0664\u0663\u0001\u0000\u0000" +
                    "\u0000\u0665\u0668\u0001\u0000\u0000\u0000\u0666\u0664\u0001\u0000\u0000" +
                    "\u0000\u0666\u0667\u0001\u0000\u0000\u0000\u0667\u066c\u0001\u0000\u0000" +
                    "\u0000\u0668\u0666\u0001\u0000\u0000\u0000\u0669\u066b\u0003j5\u0000\u066a" +
                    "\u0669\u0001\u0000\u0000\u0000\u066b\u066e\u0001\u0000\u0000\u0000\u066c" +
                    "\u066a\u0001\u0000\u0000\u0000\u066c\u066d\u0001\u0000\u0000\u0000\u066d" +
                    "\u0670\u0001\u0000\u0000\u0000\u066e\u066c\u0001\u0000\u0000\u0000\u066f" +
                    "\u063d\u0001\u0000\u0000\u0000\u066f\u0640\u0001\u0000\u0000\u0000\u066f" +
                    "\u0646\u0001\u0000\u0000\u0000\u066f\u064d\u0001\u0000\u0000\u0000\u066f" +
                    "\u0654\u0001\u0000\u0000\u0000\u0670Q\u0001\u0000\u0000\u0000\u0671\u0672" +
                    "\u0005\u00aa\u0000\u0000\u0672\u0673\u0005\u001b\u0000\u0000\u0673\u0678" +
                    "\u0003Z-\u0000\u0674\u0675\u0005\u0004\u0000\u0000\u0675\u0677\u0003Z" +
                    "-\u0000\u0676\u0674\u0001\u0000\u0000\u0000\u0677\u067a\u0001\u0000\u0000" +
                    "\u0000\u0678\u0676\u0001\u0000\u0000\u0000\u0678\u0679\u0001\u0000\u0000" +
                    "\u0000\u0679\u067c\u0001\u0000\u0000\u0000\u067a\u0678\u0001\u0000\u0000" +
                    "\u0000\u067b\u0671\u0001\u0000\u0000\u0000\u067b\u067c\u0001\u0000\u0000" +
                    "\u0000\u067c\u0687\u0001\u0000\u0000\u0000\u067d\u067e\u0005%\u0000\u0000" +
                    "\u067e\u067f\u0005\u001b\u0000\u0000\u067f\u0684\u0003\u00ceg\u0000\u0680" +
                    "\u0681\u0005\u0004\u0000\u0000\u0681\u0683\u0003\u00ceg\u0000\u0682\u0680" +
                    "\u0001\u0000\u0000\u0000\u0683\u0686\u0001\u0000\u0000\u0000\u0684\u0682" +
                    "\u0001\u0000\u0000\u0000\u0684\u0685\u0001\u0000\u0000\u0000\u0685\u0688" +
                    "\u0001\u0000\u0000\u0000\u0686\u0684\u0001\u0000\u0000\u0000\u0687\u067d" +
                    "\u0001\u0000\u0000\u0000\u0687\u0688\u0001\u0000\u0000\u0000\u0688\u0693" +
                    "\u0001\u0000\u0000\u0000\u0689\u068a\u0005N\u0000\u0000\u068a\u068b\u0005" +
                    "\u001b\u0000\u0000\u068b\u0690\u0003\u00ceg\u0000\u068c\u068d\u0005\u0004" +
                    "\u0000\u0000\u068d\u068f\u0003\u00ceg\u0000\u068e\u068c\u0001\u0000\u0000" +
                    "\u0000\u068f\u0692\u0001\u0000\u0000\u0000\u0690\u068e\u0001\u0000\u0000" +
                    "\u0000\u0690\u0691\u0001\u0000\u0000\u0000\u0691\u0694\u0001\u0000\u0000" +
                    "\u0000\u0692\u0690\u0001\u0000\u0000\u0000\u0693\u0689\u0001\u0000\u0000" +
                    "\u0000\u0693\u0694\u0001\u0000\u0000\u0000\u0694\u069f\u0001\u0000\u0000" +
                    "\u0000\u0695\u0696\u0005\u00e8\u0000\u0000\u0696\u0697\u0005\u001b\u0000" +
                    "\u0000\u0697\u069c\u0003Z-\u0000\u0698\u0699\u0005\u0004\u0000\u0000\u0699" +
                    "\u069b\u0003Z-\u0000\u069a\u0698\u0001\u0000\u0000\u0000\u069b\u069e\u0001" +
                    "\u0000\u0000\u0000\u069c\u069a\u0001\u0000\u0000\u0000\u069c\u069d\u0001" +
                    "\u0000\u0000\u0000\u069d\u06a0\u0001\u0000\u0000\u0000\u069e\u069c\u0001" +
                    "\u0000\u0000\u0000\u069f\u0695\u0001\u0000\u0000\u0000\u069f\u06a0\u0001" +
                    "\u0000\u0000\u0000\u06a0\u06a2\u0001\u0000\u0000\u0000\u06a1\u06a3\u0003" +
                    "\u010a\u0085\u0000\u06a2\u06a1\u0001\u0000\u0000\u0000\u06a2\u06a3\u0001" +
                    "\u0000\u0000\u0000\u06a3\u06a9\u0001\u0000\u0000\u0000\u06a4\u06a7\u0005" +
                    "\u008a\u0000\u0000\u06a5\u06a8\u0005\n\u0000\u0000\u06a6\u06a8\u0003\u00ce" +
                    "g\u0000\u06a7\u06a5\u0001\u0000\u0000\u0000\u06a7\u06a6\u0001\u0000\u0000" +
                    "\u0000\u06a8\u06aa\u0001\u0000\u0000\u0000\u06a9\u06a4\u0001\u0000\u0000" +
                    "\u0000\u06a9\u06aa\u0001\u0000\u0000\u0000\u06aa\u06ad\u0001\u0000\u0000" +
                    "\u0000\u06ab\u06ac\u0005\u00a4\u0000\u0000\u06ac\u06ae\u0003\u00ceg\u0000" +
                    "\u06ad\u06ab\u0001\u0000\u0000\u0000\u06ad\u06ae\u0001\u0000\u0000\u0000" +
                    "\u06aeS\u0001\u0000\u0000\u0000\u06af\u06b0\u0003$\u0012\u0000\u06b0\u06b1" +
                    "\u0003^/\u0000\u06b1U\u0001\u0000\u0000\u0000\u06b2\u06b3\u0006+\uffff" +
                    "\uffff\u0000\u06b3\u06b4\u0003X,\u0000\u06b4\u06cc\u0001\u0000\u0000\u0000" +
                    "\u06b5\u06b6\n\u0003\u0000\u0000\u06b6\u06b7\u0004+\u0001\u0000\u06b7" +
                    "\u06b9\u0007\u000f\u0000\u0000\u06b8\u06ba\u0003\u0092I\u0000\u06b9\u06b8" +
                    "\u0001\u0000\u0000\u0000\u06b9\u06ba\u0001\u0000\u0000\u0000\u06ba\u06bb" +
                    "\u0001\u0000\u0000\u0000\u06bb\u06cb\u0003V+\u0004\u06bc\u06bd\n\u0002" +
                    "\u0000\u0000\u06bd\u06be\u0004+\u0003\u0000\u06be\u06c0\u0005|\u0000\u0000" +
                    "\u06bf\u06c1\u0003\u0092I\u0000\u06c0\u06bf\u0001\u0000\u0000\u0000\u06c0" +
                    "\u06c1\u0001\u0000\u0000\u0000\u06c1\u06c2\u0001\u0000\u0000\u0000\u06c2" +
                    "\u06cb\u0003V+\u0003\u06c3\u06c4\n\u0001\u0000\u0000\u06c4\u06c5\u0004" +
                    "+\u0005\u0000\u06c5\u06c7\u0007\u0010\u0000\u0000\u06c6\u06c8\u0003\u0092" +
                    "I\u0000\u06c7\u06c6\u0001\u0000\u0000\u0000\u06c7\u06c8\u0001\u0000\u0000" +
                    "\u0000\u06c8\u06c9\u0001\u0000\u0000\u0000\u06c9\u06cb\u0003V+\u0002\u06ca" +
                    "\u06b5\u0001\u0000\u0000\u0000\u06ca\u06bc\u0001\u0000\u0000\u0000\u06ca" +
                    "\u06c3\u0001\u0000\u0000\u0000\u06cb\u06ce\u0001\u0000\u0000\u0000\u06cc" +
                    "\u06ca\u0001\u0000\u0000\u0000\u06cc\u06cd\u0001\u0000\u0000\u0000\u06cd" +
                    "W\u0001\u0000\u0000\u0000\u06ce\u06cc\u0001\u0000\u0000\u0000\u06cf\u06d9" +
                    "\u0003`0\u0000\u06d0\u06d9\u0003\\.\u0000\u06d1\u06d2\u0005\u00f4\u0000" +
                    "\u0000\u06d2\u06d9\u0003\u00b8\\\u0000\u06d3\u06d9\u0003\u00aeW\u0000" +
                    "\u06d4\u06d5\u0005\u0002\u0000\u0000\u06d5\u06d6\u0003\"\u0011\u0000\u06d6" +
                    "\u06d7\u0005\u0003\u0000\u0000\u06d7\u06d9\u0001\u0000\u0000\u0000\u06d8" +
                    "\u06cf\u0001\u0000\u0000\u0000\u06d8\u06d0\u0001\u0000\u0000\u0000\u06d8" +
                    "\u06d1\u0001\u0000\u0000\u0000\u06d8\u06d3\u0001\u0000\u0000\u0000\u06d8" +
                    "\u06d4\u0001\u0000\u0000\u0000\u06d9Y\u0001\u0000\u0000\u0000\u06da\u06dc" +
                    "\u0003\u00ceg\u0000\u06db\u06dd\u0007\u0011\u0000\u0000\u06dc\u06db\u0001" +
                    "\u0000\u0000\u0000\u06dc\u06dd\u0001\u0000\u0000\u0000\u06dd\u06e0\u0001" +
                    "\u0000\u0000\u0000\u06de\u06df\u0005\u00a2\u0000\u0000\u06df\u06e1\u0007" +
                    "\u0012\u0000\u0000\u06e0\u06de\u0001\u0000\u0000\u0000\u06e0\u06e1\u0001" +
                    "\u0000\u0000\u0000\u06e1[\u0001\u0000\u0000\u0000\u06e2\u06e4\u0003|>" +
                    "\u0000\u06e3\u06e5\u0003^/\u0000\u06e4\u06e3\u0001\u0000\u0000\u0000\u06e5" +
                    "\u06e6\u0001\u0000\u0000\u0000\u06e6\u06e4\u0001\u0000\u0000\u0000\u06e6" +
                    "\u06e7\u0001\u0000\u0000\u0000\u06e7]\u0001\u0000\u0000\u0000\u06e8\u06ea" +
                    "\u0003b1\u0000\u06e9\u06eb\u0003t:\u0000\u06ea\u06e9\u0001\u0000\u0000" +
                    "\u0000\u06ea\u06eb\u0001\u0000\u0000\u0000\u06eb\u06ec\u0001\u0000\u0000" +
                    "\u0000\u06ec\u06ed\u0003R)\u0000\u06ed\u0704\u0001\u0000\u0000\u0000\u06ee" +
                    "\u06f2\u0003d2\u0000\u06ef\u06f1\u0003\u0090H\u0000\u06f0\u06ef\u0001" +
                    "\u0000\u0000\u0000\u06f1\u06f4\u0001\u0000\u0000\u0000\u06f2\u06f0\u0001" +
                    "\u0000\u0000\u0000\u06f2\u06f3\u0001\u0000\u0000\u0000\u06f3\u06f6\u0001" +
                    "\u0000\u0000\u0000\u06f4\u06f2\u0001\u0000\u0000\u0000\u06f5\u06f7\u0003" +
                    "t:\u0000\u06f6\u06f5\u0001\u0000\u0000\u0000\u06f6\u06f7\u0001\u0000\u0000" +
                    "\u0000\u06f7\u06f9\u0001\u0000\u0000\u0000\u06f8\u06fa\u0003\u0080@\u0000" +
                    "\u06f9\u06f8\u0001\u0000\u0000\u0000\u06f9\u06fa\u0001\u0000\u0000\u0000" +
                    "\u06fa\u06fc\u0001\u0000\u0000\u0000\u06fb\u06fd\u0003v;\u0000\u06fc\u06fb" +
                    "\u0001\u0000\u0000\u0000\u06fc\u06fd\u0001\u0000\u0000\u0000\u06fd\u06ff" +
                    "\u0001\u0000\u0000\u0000\u06fe\u0700\u0003\u010a\u0085\u0000\u06ff\u06fe" +
                    "\u0001\u0000\u0000\u0000\u06ff\u0700\u0001\u0000\u0000\u0000\u0700\u0701" +
                    "\u0001\u0000\u0000\u0000\u0701\u0702\u0003R)\u0000\u0702\u0704\u0001\u0000" +
                    "\u0000\u0000\u0703\u06e8\u0001\u0000\u0000\u0000\u0703\u06ee\u0001\u0000" +
                    "\u0000\u0000\u0704_\u0001\u0000\u0000\u0000\u0705\u0707\u0003b1\u0000" +
                    "\u0706\u0708\u0003|>\u0000\u0707\u0706\u0001\u0000\u0000\u0000\u0707\u0708" +
                    "\u0001\u0000\u0000\u0000\u0708\u070c\u0001\u0000\u0000\u0000\u0709\u070b" +
                    "\u0003\u0090H\u0000\u070a\u0709\u0001\u0000\u0000\u0000\u070b\u070e\u0001" +
                    "\u0000\u0000\u0000\u070c\u070a\u0001\u0000\u0000\u0000\u070c\u070d\u0001" +
                    "\u0000\u0000\u0000\u070d\u0710\u0001\u0000\u0000\u0000\u070e\u070c\u0001" +
                    "\u0000\u0000\u0000\u070f\u0711\u0003t:\u0000\u0710\u070f\u0001\u0000\u0000" +
                    "\u0000\u0710\u0711\u0001\u0000\u0000\u0000\u0711\u0713\u0001\u0000\u0000" +
                    "\u0000\u0712\u0714\u0003\u0080@\u0000\u0713\u0712\u0001\u0000\u0000\u0000" +
                    "\u0713\u0714\u0001\u0000\u0000\u0000\u0714\u0716\u0001\u0000\u0000\u0000" +
                    "\u0715\u0717\u0003v;\u0000\u0716\u0715\u0001\u0000\u0000\u0000\u0716\u0717" +
                    "\u0001\u0000\u0000\u0000\u0717\u0719\u0001\u0000\u0000\u0000\u0718\u071a" +
                    "\u0003\u010a\u0085\u0000\u0719\u0718\u0001\u0000\u0000\u0000\u0719\u071a" +
                    "\u0001\u0000\u0000\u0000\u071a\u0732\u0001\u0000\u0000\u0000\u071b\u071d" +
                    "\u0003d2\u0000\u071c\u071e\u0003|>\u0000\u071d\u071c\u0001\u0000\u0000" +
                    "\u0000\u071d\u071e\u0001\u0000\u0000\u0000\u071e\u0722\u0001\u0000\u0000" +
                    "\u0000\u071f\u0721\u0003\u0090H\u0000\u0720\u071f\u0001\u0000\u0000\u0000" +
                    "\u0721\u0724\u0001\u0000\u0000\u0000\u0722\u0720\u0001\u0000\u0000\u0000" +
                    "\u0722\u0723\u0001\u0000\u0000\u0000\u0723\u0726\u0001\u0000\u0000\u0000" +
                    "\u0724\u0722\u0001\u0000\u0000\u0000\u0725\u0727\u0003t:\u0000\u0726\u0725" +
                    "\u0001\u0000\u0000\u0000\u0726\u0727\u0001\u0000\u0000\u0000\u0727\u0729" +
                    "\u0001\u0000\u0000\u0000\u0728\u072a\u0003\u0080@\u0000\u0729\u0728\u0001" +
                    "\u0000\u0000\u0000\u0729\u072a\u0001\u0000\u0000\u0000\u072a\u072c\u0001" +
                    "\u0000\u0000\u0000\u072b\u072d\u0003v;\u0000\u072c\u072b\u0001\u0000\u0000" +
                    "\u0000\u072c\u072d\u0001\u0000\u0000\u0000\u072d\u072f\u0001\u0000\u0000" +
                    "\u0000\u072e\u0730\u0003\u010a\u0085\u0000\u072f\u072e\u0001\u0000\u0000" +
                    "\u0000\u072f\u0730\u0001\u0000\u0000\u0000\u0730\u0732\u0001\u0000\u0000" +
                    "\u0000\u0731\u0705\u0001\u0000\u0000\u0000\u0731\u071b\u0001\u0000\u0000" +
                    "\u0000\u0732a\u0001\u0000\u0000\u0000\u0733\u0734\u0005\u00dc\u0000\u0000" +
                    "\u0734\u0735\u0005\u0104\u0000\u0000\u0735\u0737\u0005\u0002\u0000\u0000" +
                    "\u0736\u0738\u0003\u0092I\u0000\u0737\u0736\u0001\u0000\u0000\u0000\u0737" +
                    "\u0738\u0001\u0000\u0000\u0000\u0738\u0739\u0001\u0000\u0000\u0000\u0739" +
                    "\u073a\u0003\u00d0h\u0000\u073a\u073b\u0005\u0003\u0000\u0000\u073b\u0747" +
                    "\u0001\u0000\u0000\u0000\u073c\u073e\u0005\u0094\u0000\u0000\u073d\u073f" +
                    "\u0003\u0092I\u0000\u073e\u073d\u0001\u0000\u0000\u0000\u073e\u073f\u0001" +
                    "\u0000\u0000\u0000\u073f\u0740\u0001\u0000\u0000\u0000\u0740\u0747\u0003" +
                    "\u00d0h\u0000\u0741\u0743\u0005\u00c6\u0000\u0000\u0742\u0744\u0003\u0092" +
                    "I\u0000\u0743\u0742\u0001\u0000\u0000\u0000\u0743\u0744\u0001\u0000\u0000" +
                    "\u0000\u0744\u0745\u0001\u0000\u0000\u0000\u0745\u0747\u0003\u00d0h\u0000" +
                    "\u0746\u0733\u0001\u0000\u0000\u0000\u0746\u073c\u0001\u0000\u0000\u0000" +
                    "\u0746\u0741\u0001\u0000\u0000\u0000\u0747\u0749\u0001\u0000\u0000\u0000" +
                    "\u0748\u074a\u0003\u00b4Z\u0000\u0749\u0748\u0001\u0000\u0000\u0000\u0749" +
                    "\u074a\u0001\u0000\u0000\u0000\u074a\u074d\u0001\u0000\u0000\u0000\u074b" +
                    "\u074c\u0005\u00c4\u0000\u0000\u074c\u074e\u0005\u0138\u0000\u0000\u074d" +
                    "\u074b\u0001\u0000\u0000\u0000\u074d\u074e\u0001\u0000\u0000\u0000\u074e" +
                    "\u074f\u0001\u0000\u0000\u0000\u074f\u0750\u0005\u0115\u0000\u0000\u0750" +
                    "\u075d\u0005\u0138\u0000\u0000\u0751\u075b\u0005\u0013\u0000\u0000\u0752" +
                    "\u075c\u0003\u00a2Q\u0000\u0753\u075c\u0003\u00fc~\u0000\u0754\u0757\u0005" +
                    "\u0002\u0000\u0000\u0755\u0758\u0003\u00a2Q\u0000\u0756\u0758\u0003\u00fc" +
                    "~\u0000\u0757\u0755\u0001\u0000\u0000\u0000\u0757\u0756\u0001\u0000\u0000" +
                    "\u0000\u0758\u0759\u0001\u0000\u0000\u0000\u0759\u075a\u0005\u0003\u0000" +
                    "\u0000\u075a\u075c\u0001\u0000\u0000\u0000\u075b\u0752\u0001\u0000\u0000" +
                    "\u0000\u075b\u0753\u0001\u0000\u0000\u0000\u075b\u0754\u0001\u0000\u0000" +
                    "\u0000\u075c\u075e\u0001\u0000\u0000\u0000\u075d\u0751\u0001\u0000\u0000" +
                    "\u0000\u075d\u075e\u0001\u0000\u0000\u0000\u075e\u0760\u0001\u0000\u0000" +
                    "\u0000\u075f\u0761\u0003\u00b4Z\u0000\u0760\u075f\u0001\u0000\u0000\u0000" +
                    "\u0760\u0761\u0001\u0000\u0000\u0000\u0761\u0764\u0001\u0000\u0000\u0000" +
                    "\u0762\u0763\u0005\u00c3\u0000\u0000\u0763\u0765\u0005\u0138\u0000\u0000" +
                    "\u0764\u0762\u0001\u0000\u0000\u0000\u0764\u0765\u0001\u0000\u0000\u0000" +
                    "\u0765c\u0001\u0000\u0000\u0000\u0766\u076a\u0005\u00dc\u0000\u0000\u0767" +
                    "\u0769\u0003x<\u0000\u0768\u0767\u0001\u0000\u0000\u0000\u0769\u076c\u0001" +
                    "\u0000\u0000\u0000\u076a\u0768\u0001\u0000\u0000\u0000\u076a\u076b\u0001" +
                    "\u0000\u0000\u0000\u076b\u076e\u0001\u0000\u0000\u0000\u076c\u076a\u0001" +
                    "\u0000\u0000\u0000\u076d\u076f\u0003\u0092I\u0000\u076e\u076d\u0001\u0000" +
                    "\u0000\u0000\u076e\u076f\u0001\u0000\u0000\u0000\u076f\u0770\u0001\u0000" +
                    "\u0000\u0000\u0770\u0771\u0003\u00c4b\u0000\u0771e\u0001\u0000\u0000\u0000" +
                    "\u0772\u0773\u0005\u00e2\u0000\u0000\u0773\u0774\u0003p8\u0000\u0774g" +
                    "\u0001\u0000\u0000\u0000\u0775\u0776\u0005\u011b\u0000\u0000\u0776\u0779" +
                    "\u0005\u0095\u0000\u0000\u0777\u0778\u0005\r\u0000\u0000\u0778\u077a\u0003" +
                    "\u00d2i\u0000\u0779\u0777\u0001\u0000\u0000\u0000\u0779\u077a\u0001\u0000" +
                    "\u0000\u0000\u077a\u077b\u0001\u0000\u0000\u0000\u077b\u077c\u0005\u00fa" +
                    "\u0000\u0000\u077c\u077d\u0003l6\u0000\u077di\u0001\u0000\u0000\u0000" +
                    "\u077e\u077f\u0005\u011b\u0000\u0000\u077f\u0780\u0005\u00a0\u0000\u0000" +
                    "\u0780\u0783\u0005\u0095\u0000\u0000\u0781\u0782\u0005\r\u0000\u0000\u0782" +
                    "\u0784\u0003\u00d2i\u0000\u0783\u0781\u0001\u0000\u0000\u0000\u0783\u0784" +
                    "\u0001\u0000\u0000\u0000\u0784\u0785\u0001\u0000\u0000\u0000\u0785\u0786" +
                    "\u0005\u00fa\u0000\u0000\u0786\u0787\u0003n7\u0000\u0787k\u0001\u0000" +
                    "\u0000\u0000\u0788\u0790\u0005F\u0000\u0000\u0789\u078a\u0005\u0112\u0000" +
                    "\u0000\u078a\u078b\u0005\u00e2\u0000\u0000\u078b\u0790\u0005\u012c\u0000" +
                    "\u0000\u078c\u078d\u0005\u0112\u0000\u0000\u078d\u078e\u0005\u00e2\u0000" +
                    "\u0000\u078e\u0790\u0003p8\u0000\u078f\u0788\u0001\u0000\u0000\u0000\u078f" +
                    "\u0789\u0001\u0000\u0000\u0000\u078f\u078c\u0001\u0000\u0000\u0000\u0790" +
                    "m\u0001\u0000\u0000\u0000\u0791\u0792\u0005{\u0000\u0000\u0792\u07a4\u0005" +
                    "\u012c\u0000\u0000\u0793\u0794\u0005{\u0000\u0000\u0794\u0795\u0005\u0002" +
                    "\u0000\u0000\u0795\u0796\u0003\u00b6[\u0000\u0796\u0797\u0005\u0003\u0000" +
                    "\u0000\u0797\u0798\u0005\u0116\u0000\u0000\u0798\u0799\u0005\u0002\u0000" +
                    "\u0000\u0799\u079e\u0003\u00ceg\u0000\u079a\u079b\u0005\u0004\u0000\u0000" +
                    "\u079b\u079d\u0003\u00ceg\u0000\u079c\u079a\u0001\u0000\u0000\u0000\u079d" +
                    "\u07a0\u0001\u0000\u0000\u0000\u079e\u079c\u0001\u0000\u0000\u0000\u079e" +
                    "\u079f\u0001\u0000\u0000\u0000\u079f\u07a1\u0001\u0000\u0000\u0000\u07a0" +
                    "\u079e\u0001\u0000\u0000\u0000\u07a1\u07a2\u0005\u0003\u0000\u0000\u07a2" +
                    "\u07a4\u0001\u0000\u0000\u0000\u07a3\u0791\u0001\u0000\u0000\u0000\u07a3" +
                    "\u0793\u0001\u0000\u0000\u0000\u07a4o\u0001\u0000\u0000\u0000\u07a5\u07aa" +
                    "\u0003r9\u0000\u07a6\u07a7\u0005\u0004\u0000\u0000\u07a7\u07a9\u0003r" +
                    "9\u0000\u07a8\u07a6\u0001\u0000\u0000\u0000\u07a9\u07ac\u0001\u0000\u0000" +
                    "\u0000\u07aa\u07a8\u0001\u0000\u0000\u0000\u07aa\u07ab\u0001\u0000\u0000" +
                    "\u0000\u07abq\u0001\u0000\u0000\u0000\u07ac\u07aa\u0001\u0000\u0000\u0000" +
                    "\u07ad\u07ae\u0003\u00b8\\\u0000\u07ae\u07af\u0005\u0122\u0000\u0000\u07af" +
                    "\u07b0\u0003\u00ceg\u0000\u07b0s\u0001\u0000\u0000\u0000\u07b1\u07b2\u0005" +
                    "\u011c\u0000\u0000\u07b2\u07b3\u0003\u00d2i\u0000\u07b3u\u0001\u0000\u0000" +
                    "\u0000\u07b4\u07b5\u0005p\u0000\u0000\u07b5\u07b6\u0003\u00d2i\u0000\u07b6" +
                    "w\u0001\u0000\u0000\u0000\u07b7\u07b8\u0005\u0136\u0000\u0000\u07b8\u07bf" +
                    "\u0003z=\u0000\u07b9\u07bb\u0005\u0004\u0000\u0000\u07ba\u07b9\u0001\u0000" +
                    "\u0000\u0000\u07ba\u07bb\u0001\u0000\u0000\u0000\u07bb\u07bc\u0001\u0000" +
                    "\u0000\u0000\u07bc\u07be\u0003z=\u0000\u07bd\u07ba\u0001\u0000\u0000\u0000" +
                    "\u07be\u07c1\u0001\u0000\u0000\u0000\u07bf\u07bd\u0001\u0000\u0000\u0000" +
                    "\u07bf\u07c0\u0001\u0000\u0000\u0000\u07c0\u07c2\u0001\u0000\u0000\u0000" +
                    "\u07c1\u07bf\u0001\u0000\u0000\u0000\u07c2\u07c3\u0005\u0137\u0000\u0000" +
                    "\u07c3y\u0001\u0000\u0000\u0000\u07c4\u07d2\u0003\u011e\u008f\u0000\u07c5" +
                    "\u07c6\u0003\u011e\u008f\u0000\u07c6\u07c7\u0005\u0002\u0000\u0000\u07c7" +
                    "\u07cc\u0003\u00dam\u0000\u07c8\u07c9\u0005\u0004\u0000\u0000\u07c9\u07cb" +
                    "\u0003\u00dam\u0000\u07ca\u07c8\u0001\u0000\u0000\u0000\u07cb\u07ce\u0001" +
                    "\u0000\u0000\u0000\u07cc\u07ca\u0001\u0000\u0000\u0000\u07cc\u07cd\u0001" +
                    "\u0000\u0000\u0000\u07cd\u07cf\u0001\u0000\u0000\u0000\u07ce\u07cc\u0001" +
                    "\u0000\u0000\u0000\u07cf\u07d0\u0005\u0003\u0000\u0000\u07d0\u07d2\u0001" +
                    "\u0000\u0000\u0000\u07d1\u07c4\u0001\u0000\u0000\u0000\u07d1\u07c5\u0001" +
                    "\u0000\u0000\u0000\u07d2{\u0001\u0000\u0000\u0000\u07d3\u07d4\u0005h\u0000" +
                    "\u0000\u07d4\u07d9\u0003\u0094J\u0000\u07d5\u07d6\u0005\u0004\u0000\u0000" +
                    "\u07d6\u07d8\u0003\u0094J\u0000\u07d7\u07d5\u0001\u0000\u0000\u0000\u07d8" +
                    "\u07db\u0001\u0000\u0000\u0000\u07d9\u07d7\u0001\u0000\u0000\u0000\u07d9" +
                    "\u07da\u0001\u0000\u0000\u0000\u07da\u07df\u0001\u0000\u0000\u0000\u07db" +
                    "\u07d9\u0001\u0000\u0000\u0000\u07dc\u07de\u0003\u0090H\u0000\u07dd\u07dc" +
                    "\u0001\u0000\u0000\u0000\u07de\u07e1\u0001\u0000\u0000\u0000\u07df\u07dd" +
                    "\u0001\u0000\u0000\u0000\u07df\u07e0\u0001\u0000\u0000\u0000\u07e0\u07e3" +
                    "\u0001\u0000\u0000\u0000\u07e1\u07df\u0001\u0000\u0000\u0000\u07e2\u07e4" +
                    "\u0003\u008aE\u0000\u07e3\u07e2\u0001\u0000\u0000\u0000\u07e3\u07e4\u0001" +
                    "\u0000\u0000\u0000\u07e4}\u0001\u0000\u0000\u0000\u07e5\u07e7\u0005d\u0000" +
                    "\u0000\u07e6\u07e5\u0001\u0000\u0000\u0000\u07e6\u07e7\u0001\u0000\u0000" +
                    "\u0000\u07e7\u07e8\u0001\u0000\u0000\u0000\u07e8\u07e9\u0007\u0013\u0000" +
                    "\u0000\u07e9\u07ea\u0005\u0013\u0000\u0000\u07ea\u07eb\u0005\u00a3\u0000" +
                    "\u0000\u07eb\u07f4\u0007\u0014\u0000\u0000\u07ec\u07ee\u0005d\u0000\u0000" +
                    "\u07ed\u07ec\u0001\u0000\u0000\u0000\u07ed\u07ee\u0001\u0000\u0000\u0000" +
                    "\u07ee\u07ef\u0001\u0000\u0000\u0000\u07ef\u07f0\u0007\u0015\u0000\u0000" +
                    "\u07f0\u07f1\u0005\u0013\u0000\u0000\u07f1\u07f2\u0005\u00a3\u0000\u0000" +
                    "\u07f2\u07f4\u0003\u00d6k\u0000\u07f3\u07e6\u0001\u0000\u0000\u0000\u07f3" +
                    "\u07ed\u0001\u0000\u0000\u0000\u07f4\u007f\u0001\u0000\u0000\u0000\u07f5" +
                    "\u07f6\u0005n\u0000\u0000\u07f6\u07f7\u0005\u001b\u0000\u0000\u07f7\u07fc" +
                    "\u0003\u0082A\u0000\u07f8\u07f9\u0005\u0004\u0000\u0000\u07f9\u07fb\u0003" +
                    "\u0082A\u0000\u07fa\u07f8\u0001\u0000\u0000\u0000\u07fb\u07fe\u0001\u0000" +
                    "\u0000\u0000\u07fc\u07fa\u0001\u0000\u0000\u0000\u07fc\u07fd\u0001\u0000" +
                    "\u0000\u0000\u07fd\u081d\u0001\u0000\u0000\u0000\u07fe\u07fc\u0001\u0000" +
                    "\u0000\u0000\u07ff\u0800\u0005n\u0000\u0000\u0800\u0801\u0005\u001b\u0000" +
                    "\u0000\u0801\u0806\u0003\u00ceg\u0000\u0802\u0803\u0005\u0004\u0000\u0000" +
                    "\u0803\u0805\u0003\u00ceg\u0000\u0804\u0802\u0001\u0000\u0000\u0000\u0805" +
                    "\u0808\u0001\u0000\u0000\u0000\u0806\u0804\u0001\u0000\u0000\u0000\u0806" +
                    "\u0807\u0001\u0000\u0000\u0000\u0807\u081a\u0001\u0000\u0000\u0000\u0808" +
                    "\u0806\u0001\u0000\u0000\u0000\u0809\u080a\u0005\u011e\u0000\u0000\u080a" +
                    "\u081b\u0005\u00d6\u0000\u0000\u080b\u080c\u0005\u011e\u0000\u0000\u080c" +
                    "\u081b\u00056\u0000\u0000\u080d\u080e\u0005o\u0000\u0000\u080e\u080f\u0005" +
                    "\u00e4\u0000\u0000\u080f\u0810";
    private static final String _serializedATNSegment1 =
            "\u0005\u0002\u0000\u0000\u0810\u0815\u0003\u0088D\u0000\u0811\u0812\u0005" +
                    "\u0004\u0000\u0000\u0812\u0814\u0003\u0088D\u0000\u0813\u0811\u0001\u0000" +
                    "\u0000\u0000\u0814\u0817\u0001\u0000\u0000\u0000\u0815\u0813\u0001\u0000" +
                    "\u0000\u0000\u0815\u0816\u0001\u0000\u0000\u0000\u0816\u0818\u0001\u0000" +
                    "\u0000\u0000\u0817\u0815\u0001\u0000\u0000\u0000\u0818\u0819\u0005\u0003" +
                    "\u0000\u0000\u0819\u081b\u0001\u0000\u0000\u0000\u081a\u0809\u0001\u0000" +
                    "\u0000\u0000\u081a\u080b\u0001\u0000\u0000\u0000\u081a\u080d\u0001\u0000" +
                    "\u0000\u0000\u081a\u081b\u0001\u0000\u0000\u0000\u081b\u081d\u0001\u0000" +
                    "\u0000\u0000\u081c\u07f5\u0001\u0000\u0000\u0000\u081c\u07ff\u0001\u0000" +
                    "\u0000\u0000\u081d\u0081\u0001\u0000\u0000\u0000\u081e\u0821\u0003\u0084" +
                    "B\u0000\u081f\u0821\u0003\u00ceg\u0000\u0820\u081e\u0001\u0000\u0000\u0000" +
                    "\u0820\u081f\u0001\u0000\u0000\u0000\u0821\u0083\u0001\u0000\u0000\u0000" +
                    "\u0822\u0823\u0007\u0016\u0000\u0000\u0823\u0824\u0005\u0002\u0000\u0000" +
                    "\u0824\u0829\u0003\u0088D\u0000\u0825\u0826\u0005\u0004\u0000\u0000\u0826" +
                    "\u0828\u0003\u0088D\u0000\u0827\u0825\u0001\u0000\u0000\u0000\u0828\u082b" +
                    "\u0001\u0000\u0000\u0000\u0829\u0827\u0001\u0000\u0000\u0000\u0829\u082a" +
                    "\u0001\u0000\u0000\u0000\u082a\u082c\u0001\u0000\u0000\u0000\u082b\u0829" +
                    "\u0001\u0000\u0000\u0000\u082c\u082d\u0005\u0003\u0000\u0000\u082d\u083c" +
                    "\u0001\u0000\u0000\u0000\u082e\u082f\u0005o\u0000\u0000\u082f\u0830\u0005" +
                    "\u00e4\u0000\u0000\u0830\u0831\u0005\u0002\u0000\u0000\u0831\u0836\u0003" +
                    "\u0086C\u0000\u0832\u0833\u0005\u0004\u0000\u0000\u0833\u0835\u0003\u0086" +
                    "C\u0000\u0834\u0832\u0001\u0000\u0000\u0000\u0835\u0838\u0001\u0000\u0000" +
                    "\u0000\u0836\u0834\u0001\u0000\u0000\u0000\u0836\u0837\u0001\u0000\u0000" +
                    "\u0000\u0837\u0839\u0001\u0000\u0000\u0000\u0838\u0836\u0001\u0000\u0000" +
                    "\u0000\u0839\u083a\u0005\u0003\u0000\u0000\u083a\u083c\u0001\u0000\u0000" +
                    "\u0000\u083b\u0822\u0001\u0000\u0000\u0000\u083b\u082e\u0001\u0000\u0000" +
                    "\u0000\u083c\u0085\u0001\u0000\u0000\u0000\u083d\u0840\u0003\u0084B\u0000" +
                    "\u083e\u0840\u0003\u0088D\u0000\u083f\u083d\u0001\u0000\u0000\u0000\u083f" +
                    "\u083e\u0001\u0000\u0000\u0000\u0840\u0087\u0001\u0000\u0000\u0000\u0841" +
                    "\u084a\u0005\u0002\u0000\u0000\u0842\u0847\u0003\u00ceg\u0000\u0843\u0844" +
                    "\u0005\u0004\u0000\u0000\u0844\u0846\u0003\u00ceg\u0000\u0845\u0843\u0001" +
                    "\u0000\u0000\u0000\u0846\u0849\u0001\u0000\u0000\u0000\u0847\u0845\u0001" +
                    "\u0000\u0000\u0000\u0847\u0848\u0001\u0000\u0000\u0000\u0848\u084b\u0001" +
                    "\u0000\u0000\u0000\u0849\u0847\u0001\u0000\u0000\u0000\u084a\u0842\u0001" +
                    "\u0000\u0000\u0000\u084a\u084b\u0001\u0000\u0000\u0000\u084b\u084c\u0001" +
                    "\u0000\u0000\u0000\u084c\u084f\u0005\u0003\u0000\u0000\u084d\u084f\u0003" +
                    "\u00ceg\u0000\u084e\u0841\u0001\u0000\u0000\u0000\u084e\u084d\u0001\u0000" +
                    "\u0000\u0000\u084f\u0089\u0001\u0000\u0000\u0000\u0850\u0851\u0005\u00b8" +
                    "\u0000\u0000\u0851\u0852\u0005\u0002\u0000\u0000\u0852\u0853\u0003\u00c4" +
                    "b\u0000\u0853\u0854\u0005d\u0000\u0000\u0854\u0855\u0003\u008cF\u0000" +
                    "\u0855\u0856\u0005u\u0000\u0000\u0856\u0857\u0005\u0002\u0000\u0000\u0857" +
                    "\u085c\u0003\u008eG\u0000\u0858\u0859\u0005\u0004\u0000\u0000\u0859\u085b" +
                    "\u0003\u008eG\u0000\u085a\u0858\u0001\u0000\u0000\u0000\u085b\u085e\u0001" +
                    "\u0000\u0000\u0000\u085c\u085a\u0001\u0000\u0000\u0000\u085c\u085d\u0001" +
                    "\u0000\u0000\u0000\u085d\u085f\u0001\u0000\u0000\u0000\u085e\u085c\u0001" +
                    "\u0000\u0000\u0000\u085f\u0860\u0005\u0003\u0000\u0000\u0860\u0861\u0005" +
                    "\u0003\u0000\u0000\u0861\u008b\u0001\u0000\u0000\u0000\u0862\u086f\u0003" +
                    "\u011e\u008f\u0000\u0863\u0864\u0005\u0002\u0000\u0000\u0864\u0869\u0003" +
                    "\u011e\u008f\u0000\u0865\u0866\u0005\u0004\u0000\u0000\u0866\u0868\u0003" +
                    "\u011e\u008f\u0000\u0867\u0865\u0001\u0000\u0000\u0000\u0868\u086b\u0001" +
                    "\u0000\u0000\u0000\u0869\u0867\u0001\u0000\u0000\u0000\u0869\u086a\u0001" +
                    "\u0000\u0000\u0000\u086a\u086c\u0001\u0000\u0000\u0000\u086b\u0869\u0001" +
                    "\u0000\u0000\u0000\u086c\u086d\u0005\u0003\u0000\u0000\u086d\u086f\u0001" +
                    "\u0000\u0000\u0000\u086e\u0862\u0001\u0000\u0000\u0000\u086e\u0863\u0001" +
                    "\u0000\u0000\u0000\u086f\u008d\u0001\u0000\u0000\u0000\u0870\u0875\u0003" +
                    "\u00ceg\u0000\u0871\u0873\u0005\u0013\u0000\u0000\u0872\u0871\u0001\u0000" +
                    "\u0000\u0000\u0872\u0873\u0001\u0000\u0000\u0000\u0873\u0874\u0001\u0000" +
                    "\u0000\u0000\u0874\u0876\u0003\u011e\u008f\u0000\u0875\u0872\u0001\u0000" +
                    "\u0000\u0000\u0875\u0876\u0001\u0000\u0000\u0000\u0876\u008f\u0001\u0000" +
                    "\u0000\u0000\u0877\u0878\u0005\u0084\u0000\u0000\u0878\u087a\u0005\u0118" +
                    "\u0000\u0000\u0879\u087b\u0005\u00ac\u0000\u0000\u087a\u0879\u0001\u0000" +
                    "\u0000\u0000\u087a\u087b\u0001\u0000\u0000\u0000\u087b\u087c\u0001\u0000" +
                    "\u0000\u0000\u087c\u087d\u0003\u0118\u008c\u0000\u087d\u0886\u0005\u0002" +
                    "\u0000\u0000\u087e\u0883\u0003\u00ceg\u0000\u087f\u0880\u0005\u0004\u0000" +
                    "\u0000\u0880\u0882\u0003\u00ceg\u0000\u0881\u087f\u0001\u0000\u0000\u0000" +
                    "\u0882\u0885\u0001\u0000\u0000\u0000\u0883\u0881\u0001\u0000\u0000\u0000" +
                    "\u0883\u0884\u0001\u0000\u0000\u0000\u0884\u0887\u0001\u0000\u0000\u0000" +
                    "\u0885\u0883\u0001\u0000\u0000\u0000\u0886\u087e\u0001\u0000\u0000\u0000" +
                    "\u0886\u0887\u0001\u0000\u0000\u0000\u0887\u0888\u0001\u0000\u0000\u0000" +
                    "\u0888\u0889\u0005\u0003\u0000\u0000\u0889\u0895\u0003\u011e\u008f\u0000" +
                    "\u088a\u088c\u0005\u0013\u0000\u0000\u088b\u088a\u0001\u0000\u0000\u0000" +
                    "\u088b\u088c\u0001\u0000\u0000\u0000\u088c\u088d\u0001\u0000\u0000\u0000" +
                    "\u088d\u0892\u0003\u011e\u008f\u0000\u088e\u088f\u0005\u0004\u0000\u0000" +
                    "\u088f\u0891\u0003\u011e\u008f\u0000\u0890\u088e\u0001\u0000\u0000\u0000" +
                    "\u0891\u0894\u0001\u0000\u0000\u0000\u0892\u0890\u0001\u0000\u0000\u0000" +
                    "\u0892\u0893\u0001\u0000\u0000\u0000\u0893\u0896\u0001\u0000\u0000\u0000" +
                    "\u0894\u0892\u0001\u0000\u0000\u0000\u0895\u088b\u0001\u0000\u0000\u0000" +
                    "\u0895\u0896\u0001\u0000\u0000\u0000\u0896\u0091\u0001\u0000\u0000\u0000" +
                    "\u0897\u0898\u0007\u0017\u0000\u0000\u0898\u0093\u0001\u0000\u0000\u0000" +
                    "\u0899\u089b\u0005\u0084\u0000\u0000\u089a\u0899\u0001\u0000\u0000\u0000" +
                    "\u089a\u089b\u0001\u0000\u0000\u0000\u089b\u089c\u0001\u0000\u0000\u0000" +
                    "\u089c\u08a0\u0003\u00acV\u0000\u089d\u089f\u0003\u0096K\u0000\u089e\u089d" +
                    "\u0001\u0000\u0000\u0000\u089f\u08a2\u0001\u0000\u0000\u0000\u08a0\u089e" +
                    "\u0001\u0000\u0000\u0000\u08a0\u08a1\u0001\u0000\u0000\u0000\u08a1\u0095" +
                    "\u0001\u0000\u0000\u0000\u08a2\u08a0\u0001\u0000\u0000\u0000\u08a3\u08a4" +
                    "\u0003\u0098L\u0000\u08a4\u08a6\u0005\u0081\u0000\u0000\u08a5\u08a7\u0005" +
                    "\u0084\u0000\u0000\u08a6\u08a5\u0001\u0000\u0000\u0000\u08a6\u08a7\u0001" +
                    "\u0000\u0000\u0000\u08a7\u08a8\u0001\u0000\u0000\u0000\u08a8\u08aa\u0003" +
                    "\u00acV\u0000\u08a9\u08ab\u0003\u009aM\u0000\u08aa\u08a9\u0001\u0000\u0000" +
                    "\u0000\u08aa\u08ab\u0001\u0000\u0000\u0000\u08ab\u08b5\u0001\u0000\u0000" +
                    "\u0000\u08ac\u08ad\u0005\u009e\u0000\u0000\u08ad\u08ae\u0003\u0098L\u0000" +
                    "\u08ae\u08b0\u0005\u0081\u0000\u0000\u08af\u08b1\u0005\u0084\u0000\u0000" +
                    "\u08b0\u08af\u0001\u0000\u0000\u0000\u08b0\u08b1\u0001\u0000\u0000\u0000" +
                    "\u08b1\u08b2\u0001\u0000\u0000\u0000\u08b2\u08b3\u0003\u00acV\u0000\u08b3" +
                    "\u08b5\u0001\u0000\u0000\u0000\u08b4\u08a3\u0001\u0000\u0000\u0000\u08b4" +
                    "\u08ac\u0001\u0000\u0000\u0000\u08b5\u0097\u0001\u0000\u0000\u0000\u08b6" +
                    "\u08b8\u0005x\u0000\u0000\u08b7\u08b6\u0001\u0000\u0000\u0000\u08b7\u08b8" +
                    "\u0001\u0000\u0000\u0000\u08b8\u08cf\u0001\u0000\u0000\u0000\u08b9\u08cf" +
                    "\u00055\u0000\u0000\u08ba\u08bc\u0005\u0087\u0000\u0000\u08bb\u08bd\u0005" +
                    "\u00ac\u0000\u0000\u08bc\u08bb\u0001\u0000\u0000\u0000\u08bc\u08bd\u0001" +
                    "\u0000\u0000\u0000\u08bd\u08cf\u0001\u0000\u0000\u0000\u08be\u08c0\u0005" +
                    "\u0087\u0000\u0000\u08bf\u08be\u0001\u0000\u0000\u0000\u08bf\u08c0\u0001" +
                    "\u0000\u0000\u0000\u08c0\u08c1\u0001\u0000\u0000\u0000\u08c1\u08cf\u0005" +
                    "\u00dd\u0000\u0000\u08c2\u08c4\u0005\u00d1\u0000\u0000\u08c3\u08c5\u0005" +
                    "\u00ac\u0000\u0000\u08c4\u08c3\u0001\u0000\u0000\u0000\u08c4\u08c5\u0001" +
                    "\u0000\u0000\u0000\u08c5\u08cf\u0001\u0000\u0000\u0000\u08c6\u08c8\u0005" +
                    "i\u0000\u0000\u08c7\u08c9\u0005\u00ac\u0000\u0000\u08c8\u08c7\u0001\u0000" +
                    "\u0000\u0000\u08c8\u08c9\u0001\u0000\u0000\u0000\u08c9\u08cf\u0001\u0000" +
                    "\u0000\u0000\u08ca\u08cc\u0005\u0087\u0000\u0000\u08cb\u08ca\u0001\u0000" +
                    "\u0000\u0000\u08cb\u08cc\u0001\u0000\u0000\u0000\u08cc\u08cd\u0001\u0000" +
                    "\u0000\u0000\u08cd\u08cf\u0005\u000e\u0000\u0000\u08ce\u08b7\u0001\u0000" +
                    "\u0000\u0000\u08ce\u08b9\u0001\u0000\u0000\u0000\u08ce\u08ba\u0001\u0000" +
                    "\u0000\u0000\u08ce\u08bf\u0001\u0000\u0000\u0000\u08ce\u08c2\u0001\u0000" +
                    "\u0000\u0000\u08ce\u08c6\u0001\u0000\u0000\u0000\u08ce\u08cb\u0001\u0000" +
                    "\u0000\u0000\u08cf\u0099\u0001\u0000\u0000\u0000\u08d0\u08d1\u0005\u00a5" +
                    "\u0000\u0000\u08d1\u08d5\u0003\u00d2i\u0000\u08d2\u08d3\u0005\u0115\u0000" +
                    "\u0000\u08d3\u08d5\u0003\u00a0P\u0000\u08d4\u08d0\u0001\u0000\u0000\u0000" +
                    "\u08d4\u08d2\u0001\u0000\u0000\u0000\u08d5\u009b\u0001\u0000\u0000\u0000" +
                    "\u08d6\u08d7\u0005\u00f6\u0000\u0000\u08d7\u08d9\u0005\u0002\u0000\u0000" +
                    "\u08d8\u08da\u0003\u009eO\u0000\u08d9\u08d8\u0001\u0000\u0000\u0000\u08d9" +
                    "\u08da\u0001\u0000\u0000\u0000\u08da\u08db\u0001\u0000\u0000\u0000\u08db" +
                    "\u08e0\u0005\u0003\u0000\u0000\u08dc\u08dd\u0005\u00cb\u0000\u0000\u08dd" +
                    "\u08de\u0005\u0002\u0000\u0000\u08de\u08df\u0005\u013c\u0000\u0000\u08df" +
                    "\u08e1\u0005\u0003\u0000\u0000\u08e0\u08dc\u0001\u0000\u0000\u0000\u08e0" +
                    "\u08e1\u0001\u0000\u0000\u0000\u08e1\u009d\u0001\u0000\u0000\u0000\u08e2" +
                    "\u08e4\u0005\u012b\u0000\u0000\u08e3\u08e2\u0001\u0000\u0000\u0000\u08e3" +
                    "\u08e4\u0001\u0000\u0000\u0000\u08e4\u08e5\u0001\u0000\u0000\u0000\u08e5" +
                    "\u08e6\u0007\u0018\u0000\u0000\u08e6\u08fb\u0005\u00b7\u0000\u0000\u08e7" +
                    "\u08e8\u0003\u00ceg\u0000\u08e8\u08e9\u0005\u00d8\u0000\u0000\u08e9\u08fb" +
                    "\u0001\u0000\u0000\u0000\u08ea\u08eb\u0005\u0019\u0000\u0000\u08eb\u08ec" +
                    "\u0005\u013c\u0000\u0000\u08ec\u08ed\u0005\u00ab\u0000\u0000\u08ed\u08ee" +
                    "\u0005\u00a3\u0000\u0000\u08ee\u08f7\u0005\u013c\u0000\u0000\u08ef\u08f5" +
                    "\u0005\u00a5\u0000\u0000\u08f0\u08f6\u0003\u011e\u008f\u0000\u08f1\u08f2" +
                    "\u0003\u0118\u008c\u0000\u08f2\u08f3\u0005\u0002\u0000\u0000\u08f3\u08f4" +
                    "\u0005\u0003\u0000\u0000\u08f4\u08f6\u0001\u0000\u0000\u0000\u08f5\u08f0" +
                    "\u0001\u0000\u0000\u0000\u08f5\u08f1\u0001\u0000\u0000\u0000\u08f6\u08f8" +
                    "\u0001\u0000\u0000\u0000\u08f7\u08ef\u0001\u0000\u0000\u0000\u08f7\u08f8" +
                    "\u0001\u0000\u0000\u0000\u08f8\u08fb\u0001\u0000\u0000\u0000\u08f9\u08fb" +
                    "\u0003\u00ceg\u0000\u08fa\u08e3\u0001\u0000\u0000\u0000\u08fa\u08e7\u0001" +
                    "\u0000\u0000\u0000\u08fa\u08ea\u0001\u0000\u0000\u0000\u08fa\u08f9\u0001" +
                    "\u0000\u0000\u0000\u08fb\u009f\u0001\u0000\u0000\u0000\u08fc\u08fd\u0005" +
                    "\u0002\u0000\u0000\u08fd\u08fe\u0003\u00a2Q\u0000\u08fe\u08ff\u0005\u0003" +
                    "\u0000\u0000\u08ff\u00a1\u0001\u0000\u0000\u0000\u0900\u0905\u0003\u011a" +
                    "\u008d\u0000\u0901\u0902\u0005\u0004\u0000\u0000\u0902\u0904\u0003\u011a" +
                    "\u008d\u0000\u0903\u0901\u0001\u0000\u0000\u0000\u0904\u0907\u0001\u0000" +
                    "\u0000\u0000\u0905\u0903\u0001\u0000\u0000\u0000\u0905\u0906\u0001\u0000" +
                    "\u0000\u0000\u0906\u00a3\u0001\u0000\u0000\u0000\u0907\u0905\u0001\u0000" +
                    "\u0000\u0000\u0908\u0909\u0005\u0002\u0000\u0000\u0909\u090e\u0003\u00a6" +
                    "S\u0000\u090a\u090b\u0005\u0004\u0000\u0000\u090b\u090d\u0003\u00a6S\u0000" +
                    "\u090c\u090a\u0001\u0000\u0000\u0000\u090d\u0910\u0001\u0000\u0000\u0000" +
                    "\u090e\u090c\u0001\u0000\u0000\u0000\u090e\u090f\u0001\u0000\u0000\u0000" +
                    "\u090f\u0911\u0001\u0000\u0000\u0000\u0910\u090e\u0001\u0000\u0000\u0000" +
                    "\u0911\u0912\u0005\u0003\u0000\u0000\u0912\u00a5\u0001\u0000\u0000\u0000" +
                    "\u0913\u0915\u0003\u011a\u008d\u0000\u0914\u0916\u0007\u0011\u0000\u0000" +
                    "\u0915\u0914\u0001\u0000\u0000\u0000\u0915\u0916\u0001\u0000\u0000\u0000" +
                    "\u0916\u00a7\u0001\u0000\u0000\u0000\u0917\u0918\u0005\u0002\u0000\u0000" +
                    "\u0918\u091d\u0003\u00aaU\u0000\u0919\u091a\u0005\u0004\u0000\u0000\u091a" +
                    "\u091c\u0003\u00aaU\u0000\u091b\u0919\u0001\u0000\u0000\u0000\u091c\u091f" +
                    "\u0001\u0000\u0000\u0000\u091d\u091b\u0001\u0000\u0000\u0000\u091d\u091e" +
                    "\u0001\u0000\u0000\u0000\u091e\u0920\u0001\u0000\u0000\u0000\u091f\u091d" +
                    "\u0001\u0000\u0000\u0000\u0920\u0921\u0005\u0003\u0000\u0000\u0921\u00a9" +
                    "\u0001\u0000\u0000\u0000\u0922\u0924\u0003\u011e\u008f\u0000\u0923\u0925" +
                    "\u0003 \u0010\u0000\u0924\u0923\u0001\u0000\u0000\u0000\u0924\u0925\u0001" +
                    "\u0000\u0000\u0000\u0925\u00ab\u0001\u0000\u0000\u0000\u0926\u0928\u0003" +
                    "\u00b8\\\u0000\u0927\u0929\u0003~?\u0000\u0928\u0927\u0001\u0000\u0000" +
                    "\u0000\u0928\u0929\u0001\u0000\u0000\u0000\u0929\u092b\u0001\u0000\u0000" +
                    "\u0000\u092a\u092c\u0003\u009cN\u0000\u092b\u092a\u0001\u0000\u0000\u0000" +
                    "\u092b\u092c\u0001\u0000\u0000\u0000\u092c\u092d\u0001\u0000\u0000\u0000" +
                    "\u092d\u092e\u0003\u00b2Y\u0000\u092e\u0942\u0001\u0000\u0000\u0000\u092f" +
                    "\u0930\u0005\u0002\u0000\u0000\u0930\u0931\u0003\"\u0011\u0000\u0931\u0933" +
                    "\u0005\u0003\u0000\u0000\u0932\u0934\u0003\u009cN\u0000\u0933\u0932\u0001" +
                    "\u0000\u0000\u0000\u0933\u0934\u0001\u0000\u0000\u0000\u0934\u0935\u0001" +
                    "\u0000\u0000\u0000\u0935\u0936\u0003\u00b2Y\u0000\u0936\u0942\u0001\u0000" +
                    "\u0000\u0000\u0937\u0938\u0005\u0002\u0000\u0000\u0938\u0939\u0003\u0094" +
                    "J\u0000\u0939\u093b\u0005\u0003\u0000\u0000\u093a\u093c\u0003\u009cN\u0000" +
                    "\u093b\u093a\u0001\u0000\u0000\u0000\u093b\u093c\u0001\u0000\u0000\u0000" +
                    "\u093c\u093d\u0001\u0000\u0000\u0000\u093d\u093e\u0003\u00b2Y\u0000\u093e" +
                    "\u0942\u0001\u0000\u0000\u0000\u093f\u0942\u0003\u00aeW\u0000\u0940\u0942" +
                    "\u0003\u00b0X\u0000\u0941\u0926\u0001\u0000\u0000\u0000\u0941\u092f\u0001" +
                    "\u0000\u0000\u0000\u0941\u0937\u0001\u0000\u0000\u0000\u0941\u093f\u0001" +
                    "\u0000\u0000\u0000\u0941\u0940\u0001\u0000\u0000\u0000\u0942\u00ad\u0001" +
                    "\u0000\u0000\u0000\u0943\u0944\u0005\u0116\u0000\u0000\u0944\u0949\u0003" +
                    "\u00ceg\u0000\u0945\u0946\u0005\u0004\u0000\u0000\u0946\u0948\u0003\u00ce" +
                    "g\u0000\u0947\u0945\u0001\u0000\u0000\u0000\u0948\u094b\u0001\u0000\u0000" +
                    "\u0000\u0949\u0947\u0001\u0000\u0000\u0000\u0949\u094a\u0001\u0000\u0000" +
                    "\u0000\u094a\u094c\u0001\u0000\u0000\u0000\u094b\u0949\u0001\u0000\u0000" +
                    "\u0000\u094c\u094d\u0003\u00b2Y\u0000\u094d\u00af\u0001\u0000\u0000\u0000" +
                    "\u094e\u094f\u0003\u0116\u008b\u0000\u094f\u0958\u0005\u0002\u0000\u0000" +
                    "\u0950\u0955\u0003\u00ceg\u0000\u0951\u0952\u0005\u0004\u0000\u0000\u0952" +
                    "\u0954\u0003\u00ceg\u0000\u0953\u0951\u0001\u0000\u0000\u0000\u0954\u0957" +
                    "\u0001\u0000\u0000\u0000\u0955\u0953\u0001\u0000\u0000\u0000\u0955\u0956" +
                    "\u0001\u0000\u0000\u0000\u0956\u0959\u0001\u0000\u0000\u0000\u0957\u0955" +
                    "\u0001\u0000\u0000\u0000\u0958\u0950\u0001\u0000\u0000\u0000\u0958\u0959" +
                    "\u0001\u0000\u0000\u0000\u0959\u095a\u0001\u0000\u0000\u0000\u095a\u095b" +
                    "\u0005\u0003\u0000\u0000\u095b\u095c\u0003\u00b2Y\u0000\u095c\u00b1\u0001" +
                    "\u0000\u0000\u0000\u095d\u095f\u0005\u0013\u0000\u0000\u095e\u095d\u0001" +
                    "\u0000\u0000\u0000\u095e\u095f\u0001\u0000\u0000\u0000\u095f\u0960\u0001" +
                    "\u0000\u0000\u0000\u0960\u0962\u0003\u0120\u0090\u0000\u0961\u0963\u0003" +
                    "\u00a0P\u0000\u0962\u0961\u0001\u0000\u0000\u0000\u0962\u0963\u0001\u0000" +
                    "\u0000\u0000\u0963\u0965\u0001\u0000\u0000\u0000\u0964\u095e\u0001\u0000" +
                    "\u0000\u0000\u0964\u0965\u0001\u0000\u0000\u0000\u0965\u00b3\u0001\u0000" +
                    "\u0000\u0000\u0966\u0967\u0005\u00d7\u0000\u0000\u0967\u0968\u0005f\u0000" +
                    "\u0000\u0968\u0969\u0005\u00df\u0000\u0000\u0969\u096d\u0005\u0138\u0000" +
                    "\u0000\u096a\u096b\u0005\u011e\u0000\u0000\u096b\u096c\u0005\u00e0\u0000" +
                    "\u0000\u096c\u096e\u0003<\u001e\u0000\u096d\u096a\u0001\u0000\u0000\u0000" +
                    "\u096d\u096e\u0001\u0000\u0000\u0000\u096e\u0998\u0001\u0000\u0000\u0000" +
                    "\u096f\u0970\u0005\u00d7\u0000\u0000\u0970\u0971\u0005f\u0000\u0000\u0971" +
                    "\u097b\u0005G\u0000\u0000\u0972\u0973\u0005_\u0000\u0000\u0973\u0974\u0005" +
                    "\u00f9\u0000\u0000\u0974\u0975\u0005\u001b\u0000\u0000\u0975\u0979\u0005" +
                    "\u0138\u0000\u0000\u0976\u0977\u0005T\u0000\u0000\u0977\u0978\u0005\u001b" +
                    "\u0000\u0000\u0978\u097a\u0005\u0138\u0000\u0000\u0979\u0976\u0001\u0000" +
                    "\u0000\u0000\u0979\u097a\u0001\u0000\u0000\u0000\u097a\u097c\u0001\u0000" +
                    "\u0000\u0000\u097b\u0972\u0001\u0000\u0000\u0000\u097b\u097c\u0001\u0000" +
                    "\u0000\u0000\u097c\u0982\u0001\u0000\u0000\u0000\u097d\u097e\u0005)\u0000" +
                    "\u0000\u097e\u097f\u0005\u0080\u0000\u0000\u097f\u0980\u0005\u00f9\u0000" +
                    "\u0000\u0980\u0981\u0005\u001b\u0000\u0000\u0981\u0983\u0005\u0138\u0000" +
                    "\u0000\u0982\u097d\u0001\u0000\u0000\u0000\u0982\u0983\u0001\u0000\u0000" +
                    "\u0000\u0983\u0989\u0001\u0000\u0000\u0000\u0984\u0985\u0005\u0094\u0000" +
                    "\u0000\u0985\u0986\u0005\u0082\u0000\u0000\u0986\u0987\u0005\u00f9\u0000" +
                    "\u0000\u0987\u0988\u0005\u001b\u0000\u0000\u0988\u098a\u0005\u0138\u0000" +
                    "\u0000\u0989\u0984\u0001\u0000\u0000\u0000\u0989\u098a\u0001\u0000\u0000" +
                    "\u0000\u098a\u098f\u0001\u0000\u0000\u0000\u098b\u098c\u0005\u008b\u0000" +
                    "\u0000\u098c\u098d\u0005\u00f9\u0000\u0000\u098d\u098e\u0005\u001b\u0000" +
                    "\u0000\u098e\u0990\u0005\u0138\u0000\u0000\u098f\u098b\u0001\u0000\u0000" +
                    "\u0000\u098f\u0990\u0001\u0000\u0000\u0000\u0990\u0995\u0001\u0000\u0000" +
                    "\u0000\u0991\u0992\u0005\u00a1\u0000\u0000\u0992\u0993\u0005E\u0000\u0000" +
                    "\u0993\u0994\u0005\u0013\u0000\u0000\u0994\u0996\u0005\u0138\u0000\u0000" +
                    "\u0995\u0991\u0001\u0000\u0000\u0000\u0995\u0996\u0001\u0000\u0000\u0000" +
                    "\u0996\u0998\u0001\u0000\u0000\u0000\u0997\u0966\u0001\u0000\u0000\u0000" +
                    "\u0997\u096f\u0001\u0000\u0000\u0000\u0998\u00b5\u0001\u0000\u0000\u0000" +
                    "\u0999\u099e\u0003\u00b8\\\u0000\u099a\u099b\u0005\u0004\u0000\u0000\u099b" +
                    "\u099d\u0003\u00b8\\\u0000\u099c\u099a\u0001\u0000\u0000\u0000\u099d\u09a0" +
                    "\u0001\u0000\u0000\u0000\u099e\u099c\u0001\u0000\u0000\u0000\u099e\u099f" +
                    "\u0001\u0000\u0000\u0000\u099f\u00b7\u0001\u0000\u0000\u0000\u09a0\u099e" +
                    "\u0001\u0000\u0000\u0000\u09a1\u09a6\u0003\u011a\u008d\u0000\u09a2\u09a3" +
                    "\u0005\u0005\u0000\u0000\u09a3\u09a5\u0003\u011a\u008d\u0000\u09a4\u09a2" +
                    "\u0001\u0000\u0000\u0000\u09a5\u09a8\u0001\u0000\u0000\u0000\u09a6\u09a4" +
                    "\u0001\u0000\u0000\u0000\u09a6\u09a7\u0001\u0000\u0000\u0000\u09a7\u00b9" +
                    "\u0001\u0000\u0000\u0000\u09a8\u09a6\u0001\u0000\u0000\u0000\u09a9\u09ae" +
                    "\u0003\u00bc^\u0000\u09aa\u09ab\u0005\u0004\u0000\u0000\u09ab\u09ad\u0003" +
                    "\u00bc^\u0000\u09ac\u09aa\u0001\u0000\u0000\u0000\u09ad\u09b0\u0001\u0000" +
                    "\u0000\u0000\u09ae\u09ac\u0001\u0000\u0000\u0000\u09ae\u09af\u0001\u0000" +
                    "\u0000\u0000\u09af\u00bb\u0001\u0000\u0000\u0000\u09b0\u09ae\u0001\u0000" +
                    "\u0000\u0000\u09b1\u09b4\u0003\u00b8\\\u0000\u09b2\u09b3\u0005\u00a8\u0000" +
                    "\u0000\u09b3\u09b5\u0003<\u001e\u0000\u09b4\u09b2\u0001\u0000\u0000\u0000" +
                    "\u09b4\u09b5\u0001\u0000\u0000\u0000\u09b5\u00bd\u0001\u0000\u0000\u0000" +
                    "\u09b6\u09b7\u0003\u011a\u008d\u0000\u09b7\u09b8\u0005\u0005\u0000\u0000" +
                    "\u09b8\u09ba\u0001\u0000\u0000\u0000\u09b9\u09b6\u0001\u0000\u0000\u0000" +
                    "\u09b9\u09ba\u0001\u0000\u0000\u0000\u09ba\u09bb\u0001\u0000\u0000\u0000" +
                    "\u09bb\u09bc\u0003\u011a\u008d\u0000\u09bc\u00bf\u0001\u0000\u0000\u0000" +
                    "\u09bd\u09be\u0003\u011a\u008d\u0000\u09be\u09bf\u0005\u0005\u0000\u0000" +
                    "\u09bf\u09c1\u0001\u0000\u0000\u0000\u09c0\u09bd\u0001\u0000\u0000\u0000" +
                    "\u09c0\u09c1\u0001\u0000\u0000\u0000\u09c1\u09c2\u0001\u0000\u0000\u0000" +
                    "\u09c2\u09c3\u0003\u011a\u008d\u0000\u09c3\u00c1\u0001\u0000\u0000\u0000" +
                    "\u09c4\u09cc\u0003\u00ceg\u0000\u09c5\u09c7\u0005\u0013\u0000\u0000\u09c6" +
                    "\u09c5\u0001\u0000\u0000\u0000\u09c6\u09c7\u0001\u0000\u0000\u0000\u09c7" +
                    "\u09ca\u0001\u0000\u0000\u0000\u09c8\u09cb\u0003\u011a\u008d\u0000\u09c9" +
                    "\u09cb\u0003\u00a0P\u0000\u09ca\u09c8\u0001\u0000\u0000\u0000\u09ca\u09c9" +
                    "\u0001\u0000\u0000\u0000\u09cb\u09cd\u0001\u0000\u0000\u0000\u09cc\u09c6" +
                    "\u0001\u0000\u0000\u0000\u09cc\u09cd\u0001\u0000\u0000\u0000\u09cd\u00c3" +
                    "\u0001\u0000\u0000\u0000\u09ce\u09d3\u0003\u00c2a\u0000\u09cf\u09d0\u0005" +
                    "\u0004\u0000\u0000\u09d0\u09d2\u0003\u00c2a\u0000\u09d1\u09cf\u0001\u0000" +
                    "\u0000\u0000\u09d2\u09d5\u0001\u0000\u0000\u0000\u09d3\u09d1\u0001\u0000" +
                    "\u0000\u0000\u09d3\u09d4\u0001\u0000\u0000\u0000\u09d4\u00c5\u0001\u0000" +
                    "\u0000\u0000\u09d5\u09d3\u0001\u0000\u0000\u0000\u09d6\u09d7\u0005\u0002" +
                    "\u0000\u0000\u09d7\u09dc\u0003\u00c8d\u0000\u09d8\u09d9\u0005\u0004\u0000" +
                    "\u0000\u09d9\u09db\u0003\u00c8d\u0000\u09da\u09d8\u0001\u0000\u0000\u0000" +
                    "\u09db\u09de\u0001\u0000\u0000\u0000\u09dc\u09da\u0001\u0000\u0000\u0000" +
                    "\u09dc\u09dd\u0001\u0000\u0000\u0000\u09dd\u09df\u0001\u0000\u0000\u0000" +
                    "\u09de\u09dc\u0001\u0000\u0000\u0000\u09df\u09e0\u0005\u0003\u0000\u0000" +
                    "\u09e0\u00c7\u0001\u0000\u0000\u0000\u09e1\u09e4\u0003\u00cae\u0000\u09e2" +
                    "\u09e4\u0003\u00fe\u007f\u0000\u09e3\u09e1\u0001\u0000\u0000\u0000\u09e3" +
                    "\u09e2\u0001\u0000\u0000\u0000\u09e4\u00c9\u0001\u0000\u0000\u0000\u09e5" +
                    "\u09f3\u0003\u0118\u008c\u0000\u09e6\u09e7\u0003\u011e\u008f\u0000\u09e7" +
                    "\u09e8\u0005\u0002\u0000\u0000\u09e8\u09ed\u0003\u00ccf\u0000\u09e9\u09ea" +
                    "\u0005\u0004\u0000\u0000\u09ea\u09ec\u0003\u00ccf\u0000\u09eb\u09e9\u0001" +
                    "\u0000\u0000\u0000\u09ec\u09ef\u0001\u0000\u0000\u0000\u09ed\u09eb\u0001" +
                    "\u0000\u0000\u0000\u09ed\u09ee\u0001\u0000\u0000\u0000\u09ee\u09f0\u0001" +
                    "\u0000\u0000\u0000\u09ef\u09ed\u0001\u0000\u0000\u0000\u09f0\u09f1\u0005" +
                    "\u0003\u0000\u0000\u09f1\u09f3\u0001\u0000\u0000\u0000\u09f2\u09e5\u0001" +
                    "\u0000\u0000\u0000\u09f2\u09e6\u0001\u0000\u0000\u0000\u09f3\u00cb\u0001" +
                    "\u0000\u0000\u0000\u09f4\u09f7\u0003\u0118\u008c\u0000\u09f5\u09f7\u0003" +
                    "\u00dcn\u0000\u09f6\u09f4\u0001\u0000\u0000\u0000\u09f6\u09f5\u0001\u0000" +
                    "\u0000\u0000\u09f7\u00cd\u0001\u0000\u0000\u0000\u09f8\u09f9\u0003\u00d2" +
                    "i\u0000\u09f9\u00cf\u0001\u0000\u0000\u0000\u09fa\u09ff\u0003\u00ceg\u0000" +
                    "\u09fb\u09fc\u0005\u0004\u0000\u0000\u09fc\u09fe\u0003\u00ceg\u0000\u09fd" +
                    "\u09fb\u0001\u0000\u0000\u0000\u09fe\u0a01\u0001\u0000\u0000\u0000\u09ff" +
                    "\u09fd\u0001\u0000\u0000\u0000\u09ff\u0a00\u0001\u0000\u0000\u0000\u0a00" +
                    "\u00d1\u0001\u0000\u0000\u0000\u0a01\u09ff\u0001\u0000\u0000\u0000\u0a02" +
                    "\u0a03\u0006i\uffff\uffff\u0000\u0a03\u0a04\u0005\u00a0\u0000\u0000\u0a04" +
                    "\u0a0f\u0003\u00d2i\u0005\u0a05\u0a06\u0005W\u0000\u0000\u0a06\u0a07\u0005" +
                    "\u0002\u0000\u0000\u0a07\u0a08\u0003\"\u0011\u0000\u0a08\u0a09\u0005\u0003" +
                    "\u0000\u0000\u0a09\u0a0f\u0001\u0000\u0000\u0000\u0a0a\u0a0c\u0003\u00d6" +
                    "k\u0000\u0a0b\u0a0d\u0003\u00d4j\u0000\u0a0c\u0a0b\u0001\u0000\u0000\u0000" +
                    "\u0a0c\u0a0d\u0001\u0000\u0000\u0000\u0a0d\u0a0f\u0001\u0000\u0000\u0000" +
                    "\u0a0e\u0a02\u0001\u0000\u0000\u0000\u0a0e\u0a05\u0001\u0000\u0000\u0000" +
                    "\u0a0e\u0a0a\u0001\u0000\u0000\u0000\u0a0f\u0a18\u0001\u0000\u0000\u0000" +
                    "\u0a10\u0a11\n\u0002\u0000\u0000\u0a11\u0a12\u0005\r\u0000\u0000\u0a12" +
                    "\u0a17\u0003\u00d2i\u0003\u0a13\u0a14\n\u0001\u0000\u0000\u0a14\u0a15" +
                    "\u0005\u00a9\u0000\u0000\u0a15\u0a17\u0003\u00d2i\u0002\u0a16\u0a10\u0001" +
                    "\u0000\u0000\u0000\u0a16\u0a13\u0001\u0000\u0000\u0000\u0a17\u0a1a\u0001" +
                    "\u0000\u0000\u0000\u0a18\u0a16\u0001\u0000\u0000\u0000\u0a18\u0a19\u0001" +
                    "\u0000\u0000\u0000\u0a19\u00d3\u0001\u0000\u0000\u0000\u0a1a\u0a18\u0001" +
                    "\u0000\u0000\u0000\u0a1b\u0a1d\u0005\u00a0\u0000\u0000\u0a1c\u0a1b\u0001" +
                    "\u0000\u0000\u0000\u0a1c\u0a1d\u0001\u0000\u0000\u0000\u0a1d\u0a1e\u0001" +
                    "\u0000\u0000\u0000\u0a1e\u0a1f\u0005\u0017\u0000\u0000\u0a1f\u0a20\u0003" +
                    "\u00d6k\u0000\u0a20\u0a21\u0005\r\u0000\u0000\u0a21\u0a22\u0003\u00d6" +
                    "k\u0000\u0a22\u0a6e\u0001\u0000\u0000\u0000\u0a23\u0a25\u0005\u00a0\u0000" +
                    "\u0000\u0a24\u0a23\u0001\u0000\u0000\u0000\u0a24\u0a25\u0001\u0000\u0000" +
                    "\u0000\u0a25\u0a26\u0001\u0000\u0000\u0000\u0a26\u0a27\u0005u\u0000\u0000" +
                    "\u0a27\u0a28\u0005\u0002\u0000\u0000\u0a28\u0a2d\u0003\u00ceg\u0000\u0a29" +
                    "\u0a2a\u0005\u0004\u0000\u0000\u0a2a\u0a2c\u0003\u00ceg\u0000\u0a2b\u0a29" +
                    "\u0001\u0000\u0000\u0000\u0a2c\u0a2f\u0001\u0000\u0000\u0000\u0a2d\u0a2b" +
                    "\u0001\u0000\u0000\u0000\u0a2d\u0a2e\u0001\u0000\u0000\u0000\u0a2e\u0a30" +
                    "\u0001\u0000\u0000\u0000\u0a2f\u0a2d\u0001\u0000\u0000\u0000\u0a30\u0a31" +
                    "\u0005\u0003\u0000\u0000\u0a31\u0a6e\u0001\u0000\u0000\u0000\u0a32\u0a34" +
                    "\u0005\u00a0\u0000\u0000\u0a33\u0a32\u0001\u0000\u0000\u0000\u0a33\u0a34" +
                    "\u0001\u0000\u0000\u0000\u0a34\u0a35\u0001\u0000\u0000\u0000\u0a35\u0a36" +
                    "\u0005u\u0000\u0000\u0a36\u0a37\u0005\u0002\u0000\u0000\u0a37\u0a38\u0003" +
                    "\"\u0011\u0000\u0a38\u0a39\u0005\u0003\u0000\u0000\u0a39\u0a6e\u0001\u0000" +
                    "\u0000\u0000\u0a3a\u0a3c\u0005\u00a0\u0000\u0000\u0a3b\u0a3a\u0001\u0000" +
                    "\u0000\u0000\u0a3b\u0a3c\u0001\u0000\u0000\u0000\u0a3c\u0a3d\u0001\u0000" +
                    "\u0000\u0000\u0a3d\u0a3e\u0005\u00d2\u0000\u0000\u0a3e\u0a6e\u0003\u00d6" +
                    "k\u0000\u0a3f\u0a41\u0005\u00a0\u0000\u0000\u0a40\u0a3f\u0001\u0000\u0000" +
                    "\u0000\u0a40\u0a41\u0001\u0000\u0000\u0000\u0a41\u0a42\u0001\u0000\u0000" +
                    "\u0000\u0a42\u0a43\u0007\u0019\u0000\u0000\u0a43\u0a51\u0007\u001a\u0000" +
                    "\u0000\u0a44\u0a45\u0005\u0002\u0000\u0000\u0a45\u0a52\u0005\u0003\u0000" +
                    "\u0000\u0a46\u0a47\u0005\u0002\u0000\u0000\u0a47\u0a4c\u0003\u00ceg\u0000" +
                    "\u0a48\u0a49\u0005\u0004\u0000\u0000\u0a49\u0a4b\u0003\u00ceg\u0000\u0a4a" +
                    "\u0a48\u0001\u0000\u0000\u0000\u0a4b\u0a4e\u0001\u0000\u0000\u0000\u0a4c" +
                    "\u0a4a\u0001\u0000\u0000\u0000\u0a4c\u0a4d\u0001\u0000\u0000\u0000\u0a4d" +
                    "\u0a4f\u0001\u0000\u0000\u0000\u0a4e\u0a4c\u0001\u0000\u0000\u0000\u0a4f" +
                    "\u0a50\u0005\u0003\u0000\u0000\u0a50\u0a52\u0001\u0000\u0000\u0000\u0a51" +
                    "\u0a44\u0001\u0000\u0000\u0000\u0a51\u0a46\u0001\u0000\u0000\u0000\u0a52" +
                    "\u0a6e\u0001\u0000\u0000\u0000\u0a53\u0a55\u0005\u00a0\u0000\u0000\u0a54" +
                    "\u0a53\u0001\u0000\u0000\u0000\u0a54\u0a55\u0001\u0000\u0000\u0000\u0a55" +
                    "\u0a56\u0001\u0000\u0000\u0000\u0a56\u0a57\u0007\u0019\u0000\u0000\u0a57" +
                    "\u0a5a\u0003\u00d6k\u0000\u0a58\u0a59\u0005S\u0000\u0000\u0a59\u0a5b\u0005" +
                    "\u0138\u0000\u0000\u0a5a\u0a58\u0001\u0000\u0000\u0000\u0a5a\u0a5b\u0001" +
                    "\u0000\u0000\u0000\u0a5b\u0a6e\u0001\u0000\u0000\u0000\u0a5c\u0a5e\u0005" +
                    "\u007f\u0000\u0000\u0a5d\u0a5f\u0005\u00a0\u0000\u0000\u0a5e\u0a5d\u0001" +
                    "\u0000\u0000\u0000\u0a5e\u0a5f\u0001\u0000\u0000\u0000\u0a5f\u0a60\u0001" +
                    "\u0000\u0000\u0000\u0a60\u0a6e\u0005\u00a1\u0000\u0000\u0a61\u0a63\u0005" +
                    "\u007f\u0000\u0000\u0a62\u0a64\u0005\u00a0\u0000\u0000\u0a63\u0a62\u0001" +
                    "\u0000\u0000\u0000\u0a63\u0a64\u0001\u0000\u0000\u0000\u0a64\u0a65\u0001" +
                    "\u0000\u0000\u0000\u0a65\u0a6e\u0007\u001b\u0000\u0000\u0a66\u0a68\u0005" +
                    "\u007f\u0000\u0000\u0a67\u0a69\u0005\u00a0\u0000\u0000\u0a68\u0a67\u0001" +
                    "\u0000\u0000\u0000\u0a68\u0a69\u0001\u0000\u0000\u0000\u0a69\u0a6a\u0001" +
                    "\u0000\u0000\u0000\u0a6a\u0a6b\u0005M\u0000\u0000\u0a6b\u0a6c\u0005h\u0000" +
                    "\u0000\u0a6c\u0a6e\u0003\u00d6k\u0000\u0a6d\u0a1c\u0001\u0000\u0000\u0000" +
                    "\u0a6d\u0a24\u0001\u0000\u0000\u0000\u0a6d\u0a33\u0001\u0000\u0000\u0000" +
                    "\u0a6d\u0a3b\u0001\u0000\u0000\u0000\u0a6d\u0a40\u0001\u0000\u0000\u0000" +
                    "\u0a6d\u0a54\u0001\u0000\u0000\u0000\u0a6d\u0a5c\u0001\u0000\u0000\u0000" +
                    "\u0a6d\u0a61\u0001\u0000\u0000\u0000\u0a6d\u0a66\u0001\u0000\u0000\u0000" +
                    "\u0a6e\u00d5\u0001\u0000\u0000\u0000\u0a6f\u0a70\u0006k\uffff\uffff\u0000" +
                    "\u0a70\u0a74\u0003\u00dam\u0000\u0a71\u0a72\u0007\u001c\u0000\u0000\u0a72" +
                    "\u0a74\u0003\u00d6k\u0007\u0a73\u0a6f\u0001\u0000\u0000\u0000\u0a73\u0a71" +
                    "\u0001\u0000\u0000\u0000\u0a74\u0a8a\u0001\u0000\u0000\u0000\u0a75\u0a76" +
                    "\n\u0006\u0000\u0000\u0a76\u0a77\u0007\u001d\u0000\u0000\u0a77\u0a89\u0003" +
                    "\u00d6k\u0007\u0a78\u0a79\n\u0005\u0000\u0000\u0a79\u0a7a\u0007\u001e" +
                    "\u0000\u0000\u0a7a\u0a89\u0003\u00d6k\u0006\u0a7b\u0a7c\n\u0004\u0000" +
                    "\u0000\u0a7c\u0a7d\u0005\u0130\u0000\u0000\u0a7d\u0a89\u0003\u00d6k\u0005" +
                    "\u0a7e\u0a7f\n\u0003\u0000\u0000\u0a7f\u0a80\u0005\u0133\u0000\u0000\u0a80" +
                    "\u0a89\u0003\u00d6k\u0004\u0a81\u0a82\n\u0002\u0000\u0000\u0a82\u0a83" +
                    "\u0005\u0131\u0000\u0000\u0a83\u0a89\u0003\u00d6k\u0003\u0a84\u0a85\n" +
                    "\u0001\u0000\u0000\u0a85\u0a86\u0003\u00deo\u0000\u0a86\u0a87\u0003\u00d6" +
                    "k\u0002\u0a87\u0a89\u0001\u0000\u0000\u0000\u0a88\u0a75\u0001\u0000\u0000" +
                    "\u0000\u0a88\u0a78\u0001\u0000\u0000\u0000\u0a88\u0a7b\u0001\u0000\u0000" +
                    "\u0000\u0a88\u0a7e\u0001\u0000\u0000\u0000\u0a88\u0a81\u0001\u0000\u0000" +
                    "\u0000\u0a88\u0a84\u0001\u0000\u0000\u0000\u0a89\u0a8c\u0001\u0000\u0000" +
                    "\u0000\u0a8a\u0a88\u0001\u0000\u0000\u0000\u0a8a\u0a8b\u0001\u0000\u0000" +
                    "\u0000\u0a8b\u00d7\u0001\u0000\u0000\u0000\u0a8c\u0a8a\u0001\u0000\u0000" +
                    "\u0000\u0a8d\u0a8e\u0007\u001f\u0000\u0000\u0a8e\u00d9\u0001\u0000\u0000" +
                    "\u0000\u0a8f\u0a90\u0006m\uffff\uffff\u0000\u0a90\u0b7e\u0007 \u0000\u0000" +
                    "\u0a91\u0a92\u0007!\u0000\u0000\u0a92\u0a93\u0005\u0002\u0000\u0000\u0a93" +
                    "\u0a94\u0003\u00d8l\u0000\u0a94\u0a95\u0005\u0004\u0000\u0000\u0a95\u0a96" +
                    "\u0003\u00d6k\u0000\u0a96\u0a97\u0005\u0004\u0000\u0000\u0a97\u0a98\u0003" +
                    "\u00d6k\u0000\u0a98\u0a99\u0005\u0003\u0000\u0000\u0a99\u0b7e\u0001\u0000" +
                    "\u0000\u0000\u0a9a\u0a9b\u0007\"\u0000\u0000\u0a9b\u0a9c\u0005\u0002\u0000" +
                    "\u0000\u0a9c\u0a9d\u0003\u00d8l\u0000\u0a9d\u0a9e\u0005\u0004\u0000\u0000" +
                    "\u0a9e\u0a9f\u0003\u00d6k\u0000\u0a9f\u0aa0\u0005\u0004\u0000\u0000\u0aa0" +
                    "\u0aa1\u0003\u00d6k\u0000\u0aa1\u0aa2\u0005\u0003\u0000\u0000\u0aa2\u0b7e" +
                    "\u0001\u0000\u0000\u0000\u0aa3\u0aa5\u0005\u001e\u0000\u0000\u0aa4\u0aa6" +
                    "\u0003\u0108\u0084\u0000\u0aa5\u0aa4\u0001\u0000\u0000\u0000\u0aa6\u0aa7" +
                    "\u0001\u0000\u0000\u0000\u0aa7\u0aa5\u0001\u0000\u0000\u0000\u0aa7\u0aa8" +
                    "\u0001\u0000\u0000\u0000\u0aa8\u0aab\u0001\u0000\u0000\u0000\u0aa9\u0aaa" +
                    "\u0005Q\u0000\u0000\u0aaa\u0aac\u0003\u00ceg\u0000\u0aab\u0aa9\u0001\u0000" +
                    "\u0000\u0000\u0aab\u0aac\u0001\u0000\u0000\u0000\u0aac\u0aad\u0001\u0000" +
                    "\u0000\u0000\u0aad\u0aae\u0005R\u0000\u0000\u0aae\u0b7e\u0001\u0000\u0000" +
                    "\u0000\u0aaf\u0ab0\u0005\u001e\u0000\u0000\u0ab0\u0ab2\u0003\u00ceg\u0000" +
                    "\u0ab1\u0ab3\u0003\u0108\u0084\u0000\u0ab2\u0ab1\u0001\u0000\u0000\u0000" +
                    "\u0ab3\u0ab4\u0001\u0000\u0000\u0000\u0ab4\u0ab2\u0001\u0000\u0000\u0000" +
                    "\u0ab4\u0ab5\u0001\u0000\u0000\u0000\u0ab5\u0ab8\u0001\u0000\u0000\u0000" +
                    "\u0ab6\u0ab7\u0005Q\u0000\u0000\u0ab7\u0ab9\u0003\u00ceg\u0000\u0ab8\u0ab6" +
                    "\u0001\u0000\u0000\u0000\u0ab8\u0ab9\u0001\u0000\u0000\u0000\u0ab9\u0aba" +
                    "\u0001\u0000\u0000\u0000\u0aba\u0abb\u0005R\u0000\u0000\u0abb\u0b7e\u0001" +
                    "\u0000\u0000\u0000\u0abc\u0abd\u0007#\u0000\u0000\u0abd\u0abe\u0005\u0002" +
                    "\u0000\u0000\u0abe\u0abf\u0003\u00ceg\u0000\u0abf\u0ac0\u0005\u0013\u0000" +
                    "\u0000\u0ac0\u0ac1\u0003\u00f4z\u0000\u0ac1\u0ac2\u0005\u0003\u0000\u0000" +
                    "\u0ac2\u0b7e\u0001\u0000\u0000\u0000\u0ac3\u0ac4\u0005\u00ee\u0000\u0000" +
                    "\u0ac4\u0acd\u0005\u0002\u0000\u0000\u0ac5\u0aca\u0003\u00c2a\u0000\u0ac6" +
                    "\u0ac7\u0005\u0004\u0000\u0000\u0ac7\u0ac9\u0003\u00c2a\u0000\u0ac8\u0ac6" +
                    "\u0001\u0000\u0000\u0000\u0ac9\u0acc\u0001\u0000\u0000\u0000\u0aca\u0ac8" +
                    "\u0001\u0000\u0000\u0000\u0aca\u0acb\u0001\u0000\u0000\u0000\u0acb\u0ace" +
                    "\u0001\u0000\u0000\u0000\u0acc\u0aca\u0001\u0000\u0000\u0000\u0acd\u0ac5" +
                    "\u0001\u0000\u0000\u0000\u0acd\u0ace\u0001\u0000\u0000\u0000\u0ace\u0acf" +
                    "\u0001\u0000\u0000\u0000\u0acf\u0b7e\u0005\u0003\u0000\u0000\u0ad0\u0ad1" +
                    "\u0005b\u0000\u0000\u0ad1\u0ad2\u0005\u0002\u0000\u0000\u0ad2\u0ad5\u0003" +
                    "\u00ceg\u0000\u0ad3\u0ad4\u0005s\u0000\u0000\u0ad4\u0ad6\u0005\u00a2\u0000" +
                    "\u0000\u0ad5\u0ad3\u0001\u0000\u0000\u0000\u0ad5\u0ad6\u0001\u0000\u0000" +
                    "\u0000\u0ad6\u0ad7\u0001\u0000\u0000\u0000\u0ad7\u0ad8\u0005\u0003\u0000" +
                    "\u0000\u0ad8\u0b7e\u0001\u0000\u0000\u0000\u0ad9\u0ada\u0005\u0010\u0000" +
                    "\u0000\u0ada\u0adb\u0005\u0002\u0000\u0000\u0adb\u0ade\u0003\u00ceg\u0000" +
                    "\u0adc\u0add\u0005s\u0000\u0000\u0add\u0adf\u0005\u00a2\u0000\u0000\u0ade" +
                    "\u0adc\u0001\u0000\u0000\u0000\u0ade\u0adf\u0001\u0000\u0000\u0000\u0adf" +
                    "\u0ae0\u0001\u0000\u0000\u0000\u0ae0\u0ae1\u0005\u0003\u0000\u0000\u0ae1" +
                    "\u0b7e\u0001\u0000\u0000\u0000\u0ae2\u0ae3\u0005\u0083\u0000\u0000\u0ae3" +
                    "\u0ae4\u0005\u0002\u0000\u0000\u0ae4\u0ae7\u0003\u00ceg\u0000\u0ae5\u0ae6" +
                    "\u0005s\u0000\u0000\u0ae6\u0ae8\u0005\u00a2\u0000\u0000\u0ae7\u0ae5\u0001" +
                    "\u0000\u0000\u0000\u0ae7\u0ae8\u0001\u0000\u0000\u0000\u0ae8\u0ae9\u0001" +
                    "\u0000\u0000\u0000\u0ae9\u0aea\u0005\u0003\u0000\u0000\u0aea\u0b7e\u0001" +
                    "\u0000\u0000\u0000\u0aeb\u0aec\u0005\u00ba\u0000\u0000\u0aec\u0aed\u0005" +
                    "\u0002\u0000\u0000\u0aed\u0aee\u0003\u00d6k\u0000\u0aee\u0aef\u0005u\u0000" +
                    "\u0000\u0aef\u0af0\u0003\u00d6k\u0000\u0af0\u0af1\u0005\u0003\u0000\u0000" +
                    "\u0af1\u0b7e\u0001\u0000\u0000\u0000\u0af2\u0b7e\u0003\u00dcn\u0000\u0af3" +
                    "\u0b7e\u0005\u012c\u0000\u0000\u0af4\u0af5\u0003\u0118\u008c\u0000\u0af5" +
                    "\u0af6\u0005\u0005\u0000\u0000\u0af6\u0af7\u0005\u012c\u0000\u0000\u0af7" +
                    "\u0b7e\u0001\u0000\u0000\u0000\u0af8\u0af9\u0005\u0002\u0000\u0000\u0af9" +
                    "\u0afc\u0003\u00c2a\u0000\u0afa\u0afb\u0005\u0004\u0000\u0000\u0afb\u0afd" +
                    "\u0003\u00c2a\u0000\u0afc\u0afa\u0001\u0000\u0000\u0000\u0afd\u0afe\u0001" +
                    "\u0000\u0000\u0000\u0afe\u0afc\u0001\u0000\u0000\u0000\u0afe\u0aff\u0001" +
                    "\u0000\u0000\u0000\u0aff\u0b00\u0001\u0000\u0000\u0000\u0b00\u0b01\u0005" +
                    "\u0003\u0000\u0000\u0b01\u0b7e\u0001\u0000\u0000\u0000\u0b02\u0b03\u0005" +
                    "\u0002\u0000\u0000\u0b03\u0b04\u0003\"\u0011\u0000\u0b04\u0b05\u0005\u0003" +
                    "\u0000\u0000\u0b05\u0b7e\u0001\u0000\u0000\u0000\u0b06\u0b07\u0003\u0116" +
                    "\u008b\u0000\u0b07\u0b13\u0005\u0002\u0000\u0000\u0b08\u0b0a\u0003\u0092" +
                    "I\u0000\u0b09\u0b08\u0001\u0000\u0000\u0000\u0b09\u0b0a\u0001\u0000\u0000" +
                    "\u0000\u0b0a\u0b0b\u0001\u0000\u0000\u0000\u0b0b\u0b10\u0003\u00ceg\u0000" +
                    "\u0b0c\u0b0d\u0005\u0004\u0000\u0000\u0b0d\u0b0f\u0003\u00ceg\u0000\u0b0e" +
                    "\u0b0c\u0001\u0000\u0000\u0000\u0b0f\u0b12\u0001\u0000\u0000\u0000\u0b10" +
                    "\u0b0e\u0001\u0000\u0000\u0000\u0b10\u0b11\u0001\u0000\u0000\u0000\u0b11" +
                    "\u0b14\u0001\u0000\u0000\u0000\u0b12\u0b10\u0001\u0000\u0000\u0000\u0b13" +
                    "\u0b09\u0001\u0000\u0000\u0000\u0b13\u0b14\u0001\u0000\u0000\u0000\u0b14" +
                    "\u0b15\u0001\u0000\u0000\u0000\u0b15\u0b1c\u0005\u0003\u0000\u0000\u0b16" +
                    "\u0b17\u0005`\u0000\u0000\u0b17\u0b18\u0005\u0002\u0000\u0000\u0b18\u0b19" +
                    "\u0005\u011c\u0000\u0000\u0b19\u0b1a\u0003\u00d2i\u0000\u0b1a\u0b1b\u0005" +
                    "\u0003\u0000\u0000\u0b1b\u0b1d\u0001\u0000\u0000\u0000\u0b1c\u0b16\u0001" +
                    "\u0000\u0000\u0000\u0b1c\u0b1d\u0001\u0000\u0000\u0000\u0b1d\u0b20\u0001" +
                    "\u0000\u0000\u0000\u0b1e\u0b1f\u0007$\u0000\u0000\u0b1f\u0b21\u0005\u00a2" +
                    "\u0000\u0000\u0b20\u0b1e\u0001\u0000\u0000\u0000\u0b20\u0b21\u0001\u0000" +
                    "\u0000\u0000\u0b21\u0b24\u0001\u0000\u0000\u0000\u0b22\u0b23\u0005\u00ae" +
                    "\u0000\u0000\u0b23\u0b25\u0003\u010e\u0087\u0000\u0b24\u0b22\u0001\u0000" +
                    "\u0000\u0000\u0b24\u0b25\u0001\u0000\u0000\u0000\u0b25\u0b7e\u0001\u0000" +
                    "\u0000\u0000\u0b26\u0b27\u0003\u011e\u008f\u0000\u0b27\u0b28\u0005\u0135" +
                    "\u0000\u0000\u0b28\u0b29\u0003\u00ceg\u0000\u0b29\u0b7e\u0001\u0000\u0000" +
                    "\u0000\u0b2a\u0b2b\u0005\u0002\u0000\u0000\u0b2b\u0b2e\u0003\u011e\u008f" +
                    "\u0000\u0b2c\u0b2d\u0005\u0004\u0000\u0000\u0b2d\u0b2f\u0003\u011e\u008f" +
                    "\u0000\u0b2e\u0b2c\u0001\u0000\u0000\u0000\u0b2f\u0b30\u0001\u0000\u0000" +
                    "\u0000\u0b30\u0b2e\u0001\u0000\u0000\u0000\u0b30\u0b31\u0001\u0000\u0000" +
                    "\u0000\u0b31\u0b32\u0001\u0000\u0000\u0000\u0b32\u0b33\u0005\u0003\u0000" +
                    "\u0000\u0b33\u0b34\u0005\u0135\u0000\u0000\u0b34\u0b35\u0003\u00ceg\u0000" +
                    "\u0b35\u0b7e\u0001\u0000\u0000\u0000\u0b36\u0b7e\u0003\u011e\u008f\u0000" +
                    "\u0b37\u0b38\u0005\u0002\u0000\u0000\u0b38\u0b39\u0003\u00ceg\u0000\u0b39" +
                    "\u0b3a\u0005\u0003\u0000\u0000\u0b3a\u0b7e\u0001\u0000\u0000\u0000\u0b3b" +
                    "\u0b3c\u0005\\\u0000\u0000\u0b3c\u0b3d\u0005\u0002\u0000\u0000\u0b3d\u0b3e" +
                    "\u0003\u011e\u008f\u0000\u0b3e\u0b3f\u0005h\u0000\u0000\u0b3f\u0b40\u0003" +
                    "\u00d6k\u0000\u0b40\u0b41\u0005\u0003\u0000\u0000\u0b41\u0b7e\u0001\u0000" +
                    "\u0000\u0000\u0b42\u0b43\u0007%\u0000\u0000\u0b43\u0b44\u0005\u0002\u0000" +
                    "\u0000\u0b44\u0b45\u0003\u00d6k\u0000\u0b45\u0b46\u0007&\u0000\u0000\u0b46" +
                    "\u0b49\u0003\u00d6k\u0000\u0b47\u0b48\u0007\'\u0000\u0000\u0b48\u0b4a" +
                    "\u0003\u00d6k\u0000\u0b49\u0b47\u0001\u0000\u0000\u0000\u0b49\u0b4a\u0001" +
                    "\u0000\u0000\u0000\u0b4a\u0b4b\u0001\u0000\u0000\u0000\u0b4b\u0b4c\u0005" +
                    "\u0003\u0000\u0000\u0b4c\u0b7e\u0001\u0000\u0000\u0000\u0b4d\u0b4e\u0005" +
                    "\u0105\u0000\u0000\u0b4e\u0b50\u0005\u0002\u0000\u0000\u0b4f\u0b51\u0007" +
                    "(\u0000\u0000\u0b50\u0b4f\u0001\u0000\u0000\u0000\u0b50\u0b51\u0001\u0000" +
                    "\u0000\u0000\u0b51\u0b53\u0001\u0000\u0000\u0000\u0b52\u0b54\u0003\u00d6" +
                    "k\u0000\u0b53\u0b52\u0001\u0000\u0000\u0000\u0b53\u0b54\u0001\u0000\u0000" +
                    "\u0000\u0b54\u0b55\u0001\u0000\u0000\u0000\u0b55\u0b56\u0005h\u0000\u0000" +
                    "\u0b56\u0b57\u0003\u00d6k\u0000\u0b57\u0b58\u0005\u0003\u0000\u0000\u0b58" +
                    "\u0b7e\u0001\u0000\u0000\u0000\u0b59\u0b5a\u0005\u00b0\u0000\u0000\u0b5a" +
                    "\u0b5b\u0005\u0002\u0000\u0000\u0b5b\u0b5c\u0003\u00d6k\u0000\u0b5c\u0b5d" +
                    "\u0005\u00b9\u0000\u0000\u0b5d\u0b5e\u0003\u00d6k\u0000\u0b5e\u0b5f\u0005" +
                    "h\u0000\u0000\u0b5f\u0b62\u0003\u00d6k\u0000\u0b60\u0b61\u0005d\u0000" +
                    "\u0000\u0b61\u0b63\u0003\u00d6k\u0000\u0b62\u0b60\u0001\u0000\u0000\u0000" +
                    "\u0b62\u0b63\u0001\u0000\u0000\u0000\u0b63\u0b64\u0001\u0000\u0000\u0000" +
                    "\u0b64\u0b65\u0005\u0003\u0000\u0000\u0b65\u0b7e\u0001\u0000\u0000\u0000" +
                    "\u0b66\u0b67\u0007)\u0000\u0000\u0b67\u0b68\u0005\u0002\u0000\u0000\u0b68" +
                    "\u0b69\u0003\u00d6k\u0000\u0b69\u0b6a\u0005\u0003\u0000\u0000\u0b6a\u0b6b" +
                    "\u0005\u011f\u0000\u0000\u0b6b\u0b6c\u0005n\u0000\u0000\u0b6c\u0b6d\u0005" +
                    "\u0002\u0000\u0000\u0b6d\u0b6e\u0005\u00aa\u0000\u0000\u0b6e\u0b6f\u0005" +
                    "\u001b\u0000\u0000\u0b6f\u0b70\u0003Z-\u0000\u0b70\u0b77\u0005\u0003\u0000" +
                    "\u0000\u0b71\u0b72\u0005`\u0000\u0000\u0b72\u0b73\u0005\u0002\u0000\u0000" +
                    "\u0b73\u0b74\u0005\u011c\u0000\u0000\u0b74\u0b75\u0003\u00d2i\u0000\u0b75" +
                    "\u0b76\u0005\u0003\u0000\u0000\u0b76\u0b78\u0001\u0000\u0000\u0000\u0b77" +
                    "\u0b71\u0001\u0000\u0000\u0000\u0b77\u0b78\u0001\u0000\u0000\u0000\u0b78" +
                    "\u0b7b\u0001\u0000\u0000\u0000\u0b79\u0b7a\u0005\u00ae\u0000\u0000\u0b7a" +
                    "\u0b7c\u0003\u010e\u0087\u0000\u0b7b\u0b79\u0001\u0000\u0000\u0000\u0b7b" +
                    "\u0b7c\u0001\u0000\u0000\u0000\u0b7c\u0b7e\u0001\u0000\u0000\u0000\u0b7d" +
                    "\u0a8f\u0001\u0000\u0000\u0000\u0b7d\u0a91\u0001\u0000\u0000\u0000\u0b7d" +
                    "\u0a9a\u0001\u0000\u0000\u0000\u0b7d\u0aa3\u0001\u0000\u0000\u0000\u0b7d" +
                    "\u0aaf\u0001\u0000\u0000\u0000\u0b7d\u0abc\u0001\u0000\u0000\u0000\u0b7d" +
                    "\u0ac3\u0001\u0000\u0000\u0000\u0b7d\u0ad0\u0001\u0000\u0000\u0000\u0b7d" +
                    "\u0ad9\u0001\u0000\u0000\u0000\u0b7d\u0ae2\u0001\u0000\u0000\u0000\u0b7d" +
                    "\u0aeb\u0001\u0000\u0000\u0000\u0b7d\u0af2\u0001\u0000\u0000\u0000\u0b7d" +
                    "\u0af3\u0001\u0000\u0000\u0000\u0b7d\u0af4\u0001\u0000\u0000\u0000\u0b7d" +
                    "\u0af8\u0001\u0000\u0000\u0000\u0b7d\u0b02\u0001\u0000\u0000\u0000\u0b7d" +
                    "\u0b06\u0001\u0000\u0000\u0000\u0b7d\u0b26\u0001\u0000\u0000\u0000\u0b7d" +
                    "\u0b2a\u0001\u0000\u0000\u0000\u0b7d\u0b36\u0001\u0000\u0000\u0000\u0b7d" +
                    "\u0b37\u0001\u0000\u0000\u0000\u0b7d\u0b3b\u0001\u0000\u0000\u0000\u0b7d" +
                    "\u0b42\u0001\u0000\u0000\u0000\u0b7d\u0b4d\u0001\u0000\u0000\u0000\u0b7d" +
                    "\u0b59\u0001\u0000\u0000\u0000\u0b7d\u0b66\u0001\u0000\u0000\u0000\u0b7e" +
                    "\u0b89\u0001\u0000\u0000\u0000\u0b7f\u0b80\n\t\u0000\u0000\u0b80\u0b81" +
                    "\u0005\u0006\u0000\u0000\u0b81\u0b82\u0003\u00d6k\u0000\u0b82\u0b83\u0005" +
                    "\u0007\u0000\u0000\u0b83\u0b88\u0001\u0000\u0000\u0000\u0b84\u0b85\n\u0007" +
                    "\u0000\u0000\u0b85\u0b86\u0005\u0005\u0000\u0000\u0b86\u0b88\u0003\u011e" +
                    "\u008f\u0000\u0b87\u0b7f\u0001\u0000\u0000\u0000\u0b87\u0b84\u0001\u0000" +
                    "\u0000\u0000\u0b88\u0b8b\u0001\u0000\u0000\u0000\u0b89\u0b87\u0001\u0000" +
                    "\u0000\u0000\u0b89\u0b8a\u0001\u0000\u0000\u0000\u0b8a\u00db\u0001\u0000" +
                    "\u0000\u0000\u0b8b\u0b89\u0001\u0000\u0000\u0000\u0b8c\u0b99\u0005\u00a1" +
                    "\u0000\u0000\u0b8d\u0b99\u0003\u00e6s\u0000\u0b8e\u0b8f\u0003\u011e\u008f" +
                    "\u0000\u0b8f\u0b90\u0005\u0138\u0000\u0000\u0b90\u0b99\u0001\u0000\u0000" +
                    "\u0000\u0b91\u0b99\u0003\u0124\u0092\u0000\u0b92\u0b99\u0003\u00e4r\u0000" +
                    "\u0b93\u0b95\u0005\u0138\u0000\u0000\u0b94\u0b93\u0001\u0000\u0000\u0000" +
                    "\u0b95\u0b96\u0001\u0000\u0000\u0000\u0b96\u0b94\u0001\u0000\u0000\u0000" +
                    "\u0b96\u0b97\u0001\u0000\u0000\u0000\u0b97\u0b99\u0001\u0000\u0000\u0000" +
                    "\u0b98\u0b8c\u0001\u0000\u0000\u0000\u0b98\u0b8d\u0001\u0000\u0000\u0000" +
                    "\u0b98\u0b8e\u0001\u0000\u0000\u0000\u0b98\u0b91\u0001\u0000\u0000\u0000" +
                    "\u0b98\u0b92\u0001\u0000\u0000\u0000\u0b98\u0b94\u0001\u0000\u0000\u0000" +
                    "\u0b99\u00dd\u0001\u0000\u0000\u0000\u0b9a\u0b9b\u0007*\u0000\u0000\u0b9b" +
                    "\u00df\u0001\u0000\u0000\u0000\u0b9c\u0b9d\u0007+\u0000\u0000\u0b9d\u00e1" +
                    "\u0001\u0000\u0000\u0000\u0b9e\u0b9f\u0007,\u0000\u0000\u0b9f\u00e3\u0001" +
                    "\u0000\u0000\u0000\u0ba0\u0ba1\u0007-\u0000\u0000\u0ba1\u00e5\u0001\u0000" +
                    "\u0000\u0000\u0ba2\u0ba5\u0005}\u0000\u0000\u0ba3\u0ba6\u0003\u00e8t\u0000" +
                    "\u0ba4\u0ba6\u0003\u00ecv\u0000\u0ba5\u0ba3\u0001\u0000\u0000\u0000\u0ba5" +
                    "\u0ba4\u0001\u0000\u0000\u0000\u0ba5\u0ba6\u0001\u0000\u0000\u0000\u0ba6" +
                    "\u00e7\u0001\u0000\u0000\u0000\u0ba7\u0ba9\u0003\u00eau\u0000\u0ba8\u0baa" +
                    "\u0003\u00eew\u0000\u0ba9\u0ba8\u0001\u0000\u0000\u0000\u0ba9\u0baa\u0001" +
                    "\u0000\u0000\u0000\u0baa\u00e9\u0001\u0000\u0000\u0000\u0bab\u0bac\u0003" +
                    "\u00f0x\u0000\u0bac\u0bad\u0003\u011e\u008f\u0000\u0bad\u0baf\u0001\u0000" +
                    "\u0000\u0000\u0bae\u0bab\u0001\u0000\u0000\u0000\u0baf\u0bb0\u0001\u0000" +
                    "\u0000\u0000\u0bb0\u0bae\u0001\u0000\u0000\u0000\u0bb0\u0bb1\u0001\u0000" +
                    "\u0000\u0000\u0bb1\u00eb\u0001\u0000\u0000\u0000\u0bb2\u0bb5\u0003\u00ee" +
                    "w\u0000\u0bb3\u0bb6\u0003\u00eau\u0000\u0bb4\u0bb6\u0003\u00eew\u0000" +
                    "\u0bb5\u0bb3\u0001\u0000\u0000\u0000\u0bb5\u0bb4\u0001\u0000\u0000\u0000" +
                    "\u0bb5\u0bb6\u0001\u0000\u0000\u0000\u0bb6\u00ed\u0001\u0000\u0000\u0000" +
                    "\u0bb7\u0bb8\u0003\u00f0x\u0000\u0bb8\u0bb9\u0003\u011e\u008f\u0000\u0bb9" +
                    "\u0bba\u0005\u00ff\u0000\u0000\u0bba\u0bbb\u0003\u011e\u008f\u0000\u0bbb" +
                    "\u00ef\u0001\u0000\u0000\u0000\u0bbc\u0bbe\u0007.\u0000\u0000\u0bbd\u0bbc" +
                    "\u0001\u0000\u0000\u0000\u0bbd\u0bbe\u0001\u0000\u0000\u0000\u0bbe\u0bbf" +
                    "\u0001\u0000\u0000\u0000\u0bbf\u0bc0\u0007/\u0000\u0000\u0bc0\u00f1\u0001" +
                    "\u0000\u0000\u0000\u0bc1\u0bc5\u0005b\u0000\u0000\u0bc2\u0bc3\u0005\t" +
                    "\u0000\u0000\u0bc3\u0bc5\u0003\u011a\u008d\u0000\u0bc4\u0bc1\u0001\u0000" +
                    "\u0000\u0000\u0bc4\u0bc2\u0001\u0000\u0000\u0000\u0bc5\u00f3\u0001\u0000" +
                    "\u0000\u0000\u0bc6\u0bc7\u0005\u0012\u0000\u0000\u0bc7\u0bc8\u0005\u0126" +
                    "\u0000\u0000\u0bc8\u0bc9\u0003\u00f4z\u0000\u0bc9\u0bca\u0005\u0128\u0000" +
                    "\u0000\u0bca\u0bf5\u0001\u0000\u0000\u0000\u0bcb\u0bcc\u0005\u0094\u0000" +
                    "\u0000\u0bcc\u0bcd\u0005\u0126\u0000\u0000\u0bcd\u0bce\u0003\u00f4z\u0000" +
                    "\u0bce\u0bcf\u0005\u0004\u0000\u0000\u0bcf\u0bd0\u0003\u00f4z\u0000\u0bd0" +
                    "\u0bd1\u0005\u0128\u0000\u0000\u0bd1\u0bf5\u0001\u0000\u0000\u0000\u0bd2" +
                    "\u0bd9\u0005\u00ee\u0000\u0000\u0bd3\u0bd5\u0005\u0126\u0000\u0000\u0bd4" +
                    "\u0bd6\u0003\u0104\u0082\u0000\u0bd5\u0bd4\u0001\u0000\u0000\u0000\u0bd5" +
                    "\u0bd6\u0001\u0000\u0000\u0000\u0bd6\u0bd7\u0001\u0000\u0000\u0000\u0bd7" +
                    "\u0bda\u0005\u0128\u0000\u0000\u0bd8\u0bda\u0005\u0124\u0000\u0000\u0bd9" +
                    "\u0bd3\u0001\u0000\u0000\u0000\u0bd9\u0bd8\u0001\u0000\u0000\u0000\u0bda" +
                    "\u0bf5\u0001\u0000\u0000\u0000\u0bdb\u0bdc\u0005}\u0000\u0000\u0bdc\u0bdf" +
                    "\u00070\u0000\u0000\u0bdd\u0bde\u0005\u00ff\u0000\u0000\u0bde\u0be0\u0005" +
                    "\u009a\u0000\u0000\u0bdf\u0bdd\u0001\u0000\u0000\u0000\u0bdf\u0be0\u0001" +
                    "\u0000\u0000\u0000\u0be0\u0bf5\u0001\u0000\u0000\u0000\u0be1\u0be2\u0005" +
                    "}\u0000\u0000\u0be2\u0be5\u00071\u0000\u0000\u0be3\u0be4\u0005\u00ff\u0000" +
                    "\u0000\u0be4\u0be6\u00072\u0000\u0000\u0be5\u0be3\u0001\u0000\u0000\u0000" +
                    "\u0be5\u0be6\u0001\u0000\u0000\u0000\u0be6\u0bf5\u0001\u0000\u0000\u0000" +
                    "\u0be7\u0bf2\u0003\u011e\u008f\u0000\u0be8\u0be9\u0005\u0002\u0000\u0000" +
                    "\u0be9\u0bee\u0005\u013c\u0000\u0000\u0bea\u0beb\u0005\u0004\u0000\u0000" +
                    "\u0beb\u0bed\u0005\u013c\u0000\u0000\u0bec\u0bea\u0001\u0000\u0000\u0000" +
                    "\u0bed\u0bf0\u0001\u0000\u0000\u0000\u0bee\u0bec\u0001\u0000\u0000\u0000" +
                    "\u0bee\u0bef\u0001\u0000\u0000\u0000\u0bef\u0bf1\u0001\u0000\u0000\u0000" +
                    "\u0bf0\u0bee\u0001\u0000\u0000\u0000\u0bf1\u0bf3\u0005\u0003\u0000\u0000" +
                    "\u0bf2\u0be8\u0001\u0000\u0000\u0000\u0bf2\u0bf3\u0001\u0000\u0000\u0000" +
                    "\u0bf3\u0bf5\u0001\u0000\u0000\u0000\u0bf4\u0bc6\u0001\u0000\u0000\u0000" +
                    "\u0bf4\u0bcb\u0001\u0000\u0000\u0000\u0bf4\u0bd2\u0001\u0000\u0000\u0000" +
                    "\u0bf4\u0bdb\u0001\u0000\u0000\u0000\u0bf4\u0be1\u0001\u0000\u0000\u0000" +
                    "\u0bf4\u0be7\u0001\u0000\u0000\u0000\u0bf5\u00f5\u0001\u0000\u0000\u0000" +
                    "\u0bf6\u0bfb\u0003\u00f8|\u0000\u0bf7\u0bf8\u0005\u0004\u0000\u0000\u0bf8" +
                    "\u0bfa\u0003\u00f8|\u0000\u0bf9\u0bf7\u0001\u0000\u0000\u0000\u0bfa\u0bfd" +
                    "\u0001\u0000\u0000\u0000\u0bfb\u0bf9\u0001\u0000\u0000\u0000\u0bfb\u0bfc" +
                    "\u0001\u0000\u0000\u0000\u0bfc\u00f7\u0001\u0000\u0000\u0000\u0bfd\u0bfb" +
                    "\u0001\u0000\u0000\u0000\u0bfe\u0bff\u0003\u00b8\\\u0000\u0bff\u0c02\u0003" +
                    "\u00f4z\u0000\u0c00\u0c01\u0005\u00a0\u0000\u0000\u0c01\u0c03\u0005\u00a1" +
                    "\u0000\u0000\u0c02\u0c00\u0001\u0000\u0000\u0000\u0c02\u0c03\u0001\u0000" +
                    "\u0000\u0000\u0c03\u0c05\u0001\u0000\u0000\u0000\u0c04\u0c06\u0003\u00fa" +
                    "}\u0000\u0c05\u0c04\u0001\u0000\u0000\u0000\u0c05\u0c06\u0001\u0000\u0000" +
                    "\u0000\u0c06\u0c08\u0001\u0000\u0000\u0000\u0c07\u0c09\u0003 \u0010\u0000" +
                    "\u0c08\u0c07\u0001\u0000\u0000\u0000\u0c08\u0c09\u0001\u0000\u0000\u0000" +
                    "\u0c09\u0c0b\u0001\u0000\u0000\u0000\u0c0a\u0c0c\u0003\u00f2y\u0000\u0c0b" +
                    "\u0c0a\u0001\u0000\u0000\u0000\u0c0b\u0c0c\u0001\u0000\u0000\u0000\u0c0c" +
                    "\u00f9\u0001\u0000\u0000\u0000\u0c0d\u0c0e\u0005D\u0000\u0000\u0c0e\u0c0f" +
                    "\u0003\u00ceg\u0000\u0c0f\u00fb\u0001\u0000\u0000\u0000\u0c10\u0c15\u0003" +
                    "\u00fe\u007f\u0000\u0c11\u0c12\u0005\u0004\u0000\u0000\u0c12\u0c14\u0003" +
                    "\u00fe\u007f\u0000\u0c13\u0c11\u0001\u0000\u0000\u0000\u0c14\u0c17\u0001" +
                    "\u0000\u0000\u0000\u0c15\u0c13\u0001\u0000\u0000\u0000\u0c15\u0c16\u0001" +
                    "\u0000\u0000\u0000\u0c16\u00fd\u0001\u0000\u0000\u0000\u0c17\u0c15\u0001" +
                    "\u0000\u0000\u0000\u0c18\u0c19\u0003\u011a\u008d\u0000\u0c19\u0c1c\u0003" +
                    "\u00f4z\u0000\u0c1a\u0c1b\u0005\u00a0\u0000\u0000\u0c1b\u0c1d\u0005\u00a1" +
                    "\u0000\u0000\u0c1c\u0c1a\u0001\u0000\u0000\u0000\u0c1c\u0c1d\u0001\u0000" +
                    "\u0000\u0000\u0c1d\u0c1f\u0001\u0000\u0000\u0000\u0c1e\u0c20\u0003 \u0010" +
                    "\u0000\u0c1f\u0c1e\u0001\u0000\u0000\u0000\u0c1f\u0c20\u0001\u0000\u0000" +
                    "\u0000\u0c20\u00ff\u0001\u0000\u0000\u0000\u0c21\u0c26\u0003\u0102\u0081" +
                    "\u0000\u0c22\u0c23\u0005\u0004\u0000\u0000\u0c23\u0c25\u0003\u0102\u0081" +
                    "\u0000\u0c24\u0c22\u0001\u0000\u0000\u0000\u0c25\u0c28\u0001\u0000\u0000" +
                    "\u0000\u0c26\u0c24\u0001\u0000\u0000\u0000\u0c26\u0c27\u0001\u0000\u0000" +
                    "\u0000\u0c27\u0101\u0001\u0000\u0000\u0000\u0c28\u0c26\u0001\u0000\u0000" +
                    "\u0000\u0c29\u0c2a\u0003\u011a\u008d\u0000\u0c2a\u0c2d\u0003\u00f4z\u0000" +
                    "\u0c2b\u0c2c\u0005\u00a0\u0000\u0000\u0c2c\u0c2e\u0005\u00a1\u0000\u0000" +
                    "\u0c2d\u0c2b\u0001\u0000\u0000\u0000\u0c2d\u0c2e\u0001\u0000\u0000\u0000" +
                    "\u0c2e\u0c30\u0001\u0000\u0000\u0000\u0c2f\u0c31\u0003\u00fa}\u0000\u0c30" +
                    "\u0c2f\u0001\u0000\u0000\u0000\u0c30\u0c31\u0001\u0000\u0000\u0000\u0c31" +
                    "\u0c33\u0001\u0000\u0000\u0000\u0c32\u0c34\u0003 \u0010\u0000\u0c33\u0c32" +
                    "\u0001\u0000\u0000\u0000\u0c33\u0c34\u0001\u0000\u0000\u0000\u0c34\u0103" +
                    "\u0001\u0000\u0000\u0000\u0c35\u0c3a\u0003\u0106\u0083\u0000\u0c36\u0c37" +
                    "\u0005\u0004\u0000\u0000\u0c37\u0c39\u0003\u0106\u0083\u0000\u0c38\u0c36" +
                    "\u0001\u0000\u0000\u0000\u0c39\u0c3c\u0001\u0000\u0000\u0000\u0c3a\u0c38" +
                    "\u0001\u0000\u0000\u0000\u0c3a\u0c3b\u0001\u0000\u0000\u0000\u0c3b\u0105" +
                    "\u0001\u0000\u0000\u0000\u0c3c\u0c3a\u0001\u0000\u0000\u0000\u0c3d\u0c3f" +
                    "\u0003\u011e\u008f\u0000\u0c3e\u0c40\u0005\u0134\u0000\u0000\u0c3f\u0c3e" +
                    "\u0001\u0000\u0000\u0000\u0c3f\u0c40\u0001\u0000\u0000\u0000\u0c40\u0c41" +
                    "\u0001\u0000\u0000\u0000\u0c41\u0c44\u0003\u00f4z\u0000\u0c42\u0c43\u0005" +
                    "\u00a0\u0000\u0000\u0c43\u0c45\u0005\u00a1\u0000\u0000\u0c44\u0c42\u0001" +
                    "\u0000\u0000\u0000\u0c44\u0c45\u0001\u0000\u0000\u0000\u0c45\u0c47\u0001" +
                    "\u0000\u0000\u0000\u0c46\u0c48\u0003 \u0010\u0000\u0c47\u0c46\u0001\u0000" +
                    "\u0000\u0000\u0c47\u0c48\u0001\u0000\u0000\u0000\u0c48\u0107\u0001\u0000" +
                    "\u0000\u0000\u0c49\u0c4a\u0005\u011b\u0000\u0000\u0c4a\u0c4b\u0003\u00ce" +
                    "g\u0000\u0c4b\u0c4c\u0005\u00fa\u0000\u0000\u0c4c\u0c4d\u0003\u00ceg\u0000" +
                    "\u0c4d\u0109\u0001\u0000\u0000\u0000\u0c4e\u0c4f\u0005\u011d\u0000\u0000" +
                    "\u0c4f\u0c54\u0003\u010c\u0086\u0000\u0c50\u0c51\u0005\u0004\u0000\u0000" +
                    "\u0c51\u0c53\u0003\u010c\u0086\u0000\u0c52\u0c50\u0001\u0000\u0000\u0000" +
                    "\u0c53\u0c56\u0001\u0000\u0000\u0000\u0c54\u0c52\u0001\u0000\u0000\u0000" +
                    "\u0c54\u0c55\u0001\u0000\u0000\u0000\u0c55\u010b\u0001\u0000\u0000\u0000" +
                    "\u0c56\u0c54\u0001\u0000\u0000\u0000\u0c57\u0c58\u0003\u011a\u008d\u0000" +
                    "\u0c58\u0c59\u0005\u0013\u0000\u0000\u0c59\u0c5a\u0003\u010e\u0087\u0000" +
                    "\u0c5a\u010d\u0001\u0000\u0000\u0000\u0c5b\u0c8a\u0003\u011a\u008d\u0000" +
                    "\u0c5c\u0c5d\u0005\u0002\u0000\u0000\u0c5d\u0c5e\u0003\u011a\u008d\u0000" +
                    "\u0c5e\u0c5f\u0005\u0003\u0000\u0000\u0c5f\u0c8a\u0001\u0000\u0000\u0000" +
                    "\u0c60\u0c83\u0005\u0002\u0000\u0000\u0c61\u0c62\u0005%\u0000\u0000\u0c62" +
                    "\u0c63\u0005\u001b\u0000\u0000\u0c63\u0c68\u0003\u00ceg\u0000\u0c64\u0c65" +
                    "\u0005\u0004\u0000\u0000\u0c65\u0c67\u0003\u00ceg\u0000\u0c66\u0c64\u0001" +
                    "\u0000\u0000\u0000\u0c67\u0c6a\u0001\u0000\u0000\u0000\u0c68\u0c66\u0001" +
                    "\u0000\u0000\u0000\u0c68\u0c69\u0001\u0000\u0000\u0000\u0c69\u0c84\u0001" +
                    "\u0000\u0000\u0000\u0c6a\u0c68\u0001\u0000\u0000\u0000\u0c6b\u0c6c\u0007" +
                    "3\u0000\u0000\u0c6c\u0c6d\u0005\u001b\u0000\u0000\u0c6d\u0c72\u0003\u00ce" +
                    "g\u0000\u0c6e\u0c6f\u0005\u0004\u0000\u0000\u0c6f\u0c71\u0003\u00ceg\u0000" +
                    "\u0c70\u0c6e\u0001\u0000\u0000\u0000\u0c71\u0c74\u0001\u0000\u0000\u0000" +
                    "\u0c72\u0c70\u0001\u0000\u0000\u0000\u0c72\u0c73\u0001\u0000\u0000\u0000" +
                    "\u0c73\u0c76\u0001\u0000\u0000\u0000\u0c74\u0c72\u0001\u0000\u0000\u0000" +
                    "\u0c75\u0c6b\u0001\u0000\u0000\u0000\u0c75\u0c76\u0001\u0000\u0000\u0000" +
                    "\u0c76\u0c81\u0001\u0000\u0000\u0000\u0c77\u0c78\u00074\u0000\u0000\u0c78" +
                    "\u0c79\u0005\u001b\u0000\u0000\u0c79\u0c7e\u0003Z-\u0000\u0c7a\u0c7b\u0005" +
                    "\u0004\u0000\u0000\u0c7b\u0c7d\u0003Z-\u0000\u0c7c\u0c7a\u0001\u0000\u0000" +
                    "\u0000\u0c7d\u0c80\u0001\u0000\u0000\u0000\u0c7e\u0c7c\u0001\u0000\u0000" +
                    "\u0000\u0c7e\u0c7f\u0001\u0000\u0000\u0000\u0c7f\u0c82\u0001\u0000\u0000" +
                    "\u0000\u0c80\u0c7e\u0001\u0000\u0000\u0000\u0c81\u0c77\u0001\u0000\u0000" +
                    "\u0000\u0c81\u0c82\u0001\u0000\u0000\u0000\u0c82\u0c84\u0001\u0000\u0000" +
                    "\u0000\u0c83\u0c61\u0001\u0000\u0000\u0000\u0c83\u0c75\u0001\u0000\u0000" +
                    "\u0000\u0c84\u0c86\u0001\u0000\u0000\u0000\u0c85\u0c87\u0003\u0110\u0088" +
                    "\u0000\u0c86\u0c85\u0001\u0000\u0000\u0000\u0c86\u0c87\u0001\u0000\u0000" +
                    "\u0000\u0c87\u0c88\u0001\u0000\u0000\u0000\u0c88\u0c8a\u0005\u0003\u0000" +
                    "\u0000\u0c89\u0c5b\u0001\u0000\u0000\u0000\u0c89\u0c5c\u0001\u0000\u0000" +
                    "\u0000\u0c89\u0c60\u0001\u0000\u0000\u0000\u0c8a\u010f\u0001\u0000\u0000" +
                    "\u0000\u0c8b\u0c8c\u0005\u00c2\u0000\u0000\u0c8c\u0c9c\u0003\u0112\u0089" +
                    "\u0000\u0c8d\u0c8e\u0005\u00d8\u0000\u0000\u0c8e\u0c9c\u0003\u0112\u0089" +
                    "\u0000\u0c8f\u0c90\u0005\u00c2\u0000\u0000\u0c90\u0c91\u0005\u0017\u0000" +
                    "\u0000\u0c91\u0c92\u0003\u0112\u0089\u0000\u0c92\u0c93\u0005\r\u0000\u0000" +
                    "\u0c93\u0c94\u0003\u0112\u0089\u0000\u0c94\u0c9c\u0001\u0000\u0000\u0000" +
                    "\u0c95\u0c96\u0005\u00d8\u0000\u0000\u0c96\u0c97\u0005\u0017\u0000\u0000" +
                    "\u0c97\u0c98\u0003\u0112\u0089\u0000\u0c98\u0c99\u0005\r\u0000\u0000\u0c99" +
                    "\u0c9a\u0003\u0112\u0089\u0000\u0c9a\u0c9c\u0001\u0000\u0000\u0000\u0c9b" +
                    "\u0c8b\u0001\u0000\u0000\u0000\u0c9b\u0c8d\u0001\u0000\u0000\u0000\u0c9b" +
                    "\u0c8f\u0001\u0000\u0000\u0000\u0c9b\u0c95\u0001\u0000\u0000\u0000\u0c9c" +
                    "\u0111\u0001\u0000\u0000\u0000\u0c9d\u0c9e\u0005\u010b\u0000\u0000\u0c9e" +
                    "\u0ca5\u00075\u0000\u0000\u0c9f\u0ca0\u00057\u0000\u0000\u0ca0\u0ca5\u0005" +
                    "\u00d7\u0000\u0000\u0ca1\u0ca2\u0003\u00ceg\u0000\u0ca2\u0ca3\u00075\u0000" +
                    "\u0000\u0ca3\u0ca5\u0001\u0000\u0000\u0000\u0ca4\u0c9d\u0001\u0000\u0000" +
                    "\u0000\u0ca4\u0c9f\u0001\u0000\u0000\u0000\u0ca4\u0ca1\u0001\u0000\u0000" +
                    "\u0000\u0ca5\u0113\u0001\u0000\u0000\u0000\u0ca6\u0cab\u0003\u0118\u008c" +
                    "\u0000\u0ca7\u0ca8\u0005\u0004\u0000\u0000\u0ca8\u0caa\u0003\u0118\u008c" +
                    "\u0000\u0ca9\u0ca7\u0001\u0000\u0000\u0000\u0caa\u0cad\u0001\u0000\u0000" +
                    "\u0000\u0cab\u0ca9\u0001\u0000\u0000\u0000\u0cab\u0cac\u0001\u0000\u0000" +
                    "\u0000\u0cac\u0115\u0001\u0000\u0000\u0000\u0cad\u0cab\u0001\u0000\u0000" +
                    "\u0000\u0cae\u0cb3\u0003\u0118\u008c\u0000\u0caf\u0cb3\u0005`\u0000\u0000" +
                    "\u0cb0\u0cb3\u0005\u0087\u0000\u0000\u0cb1\u0cb3\u0005\u00d1\u0000\u0000" +
                    "\u0cb2\u0cae\u0001\u0000\u0000\u0000\u0cb2\u0caf\u0001\u0000\u0000\u0000" +
                    "\u0cb2\u0cb0\u0001\u0000\u0000\u0000\u0cb2\u0cb1\u0001\u0000\u0000\u0000" +
                    "\u0cb3\u0117\u0001\u0000\u0000\u0000\u0cb4\u0cb9\u0003\u011e\u008f\u0000" +
                    "\u0cb5\u0cb6\u0005\u0005\u0000\u0000\u0cb6\u0cb8\u0003\u011e\u008f\u0000" +
                    "\u0cb7\u0cb5\u0001\u0000\u0000\u0000\u0cb8\u0cbb\u0001\u0000\u0000\u0000" +
                    "\u0cb9\u0cb7\u0001\u0000\u0000\u0000\u0cb9\u0cba\u0001\u0000\u0000\u0000" +
                    "\u0cba\u0119\u0001\u0000\u0000\u0000\u0cbb\u0cb9\u0001\u0000\u0000\u0000" +
                    "\u0cbc\u0cbd\u0003\u011e\u008f\u0000\u0cbd\u0cbe\u0003\u011c\u008e\u0000" +
                    "\u0cbe\u011b\u0001\u0000\u0000\u0000\u0cbf\u0cc0\u0005\u012b\u0000\u0000" +
                    "\u0cc0\u0cc2\u0003\u011e\u008f\u0000\u0cc1\u0cbf\u0001\u0000\u0000\u0000" +
                    "\u0cc2\u0cc3\u0001\u0000\u0000\u0000\u0cc3\u0cc1\u0001\u0000\u0000\u0000" +
                    "\u0cc3\u0cc4\u0001\u0000\u0000\u0000\u0cc4\u0cc7\u0001\u0000\u0000\u0000" +
                    "\u0cc5\u0cc7\u0001\u0000\u0000\u0000\u0cc6\u0cc1\u0001\u0000\u0000\u0000" +
                    "\u0cc6\u0cc5\u0001\u0000\u0000\u0000\u0cc7\u011d\u0001\u0000\u0000\u0000" +
                    "\u0cc8\u0ccc\u0003\u0120\u0090\u0000\u0cc9\u0cca\u0004\u008f\u0010\u0000" +
                    "\u0cca\u0ccc\u0003\u012a\u0095\u0000\u0ccb\u0cc8\u0001\u0000\u0000\u0000" +
                    "\u0ccb\u0cc9\u0001\u0000\u0000\u0000\u0ccc\u011f\u0001\u0000\u0000\u0000" +
                    "\u0ccd\u0cd4\u0005\u0142\u0000\u0000\u0cce\u0cd4\u0003\u0122\u0091\u0000" +
                    "\u0ccf\u0cd0\u0004\u0090\u0011\u0000\u0cd0\u0cd4\u0003\u0128\u0094\u0000" +
                    "\u0cd1\u0cd2\u0004\u0090\u0012\u0000\u0cd2\u0cd4\u0003\u012c\u0096\u0000" +
                    "\u0cd3\u0ccd\u0001\u0000\u0000\u0000\u0cd3\u0cce\u0001\u0000\u0000\u0000" +
                    "\u0cd3\u0ccf\u0001\u0000\u0000\u0000\u0cd3\u0cd1\u0001\u0000\u0000\u0000" +
                    "\u0cd4\u0121\u0001\u0000\u0000\u0000\u0cd5\u0cd6\u0005\u0143\u0000\u0000" +
                    "\u0cd6\u0123\u0001\u0000\u0000\u0000\u0cd7\u0cd9\u0004\u0092\u0013\u0000" +
                    "\u0cd8\u0cda\u0005\u012b\u0000\u0000\u0cd9\u0cd8\u0001\u0000\u0000\u0000" +
                    "\u0cd9\u0cda\u0001\u0000\u0000\u0000\u0cda\u0cdb\u0001\u0000\u0000\u0000" +
                    "\u0cdb\u0d03\u0005\u013d\u0000\u0000\u0cdc\u0cde\u0004\u0092\u0014\u0000" +
                    "\u0cdd\u0cdf\u0005\u012b\u0000\u0000\u0cde\u0cdd\u0001\u0000\u0000\u0000" +
                    "\u0cde\u0cdf\u0001\u0000\u0000\u0000\u0cdf\u0ce0\u0001\u0000\u0000\u0000" +
                    "\u0ce0\u0d03\u0005\u013e\u0000\u0000\u0ce1\u0ce3\u0004\u0092\u0015\u0000" +
                    "\u0ce2\u0ce4\u0005\u012b\u0000\u0000\u0ce3\u0ce2\u0001\u0000\u0000\u0000" +
                    "\u0ce3\u0ce4\u0001\u0000\u0000\u0000\u0ce4\u0ce5\u0001\u0000\u0000\u0000" +
                    "\u0ce5\u0d03\u00076\u0000\u0000\u0ce6\u0ce8\u0005\u012b\u0000\u0000\u0ce7" +
                    "\u0ce6\u0001\u0000\u0000\u0000\u0ce7\u0ce8\u0001\u0000\u0000\u0000\u0ce8" +
                    "\u0ce9\u0001\u0000\u0000\u0000\u0ce9\u0d03\u0005\u013c\u0000\u0000\u0cea" +
                    "\u0cec\u0005\u012b\u0000\u0000\u0ceb\u0cea\u0001\u0000\u0000\u0000\u0ceb" +
                    "\u0cec\u0001\u0000\u0000\u0000\u0cec\u0ced\u0001\u0000\u0000\u0000\u0ced" +
                    "\u0d03\u0005\u0139\u0000\u0000\u0cee\u0cf0\u0005\u012b\u0000\u0000\u0cef" +
                    "\u0cee\u0001\u0000\u0000\u0000\u0cef\u0cf0\u0001\u0000\u0000\u0000\u0cf0" +
                    "\u0cf1\u0001\u0000\u0000\u0000\u0cf1\u0d03\u0005\u013a\u0000\u0000\u0cf2" +
                    "\u0cf4\u0005\u012b\u0000\u0000\u0cf3\u0cf2\u0001\u0000\u0000\u0000\u0cf3" +
                    "\u0cf4\u0001\u0000\u0000\u0000\u0cf4\u0cf5\u0001\u0000\u0000\u0000\u0cf5" +
                    "\u0d03\u0005\u013b\u0000\u0000\u0cf6\u0cf8\u0005\u012b\u0000\u0000\u0cf7" +
                    "\u0cf6\u0001\u0000\u0000\u0000\u0cf7\u0cf8\u0001\u0000\u0000\u0000\u0cf8" +
                    "\u0cf9\u0001\u0000\u0000\u0000\u0cf9\u0d03\u0005\u0140\u0000\u0000\u0cfa" +
                    "\u0cfc\u0005\u012b\u0000\u0000\u0cfb\u0cfa\u0001\u0000\u0000\u0000\u0cfb" +
                    "\u0cfc\u0001\u0000\u0000\u0000\u0cfc\u0cfd\u0001\u0000\u0000\u0000\u0cfd" +
                    "\u0d03\u0005\u013f\u0000\u0000\u0cfe\u0d00\u0005\u012b\u0000\u0000\u0cff" +
                    "\u0cfe\u0001\u0000\u0000\u0000\u0cff\u0d00\u0001\u0000\u0000\u0000\u0d00" +
                    "\u0d01\u0001\u0000\u0000\u0000\u0d01\u0d03\u0005\u0141\u0000\u0000\u0d02" +
                    "\u0cd7\u0001\u0000\u0000\u0000\u0d02\u0cdc\u0001\u0000\u0000\u0000\u0d02" +
                    "\u0ce1\u0001\u0000\u0000\u0000\u0d02\u0ce7\u0001\u0000\u0000\u0000\u0d02" +
                    "\u0ceb\u0001\u0000\u0000\u0000\u0d02\u0cef\u0001\u0000\u0000\u0000\u0d02" +
                    "\u0cf3\u0001\u0000\u0000\u0000\u0d02\u0cf7\u0001\u0000\u0000\u0000\u0d02" +
                    "\u0cfb\u0001\u0000\u0000\u0000\u0d02\u0cff\u0001\u0000\u0000\u0000\u0d03" +
                    "\u0125\u0001\u0000\u0000\u0000\u0d04\u0d05\u0005\u0109\u0000\u0000\u0d05" +
                    "\u0d10\u0003\u00f4z\u0000\u0d06\u0d10\u0003 \u0010\u0000\u0d07\u0d10\u0003" +
                    "\u00f2y\u0000\u0d08\u0d09\u00077\u0000\u0000\u0d09\u0d0a\u0005\u00a0\u0000" +
                    "\u0000\u0d0a\u0d10\u0005\u00a1\u0000\u0000\u0d0b\u0d0c\u0005\u00e2\u0000" +
                    "\u0000\u0d0c\u0d10\u0003\u00fa}\u0000\u0d0d\u0d0e\u0005P\u0000\u0000\u0d0e" +
                    "\u0d10\u0005D\u0000\u0000\u0d0f\u0d04\u0001\u0000\u0000\u0000\u0d0f\u0d06" +
                    "\u0001\u0000\u0000\u0000\u0d0f\u0d07\u0001\u0000\u0000\u0000\u0d0f\u0d08" +
                    "\u0001\u0000\u0000\u0000\u0d0f\u0d0b\u0001\u0000\u0000\u0000\u0d0f\u0d0d" +
                    "\u0001\u0000\u0000\u0000\u0d10\u0127\u0001\u0000\u0000\u0000\u0d11\u0d12" +
                    "\u00078\u0000\u0000\u0d12\u0129\u0001\u0000\u0000\u0000\u0d13\u0d14\u0007" +
                    "9\u0000\u0000\u0d14\u012b\u0001\u0000\u0000\u0000\u0d15\u0d16\u0007:\u0000" +
                    "\u0000\u0d16\u012d\u0001\u0000\u0000\u0000\u01bb\u0132\u014b\u0158\u015f" +
                    "\u0167\u0169\u017d\u0181\u0187\u018a\u018d\u0194\u0197\u019b\u019e\u01a5" +
                    "\u01b0\u01b2\u01ba\u01bd\u01c1\u01c4\u01ca\u01d5\u01db\u01e0\u0202\u020f" +
                    "\u0228\u0231\u0235\u023b\u023f\u0244\u024a\u0256\u025e\u0264\u0271\u0276" +
                    "\u0286\u028d\u0291\u0297\u02a6\u02aa\u02b0\u02b6\u02b9\u02bc\u02c2\u02c6" +
                    "\u02ce\u02d0\u02d9\u02dc\u02e5\u02ea\u02f0\u02f7\u02fa\u0300\u030b\u030e" +
                    "\u0312\u0317\u031c\u0323\u0326\u0329\u0330\u0335\u033e\u0346\u034c\u034f" +
                    "\u0352\u0358\u035c\u0361\u0364\u0368\u036a\u0372\u037a\u037d\u0382\u0388" +
                    "\u038e\u0391\u0395\u0398\u039c\u03b8\u03bb\u03bf\u03c5\u03c8\u03cb\u03d1" +
                    "\u03d9\u03de\u03e4\u03ea\u03f2\u03f9\u0401\u0412\u0420\u0423\u0429\u0432" +
                    "\u043b\u0443\u0448\u044d\u0454\u045a\u045f\u0467\u046a\u0476\u047a\u0481" +
                    "\u04f5\u04fd\u0505\u050e\u0518\u051c\u051f\u0525\u052b\u0537\u0543\u0548" +
                    "\u0551\u0559\u0560\u0562\u0565\u056a\u056e\u0573\u0576\u057b\u0580\u0583" +
                    "\u0588\u058c\u0591\u0593\u0597\u05a0\u05a8\u05ae\u05b9\u05c0\u05c9\u05ce" +
                    "\u05d1\u05e7\u05e9\u05f2\u05f9\u05fc\u0603\u0607\u060d\u0615\u0620\u062b" +
                    "\u0632\u0638\u0644\u064b\u0652\u065e\u0666\u066c\u066f\u0678\u067b\u0684" +
                    "\u0687\u0690\u0693\u069c\u069f\u06a2\u06a7\u06a9\u06ad\u06b9\u06c0\u06c7" +
                    "\u06ca\u06cc\u06d8\u06dc\u06e0\u06e6\u06ea\u06f2\u06f6\u06f9\u06fc\u06ff" +
                    "\u0703\u0707\u070c\u0710\u0713\u0716\u0719\u071d\u0722\u0726\u0729\u072c" +
                    "\u072f\u0731\u0737\u073e\u0743\u0746\u0749\u074d\u0757\u075b\u075d\u0760" +
                    "\u0764\u076a\u076e\u0779\u0783\u078f\u079e\u07a3\u07aa\u07ba\u07bf\u07cc" +
                    "\u07d1\u07d9\u07df\u07e3\u07e6\u07ed\u07f3\u07fc\u0806\u0815\u081a\u081c" +
                    "\u0820\u0829\u0836\u083b\u083f\u0847\u084a\u084e\u085c\u0869\u086e\u0872" +
                    "\u0875\u087a\u0883\u0886\u088b\u0892\u0895\u089a\u08a0\u08a6\u08aa\u08b0" +
                    "\u08b4\u08b7\u08bc\u08bf\u08c4\u08c8\u08cb\u08ce\u08d4\u08d9\u08e0\u08e3" +
                    "\u08f5\u08f7\u08fa\u0905\u090e\u0915\u091d\u0924\u0928\u092b\u0933\u093b" +
                    "\u0941\u0949\u0955\u0958\u095e\u0962\u0964\u096d\u0979\u097b\u0982\u0989" +
                    "\u098f\u0995\u0997\u099e\u09a6\u09ae\u09b4\u09b9\u09c0\u09c6\u09ca\u09cc" +
                    "\u09d3\u09dc\u09e3\u09ed\u09f2\u09f6\u09ff\u0a0c\u0a0e\u0a16\u0a18\u0a1c" +
                    "\u0a24\u0a2d\u0a33\u0a3b\u0a40\u0a4c\u0a51\u0a54\u0a5a\u0a5e\u0a63\u0a68" +
                    "\u0a6d\u0a73\u0a88\u0a8a\u0aa7\u0aab\u0ab4\u0ab8\u0aca\u0acd\u0ad5\u0ade" +
                    "\u0ae7\u0afe\u0b09\u0b10\u0b13\u0b1c\u0b20\u0b24\u0b30\u0b49\u0b50\u0b53" +
                    "\u0b62\u0b77\u0b7b\u0b7d\u0b87\u0b89\u0b96\u0b98\u0ba5\u0ba9\u0bb0\u0bb5" +
                    "\u0bbd\u0bc4\u0bd5\u0bd9\u0bdf\u0be5\u0bee\u0bf2\u0bf4\u0bfb\u0c02\u0c05" +
                    "\u0c08\u0c0b\u0c15\u0c1c\u0c1f\u0c26\u0c2d\u0c30\u0c33\u0c3a\u0c3f\u0c44" +
                    "\u0c47\u0c54\u0c68\u0c72\u0c75\u0c7e\u0c81\u0c83\u0c86\u0c89\u0c9b\u0ca4" +
                    "\u0cab\u0cb2\u0cb9\u0cc3\u0cc6\u0ccb\u0cd3\u0cd9\u0cde\u0ce3\u0ce7\u0ceb" +
                    "\u0cef\u0cf3\u0cf7\u0cfb\u0cff\u0d02\u0d0f";
    public static final String _serializedATN = Utils.join(
            new String[]{
                    _serializedATNSegment0,
                    _serializedATNSegment1
            },
            ""
    );
    public static final ATN _ATN =
            new ATNDeserializer().deserialize(_serializedATN.toCharArray());

    static {
        RuntimeMetaData.checkVersion("4.10.1", RuntimeMetaData.VERSION);
    }

    static {
        tokenNames = new String[_SYMBOLIC_NAMES.length];
        for (int i = 0; i < tokenNames.length; i++) {
            tokenNames[i] = VOCABULARY.getLiteralName(i);
            if (tokenNames[i] == null) {
                tokenNames[i] = VOCABULARY.getSymbolicName(i);
            }

            if (tokenNames[i] == null) {
                tokenNames[i] = "<INVALID>";
            }
        }
    }

    static {
        _decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
        for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
            _decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
        }
    }

    /**
     * When false, INTERSECT is given the greater precedence over the other set
     * operations (UNION, EXCEPT and MINUS) as per the SQL standard.
     */
    public boolean legacy_setops_precedence_enabled = false;
    /**
     * When false, a literal with an exponent would be converted into
     * double type rather than decimal type.
     */
    public boolean legacy_exponent_literal_as_decimal_enabled = false;
    /**
     * When true, the behavior of keywords follows ANSI SQL standard.
     */
    public boolean SQL_standard_keyword_behavior = false;

    public SqlBaseParser(TokenStream input) {
        super(input);
        _interp = new ParserATNSimulator(this, _ATN, _decisionToDFA, _sharedContextCache);
    }

    private static String[] makeRuleNames() {
        return new String[]{
                "singleStatement", "singleExpression", "singleTableIdentifier", "singleMultipartIdentifier",
                "singleFunctionIdentifier", "singleDataType", "singleTableSchema", "statement",
                "configKey", "configValue", "unsupportedHiveNativeCommands", "createTableHeader",
                "replaceTableHeader", "bucketSpec", "skewSpec", "locationSpec", "commentSpec",
                "query", "insertInto", "partitionSpecLocation", "partitionSpec", "partitionVal",
                "namespace", "namespaces", "describeFuncName", "describeColName", "ctes",
                "namedQuery", "tableProvider", "createTableClauses", "propertyList",
                "property", "propertyKey", "propertyValue", "constantList", "nestedConstantList",
                "createFileFormat", "fileFormat", "storageHandler", "resource", "dmlStatementNoWith",
                "queryOrganization", "multiInsertQueryBody", "queryTerm", "queryPrimary",
                "sortItem", "fromStatement", "fromStatementBody", "querySpecification",
                "transformClause", "selectClause", "setClause", "matchedClause", "notMatchedClause",
                "matchedAction", "notMatchedAction", "assignmentList", "assignment",
                "whereClause", "havingClause", "hint", "hintStatement", "fromClause",
                "temporalClause", "aggregationClause", "groupByClause", "groupingAnalytics",
                "groupingElement", "groupingSet", "pivotClause", "pivotColumn", "pivotValue",
                "lateralView", "setQuantifier", "relation", "joinRelation", "joinType",
                "joinCriteria", "sample", "sampleMethod", "identifierList", "identifierSeq",
                "orderedIdentifierList", "orderedIdentifier", "identifierCommentList",
                "identifierComment", "relationPrimary", "inlineTable", "functionTable",
                "tableAlias", "rowFormat", "multipartIdentifierList", "multipartIdentifier",
                "multipartIdentifierPropertyList", "multipartIdentifierProperty", "tableIdentifier",
                "functionIdentifier", "namedExpression", "namedExpressionSeq", "partitionFieldList",
                "partitionField", "transform", "transformArgument", "expression", "expressionSeq",
                "booleanExpression", "predicate", "valueExpression", "datetimeUnit",
                "primaryExpression", "constant", "comparisonOperator", "arithmeticOperator",
                "predicateOperator", "booleanValue", "interval", "errorCapturingMultiUnitsInterval",
                "multiUnitsInterval", "errorCapturingUnitToUnitInterval", "unitToUnitInterval",
                "intervalValue", "colPosition", "dataType", "qualifiedColTypeWithPositionList",
                "qualifiedColTypeWithPosition", "defaultExpression", "colTypeList", "colType",
                "createOrReplaceTableColTypeList", "createOrReplaceTableColType", "complexColTypeList",
                "complexColType", "whenClause", "windowClause", "namedWindow", "windowSpec",
                "windowFrame", "frameBound", "qualifiedNameList", "functionName", "qualifiedName",
                "errorCapturingIdentifier", "errorCapturingIdentifierExtra", "identifier",
                "strictIdentifier", "quotedIdentifier", "number", "alterColumnAction",
                "ansiNonReserved", "strictNonReserved", "nonReserved"
        };
    }

    private static String[] makeLiteralNames() {
        return new String[]{
                null, "';'", "'('", "')'", "','", "'.'", "'['", "']'", null, null, null,
                null, null, null, null, null, null, null, null, null, null, null, null,
                null, null, null, null, null, null, null, null, null, null, null, null,
                null, null, null, null, null, null, null, null, null, null, null, null,
                null, null, null, null, null, null, null, null, null, null, null, null,
                null, null, null, null, null, null, null, null, null, null, null, null,
                null, null, null, null, null, null, null, null, null, null, null, null,
                null, null, null, null, null, null, null, null, null, null, null, null,
                null, null, null, null, null, null, null, null, null, null, null, null,
                null, null, null, null, null, null, null, null, null, null, null, null,
                null, null, null, null, null, null, null, null, null, null, null, null,
                null, null, null, null, null, null, null, null, null, null, null, null,
                null, null, null, null, null, null, null, null, null, null, null, null,
                null, null, null, null, null, null, null, null, null, null, null, null,
                null, null, null, null, null, null, null, null, null, null, null, null,
                null, null, null, null, null, null, null, null, null, null, null, null,
                null, null, null, null, null, null, null, null, null, null, null, null,
                null, null, null, null, null, null, null, null, null, null, null, null,
                null, null, null, null, null, null, null, null, null, null, null, null,
                null, null, null, null, null, null, null, null, null, null, null, null,
                null, null, null, null, null, null, null, null, null, null, null, null,
                null, null, null, null, null, null, null, null, null, null, null, null,
                null, null, null, null, null, null, null, null, null, null, null, null,
                null, null, null, null, null, null, null, null, null, null, null, null,
                null, null, null, null, "'<=>'", "'<>'", "'!='", "'<'", null, "'>'",
                null, "'+'", "'-'", "'*'", "'/'", "'%'", "'~'", "'&'", "'|'", "'||'",
                "'^'", "':'", "'->'", "'/*+'", "'*/'"
        };
    }

    private static String[] makeSymbolicNames() {
        return new String[]{
                null, "SEMICOLON", "LEFT_PAREN", "RIGHT_PAREN", "COMMA", "DOT", "LEFT_BRACKET",
                "RIGHT_BRACKET", "ADD", "AFTER", "ALL", "ALTER", "ANALYZE", "AND", "ANTI",
                "ANY", "ANY_VALUE", "ARCHIVE", "ARRAY", "AS", "ASC", "AT", "AUTHORIZATION",
                "BETWEEN", "BOTH", "BUCKET", "BUCKETS", "BY", "CACHE", "CASCADE", "CASE",
                "CAST", "CATALOG", "CATALOGS", "CHANGE", "CHECK", "CLEAR", "CLUSTER",
                "CLUSTERED", "CODEGEN", "COLLATE", "COLLECTION", "COLUMN", "COLUMNS",
                "COMMENT", "COMMIT", "COMPACT", "COMPACTIONS", "COMPUTE", "CONCATENATE",
                "CONSTRAINT", "COST", "CREATE", "CROSS", "CUBE", "CURRENT", "CURRENT_DATE",
                "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", "DAY", "DAYOFYEAR",
                "DATA", "DATABASE", "DATABASES", "DATEADD", "DATEDIFF", "DBPROPERTIES",
                "DEFAULT", "DEFINED", "DELETE", "DELIMITED", "DESC", "DESCRIBE", "DFS",
                "DIRECTORIES", "DIRECTORY", "DISTINCT", "DISTRIBUTE", "DIV", "DROP",
                "ELSE", "END", "ESCAPE", "ESCAPED", "EXCEPT", "EXCHANGE", "EXISTS", "EXPLAIN",
                "EXPORT", "EXTENDED", "EXTERNAL", "EXTRACT", "FALSE", "FETCH", "FIELDS",
                "FILTER", "FILEFORMAT", "FIRST", "FOLLOWING", "FOR", "FOREIGN", "FORMAT",
                "FORMATTED", "FROM", "FULL", "FUNCTION", "FUNCTIONS", "GLOBAL", "GRANT",
                "GROUP", "GROUPING", "HAVING", "HOUR", "IF", "IGNORE", "IMPORT", "IN",
                "INDEX", "INDEXES", "INNER", "INPATH", "INPUTFORMAT", "INSERT", "INTERSECT",
                "INTERVAL", "INTO", "IS", "ITEMS", "JOIN", "KEYS", "LAST", "LATERAL",
                "LAZY", "LEADING", "LEFT", "LIKE", "ILIKE", "LIMIT", "LINES", "LIST",
                "LOAD", "LOCAL", "LOCATION", "LOCK", "LOCKS", "LOGICAL", "MACRO", "MAP",
                "MATCHED", "MERGE", "MICROSECOND", "MILLISECOND", "MINUTE", "MONTH",
                "MSCK", "NAMESPACE", "NAMESPACES", "NATURAL", "NO", "NOT", "NULL", "NULLS",
                "OF", "OFFSET", "ON", "ONLY", "OPTION", "OPTIONS", "OR", "ORDER", "OUT",
                "OUTER", "OUTPUTFORMAT", "OVER", "OVERLAPS", "OVERLAY", "OVERWRITE",
                "PARTITION", "PARTITIONED", "PARTITIONS", "PERCENTILE_CONT", "PERCENTILE_DISC",
                "PERCENTLIT", "PIVOT", "PLACING", "POSITION", "PRECEDING", "PRIMARY",
                "PRINCIPALS", "PROPERTIES", "PURGE", "QUARTER", "QUERY", "RANGE", "RECORDREADER",
                "RECORDWRITER", "RECOVER", "REDUCE", "REFERENCES", "REFRESH", "RENAME",
                "REPAIR", "REPEATABLE", "REPLACE", "RESET", "RESPECT", "RESTRICT", "REVOKE",
                "RIGHT", "RLIKE", "ROLE", "ROLES", "ROLLBACK", "ROLLUP", "ROW", "ROWS",
                "SECOND", "SCHEMA", "SCHEMAS", "SELECT", "SEMI", "SEPARATED", "SERDE",
                "SERDEPROPERTIES", "SESSION_USER", "SET", "SETMINUS", "SETS", "SHOW",
                "SKEWED", "SOME", "SORT", "SORTED", "START", "STATISTICS", "STORED",
                "STRATIFY", "STRUCT", "SUBSTR", "SUBSTRING", "SYNC", "SYSTEM_TIME", "SYSTEM_VERSION",
                "TABLE", "TABLES", "TABLESAMPLE", "TBLPROPERTIES", "TEMPORARY", "TERMINATED",
                "THEN", "TIME", "TIMESTAMP", "TIMESTAMPADD", "TIMESTAMPDIFF", "TO", "TOUCH",
                "TRAILING", "TRANSACTION", "TRANSACTIONS", "TRANSFORM", "TRIM", "TRUE",
                "TRUNCATE", "TRY_CAST", "TYPE", "UNARCHIVE", "UNBOUNDED", "UNCACHE",
                "UNION", "UNIQUE", "UNKNOWN", "UNLOCK", "UNSET", "UPDATE", "USE", "USER",
                "USING", "VALUES", "VERSION", "VIEW", "VIEWS", "WEEK", "WHEN", "WHERE",
                "WINDOW", "WITH", "WITHIN", "YEAR", "ZONE", "EQ", "NSEQ", "NEQ", "NEQJ",
                "LT", "LTE", "GT", "GTE", "PLUS", "MINUS", "ASTERISK", "SLASH", "PERCENT",
                "TILDE", "AMPERSAND", "PIPE", "CONCAT_PIPE", "HAT", "COLON", "ARROW",
                "HENT_START", "HENT_END", "STRING", "BIGINT_LITERAL", "SMALLINT_LITERAL",
                "TINYINT_LITERAL", "INTEGER_VALUE", "EXPONENT_VALUE", "DECIMAL_VALUE",
                "FLOAT_LITERAL", "DOUBLE_LITERAL", "BIGDECIMAL_LITERAL", "IDENTIFIER",
                "BACKQUOTED_IDENTIFIER", "SIMPLE_COMMENT", "BRACKETED_COMMENT", "WS",
                "UNRECOGNIZED"
        };
    }

    @Override
    @Deprecated
    public String[] getTokenNames() {
        return tokenNames;
    }

    @Override

    public Vocabulary getVocabulary() {
        return VOCABULARY;
    }

    @Override
    public String getGrammarFileName() {
        return "SqlBaseParser.g4";
    }

    @Override
    public String[] getRuleNames() {
        return ruleNames;
    }

    @Override
    public String getSerializedATN() {
        return _serializedATN;
    }

    @Override
    public ATN getATN() {
        return _ATN;
    }

    public final SingleStatementContext singleStatement() throws RecognitionException {
        SingleStatementContext _localctx = new SingleStatementContext(_ctx, getState());
        enterRule(_localctx, 0, RULE_singleStatement);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(302);
                statement();
                setState(306);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == SEMICOLON) {
                    {
                        {
                            setState(303);
                            match(SEMICOLON);
                        }
                    }
                    setState(308);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(309);
                match(EOF);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final SingleExpressionContext singleExpression() throws RecognitionException {
        SingleExpressionContext _localctx = new SingleExpressionContext(_ctx, getState());
        enterRule(_localctx, 2, RULE_singleExpression);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(311);
                namedExpression();
                setState(312);
                match(EOF);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final SingleTableIdentifierContext singleTableIdentifier() throws RecognitionException {
        SingleTableIdentifierContext _localctx = new SingleTableIdentifierContext(_ctx, getState());
        enterRule(_localctx, 4, RULE_singleTableIdentifier);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(314);
                tableIdentifier();
                setState(315);
                match(EOF);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final SingleMultipartIdentifierContext singleMultipartIdentifier() throws RecognitionException {
        SingleMultipartIdentifierContext _localctx = new SingleMultipartIdentifierContext(_ctx, getState());
        enterRule(_localctx, 6, RULE_singleMultipartIdentifier);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(317);
                multipartIdentifier();
                setState(318);
                match(EOF);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final SingleFunctionIdentifierContext singleFunctionIdentifier() throws RecognitionException {
        SingleFunctionIdentifierContext _localctx = new SingleFunctionIdentifierContext(_ctx, getState());
        enterRule(_localctx, 8, RULE_singleFunctionIdentifier);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(320);
                functionIdentifier();
                setState(321);
                match(EOF);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final SingleDataTypeContext singleDataType() throws RecognitionException {
        SingleDataTypeContext _localctx = new SingleDataTypeContext(_ctx, getState());
        enterRule(_localctx, 10, RULE_singleDataType);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(323);
                dataType();
                setState(324);
                match(EOF);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final SingleTableSchemaContext singleTableSchema() throws RecognitionException {
        SingleTableSchemaContext _localctx = new SingleTableSchemaContext(_ctx, getState());
        enterRule(_localctx, 12, RULE_singleTableSchema);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(326);
                colTypeList();
                setState(327);
                match(EOF);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final StatementContext statement() throws RecognitionException {
        StatementContext _localctx = new StatementContext(_ctx, getState());
        enterRule(_localctx, 14, RULE_statement);
        int _la;
        try {
            int _alt;
            setState(1130);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 120, _ctx)) {
                case 1:
                    _localctx = new StatementDefaultContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                {
                    setState(329);
                    query();
                }
                break;
                case 2:
                    _localctx = new DmlStatementContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                {
                    setState(331);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == WITH) {
                        {
                            setState(330);
                            ctes();
                        }
                    }

                    setState(333);
                    dmlStatementNoWith();
                }
                break;
                case 3:
                    _localctx = new UseContext(_localctx);
                    enterOuterAlt(_localctx, 3);
                {
                    setState(334);
                    match(USE);
                    setState(335);
                    multipartIdentifier();
                }
                break;
                case 4:
                    _localctx = new UseNamespaceContext(_localctx);
                    enterOuterAlt(_localctx, 4);
                {
                    setState(336);
                    match(USE);
                    setState(337);
                    namespace();
                    setState(338);
                    multipartIdentifier();
                }
                break;
                case 5:
                    _localctx = new SetCatalogContext(_localctx);
                    enterOuterAlt(_localctx, 5);
                {
                    setState(340);
                    match(SET);
                    setState(341);
                    match(CATALOG);
                    setState(344);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 2, _ctx)) {
                        case 1: {
                            setState(342);
                            identifier();
                        }
                        break;
                        case 2: {
                            setState(343);
                            match(STRING);
                        }
                        break;
                    }
                }
                break;
                case 6:
                    _localctx = new CreateNamespaceContext(_localctx);
                    enterOuterAlt(_localctx, 6);
                {
                    setState(346);
                    match(CREATE);
                    setState(347);
                    namespace();
                    setState(351);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 3, _ctx)) {
                        case 1: {
                            setState(348);
                            match(IF);
                            setState(349);
                            match(NOT);
                            setState(350);
                            match(EXISTS);
                        }
                        break;
                    }
                    setState(353);
                    multipartIdentifier();
                    setState(361);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la == COMMENT || _la == LOCATION || _la == WITH) {
                        {
                            setState(359);
                            _errHandler.sync(this);
                            switch (_input.LA(1)) {
                                case COMMENT: {
                                    setState(354);
                                    commentSpec();
                                }
                                break;
                                case LOCATION: {
                                    setState(355);
                                    locationSpec();
                                }
                                break;
                                case WITH: {
                                    {
                                        setState(356);
                                        match(WITH);
                                        setState(357);
                                        _la = _input.LA(1);
                                        if (!(_la == DBPROPERTIES || _la == PROPERTIES)) {
                                            _errHandler.recoverInline(this);
                                        } else {
                                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                            _errHandler.reportMatch(this);
                                            consume();
                                        }
                                        setState(358);
                                        propertyList();
                                    }
                                }
                                break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                        }
                        setState(363);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                }
                break;
                case 7:
                    _localctx = new SetNamespacePropertiesContext(_localctx);
                    enterOuterAlt(_localctx, 7);
                {
                    setState(364);
                    match(ALTER);
                    setState(365);
                    namespace();
                    setState(366);
                    multipartIdentifier();
                    setState(367);
                    match(SET);
                    setState(368);
                    _la = _input.LA(1);
                    if (!(_la == DBPROPERTIES || _la == PROPERTIES)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(369);
                    propertyList();
                }
                break;
                case 8:
                    _localctx = new SetNamespaceLocationContext(_localctx);
                    enterOuterAlt(_localctx, 8);
                {
                    setState(371);
                    match(ALTER);
                    setState(372);
                    namespace();
                    setState(373);
                    multipartIdentifier();
                    setState(374);
                    match(SET);
                    setState(375);
                    locationSpec();
                }
                break;
                case 9:
                    _localctx = new DropNamespaceContext(_localctx);
                    enterOuterAlt(_localctx, 9);
                {
                    setState(377);
                    match(DROP);
                    setState(378);
                    namespace();
                    setState(381);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 6, _ctx)) {
                        case 1: {
                            setState(379);
                            match(IF);
                            setState(380);
                            match(EXISTS);
                        }
                        break;
                    }
                    setState(383);
                    multipartIdentifier();
                    setState(385);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == CASCADE || _la == RESTRICT) {
                        {
                            setState(384);
                            _la = _input.LA(1);
                            if (!(_la == CASCADE || _la == RESTRICT)) {
                                _errHandler.recoverInline(this);
                            } else {
                                if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                _errHandler.reportMatch(this);
                                consume();
                            }
                        }
                    }

                }
                break;
                case 10:
                    _localctx = new ShowNamespacesContext(_localctx);
                    enterOuterAlt(_localctx, 10);
                {
                    setState(387);
                    match(SHOW);
                    setState(388);
                    namespaces();
                    setState(391);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == FROM || _la == IN) {
                        {
                            setState(389);
                            _la = _input.LA(1);
                            if (!(_la == FROM || _la == IN)) {
                                _errHandler.recoverInline(this);
                            } else {
                                if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                _errHandler.reportMatch(this);
                                consume();
                            }
                            setState(390);
                            multipartIdentifier();
                        }
                    }

                    setState(397);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == LIKE || _la == STRING) {
                        {
                            setState(394);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == LIKE) {
                                {
                                    setState(393);
                                    match(LIKE);
                                }
                            }

                            setState(396);
                            ((ShowNamespacesContext) _localctx).pattern = match(STRING);
                        }
                    }

                }
                break;
                case 11:
                    _localctx = new CreateTableContext(_localctx);
                    enterOuterAlt(_localctx, 11);
                {
                    setState(399);
                    createTableHeader();
                    setState(404);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 11, _ctx)) {
                        case 1: {
                            setState(400);
                            match(LEFT_PAREN);
                            setState(401);
                            createOrReplaceTableColTypeList();
                            setState(402);
                            match(RIGHT_PAREN);
                        }
                        break;
                    }
                    setState(407);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == USING) {
                        {
                            setState(406);
                            tableProvider();
                        }
                    }

                    setState(409);
                    createTableClauses();
                    setState(414);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == LEFT_PAREN || _la == AS || _la == FROM || _la == MAP || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & ((1L << (REDUCE - 198)) | (1L << (SELECT - 198)) | (1L << (TABLE - 198)))) != 0) || _la == VALUES || _la == WITH) {
                        {
                            setState(411);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == AS) {
                                {
                                    setState(410);
                                    match(AS);
                                }
                            }

                            setState(413);
                            query();
                        }
                    }

                }
                break;
                case 12:
                    _localctx = new CreateTableLikeContext(_localctx);
                    enterOuterAlt(_localctx, 12);
                {
                    setState(416);
                    match(CREATE);
                    setState(417);
                    match(TABLE);
                    setState(421);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 15, _ctx)) {
                        case 1: {
                            setState(418);
                            match(IF);
                            setState(419);
                            match(NOT);
                            setState(420);
                            match(EXISTS);
                        }
                        break;
                    }
                    setState(423);
                    ((CreateTableLikeContext) _localctx).target = tableIdentifier();
                    setState(424);
                    match(LIKE);
                    setState(425);
                    ((CreateTableLikeContext) _localctx).source = tableIdentifier();
                    setState(434);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la == LOCATION || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (ROW - 215)) | (1L << (STORED - 215)) | (1L << (TBLPROPERTIES - 215)) | (1L << (USING - 215)))) != 0)) {
                        {
                            setState(432);
                            _errHandler.sync(this);
                            switch (_input.LA(1)) {
                                case USING: {
                                    setState(426);
                                    tableProvider();
                                }
                                break;
                                case ROW: {
                                    setState(427);
                                    rowFormat();
                                }
                                break;
                                case STORED: {
                                    setState(428);
                                    createFileFormat();
                                }
                                break;
                                case LOCATION: {
                                    setState(429);
                                    locationSpec();
                                }
                                break;
                                case TBLPROPERTIES: {
                                    {
                                        setState(430);
                                        match(TBLPROPERTIES);
                                        setState(431);
                                        ((CreateTableLikeContext) _localctx).tableProps = propertyList();
                                    }
                                }
                                break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                        }
                        setState(436);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                }
                break;
                case 13:
                    _localctx = new ReplaceTableContext(_localctx);
                    enterOuterAlt(_localctx, 13);
                {
                    setState(437);
                    replaceTableHeader();
                    setState(442);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 18, _ctx)) {
                        case 1: {
                            setState(438);
                            match(LEFT_PAREN);
                            setState(439);
                            createOrReplaceTableColTypeList();
                            setState(440);
                            match(RIGHT_PAREN);
                        }
                        break;
                    }
                    setState(445);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == USING) {
                        {
                            setState(444);
                            tableProvider();
                        }
                    }

                    setState(447);
                    createTableClauses();
                    setState(452);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == LEFT_PAREN || _la == AS || _la == FROM || _la == MAP || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & ((1L << (REDUCE - 198)) | (1L << (SELECT - 198)) | (1L << (TABLE - 198)))) != 0) || _la == VALUES || _la == WITH) {
                        {
                            setState(449);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == AS) {
                                {
                                    setState(448);
                                    match(AS);
                                }
                            }

                            setState(451);
                            query();
                        }
                    }

                }
                break;
                case 14:
                    _localctx = new AnalyzeContext(_localctx);
                    enterOuterAlt(_localctx, 14);
                {
                    setState(454);
                    match(ANALYZE);
                    setState(455);
                    match(TABLE);
                    setState(456);
                    multipartIdentifier();
                    setState(458);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == PARTITION) {
                        {
                            setState(457);
                            partitionSpec();
                        }
                    }

                    setState(460);
                    match(COMPUTE);
                    setState(461);
                    match(STATISTICS);
                    setState(469);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 23, _ctx)) {
                        case 1: {
                            setState(462);
                            identifier();
                        }
                        break;
                        case 2: {
                            setState(463);
                            match(FOR);
                            setState(464);
                            match(COLUMNS);
                            setState(465);
                            identifierSeq();
                        }
                        break;
                        case 3: {
                            setState(466);
                            match(FOR);
                            setState(467);
                            match(ALL);
                            setState(468);
                            match(COLUMNS);
                        }
                        break;
                    }
                }
                break;
                case 15:
                    _localctx = new AnalyzeTablesContext(_localctx);
                    enterOuterAlt(_localctx, 15);
                {
                    setState(471);
                    match(ANALYZE);
                    setState(472);
                    match(TABLES);
                    setState(475);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == FROM || _la == IN) {
                        {
                            setState(473);
                            _la = _input.LA(1);
                            if (!(_la == FROM || _la == IN)) {
                                _errHandler.recoverInline(this);
                            } else {
                                if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                _errHandler.reportMatch(this);
                                consume();
                            }
                            setState(474);
                            multipartIdentifier();
                        }
                    }

                    setState(477);
                    match(COMPUTE);
                    setState(478);
                    match(STATISTICS);
                    setState(480);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 25, _ctx)) {
                        case 1: {
                            setState(479);
                            identifier();
                        }
                        break;
                    }
                }
                break;
                case 16:
                    _localctx = new AddTableColumnsContext(_localctx);
                    enterOuterAlt(_localctx, 16);
                {
                    setState(482);
                    match(ALTER);
                    setState(483);
                    match(TABLE);
                    setState(484);
                    multipartIdentifier();
                    setState(485);
                    match(ADD);
                    setState(486);
                    _la = _input.LA(1);
                    if (!(_la == COLUMN || _la == COLUMNS)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(487);
                    ((AddTableColumnsContext) _localctx).columns = qualifiedColTypeWithPositionList();
                }
                break;
                case 17:
                    _localctx = new AddTableColumnsContext(_localctx);
                    enterOuterAlt(_localctx, 17);
                {
                    setState(489);
                    match(ALTER);
                    setState(490);
                    match(TABLE);
                    setState(491);
                    multipartIdentifier();
                    setState(492);
                    match(ADD);
                    setState(493);
                    _la = _input.LA(1);
                    if (!(_la == COLUMN || _la == COLUMNS)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(494);
                    match(LEFT_PAREN);
                    setState(495);
                    ((AddTableColumnsContext) _localctx).columns = qualifiedColTypeWithPositionList();
                    setState(496);
                    match(RIGHT_PAREN);
                }
                break;
                case 18:
                    _localctx = new RenameTableColumnContext(_localctx);
                    enterOuterAlt(_localctx, 18);
                {
                    setState(498);
                    match(ALTER);
                    setState(499);
                    match(TABLE);
                    setState(500);
                    ((RenameTableColumnContext) _localctx).table = multipartIdentifier();
                    setState(501);
                    match(RENAME);
                    setState(502);
                    match(COLUMN);
                    setState(503);
                    ((RenameTableColumnContext) _localctx).from = multipartIdentifier();
                    setState(504);
                    match(TO);
                    setState(505);
                    ((RenameTableColumnContext) _localctx).to = errorCapturingIdentifier();
                }
                break;
                case 19:
                    _localctx = new DropTableColumnsContext(_localctx);
                    enterOuterAlt(_localctx, 19);
                {
                    setState(507);
                    match(ALTER);
                    setState(508);
                    match(TABLE);
                    setState(509);
                    multipartIdentifier();
                    setState(510);
                    match(DROP);
                    setState(511);
                    _la = _input.LA(1);
                    if (!(_la == COLUMN || _la == COLUMNS)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(514);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == IF) {
                        {
                            setState(512);
                            match(IF);
                            setState(513);
                            match(EXISTS);
                        }
                    }

                    setState(516);
                    match(LEFT_PAREN);
                    setState(517);
                    ((DropTableColumnsContext) _localctx).columns = multipartIdentifierList();
                    setState(518);
                    match(RIGHT_PAREN);
                }
                break;
                case 20:
                    _localctx = new DropTableColumnsContext(_localctx);
                    enterOuterAlt(_localctx, 20);
                {
                    setState(520);
                    match(ALTER);
                    setState(521);
                    match(TABLE);
                    setState(522);
                    multipartIdentifier();
                    setState(523);
                    match(DROP);
                    setState(524);
                    _la = _input.LA(1);
                    if (!(_la == COLUMN || _la == COLUMNS)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(527);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 27, _ctx)) {
                        case 1: {
                            setState(525);
                            match(IF);
                            setState(526);
                            match(EXISTS);
                        }
                        break;
                    }
                    setState(529);
                    ((DropTableColumnsContext) _localctx).columns = multipartIdentifierList();
                }
                break;
                case 21:
                    _localctx = new RenameTableContext(_localctx);
                    enterOuterAlt(_localctx, 21);
                {
                    setState(531);
                    match(ALTER);
                    setState(532);
                    _la = _input.LA(1);
                    if (!(_la == TABLE || _la == VIEW)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(533);
                    ((RenameTableContext) _localctx).from = multipartIdentifier();
                    setState(534);
                    match(RENAME);
                    setState(535);
                    match(TO);
                    setState(536);
                    ((RenameTableContext) _localctx).to = multipartIdentifier();
                }
                break;
                case 22:
                    _localctx = new SetTablePropertiesContext(_localctx);
                    enterOuterAlt(_localctx, 22);
                {
                    setState(538);
                    match(ALTER);
                    setState(539);
                    _la = _input.LA(1);
                    if (!(_la == TABLE || _la == VIEW)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(540);
                    multipartIdentifier();
                    setState(541);
                    match(SET);
                    setState(542);
                    match(TBLPROPERTIES);
                    setState(543);
                    propertyList();
                }
                break;
                case 23:
                    _localctx = new UnsetTablePropertiesContext(_localctx);
                    enterOuterAlt(_localctx, 23);
                {
                    setState(545);
                    match(ALTER);
                    setState(546);
                    _la = _input.LA(1);
                    if (!(_la == TABLE || _la == VIEW)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(547);
                    multipartIdentifier();
                    setState(548);
                    match(UNSET);
                    setState(549);
                    match(TBLPROPERTIES);
                    setState(552);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == IF) {
                        {
                            setState(550);
                            match(IF);
                            setState(551);
                            match(EXISTS);
                        }
                    }

                    setState(554);
                    propertyList();
                }
                break;
                case 24:
                    _localctx = new AlterTableAlterColumnContext(_localctx);
                    enterOuterAlt(_localctx, 24);
                {
                    setState(556);
                    match(ALTER);
                    setState(557);
                    match(TABLE);
                    setState(558);
                    ((AlterTableAlterColumnContext) _localctx).table = multipartIdentifier();
                    setState(559);
                    _la = _input.LA(1);
                    if (!(_la == ALTER || _la == CHANGE)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(561);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 29, _ctx)) {
                        case 1: {
                            setState(560);
                            match(COLUMN);
                        }
                        break;
                    }
                    setState(563);
                    ((AlterTableAlterColumnContext) _localctx).column = multipartIdentifier();
                    setState(565);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == AFTER || _la == COMMENT || _la == DROP || _la == FIRST || _la == SET || _la == TYPE) {
                        {
                            setState(564);
                            alterColumnAction();
                        }
                    }

                }
                break;
                case 25:
                    _localctx = new HiveChangeColumnContext(_localctx);
                    enterOuterAlt(_localctx, 25);
                {
                    setState(567);
                    match(ALTER);
                    setState(568);
                    match(TABLE);
                    setState(569);
                    ((HiveChangeColumnContext) _localctx).table = multipartIdentifier();
                    setState(571);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == PARTITION) {
                        {
                            setState(570);
                            partitionSpec();
                        }
                    }

                    setState(573);
                    match(CHANGE);
                    setState(575);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 32, _ctx)) {
                        case 1: {
                            setState(574);
                            match(COLUMN);
                        }
                        break;
                    }
                    setState(577);
                    ((HiveChangeColumnContext) _localctx).colName = multipartIdentifier();
                    setState(578);
                    colType();
                    setState(580);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == AFTER || _la == FIRST) {
                        {
                            setState(579);
                            colPosition();
                        }
                    }

                }
                break;
                case 26:
                    _localctx = new HiveReplaceColumnsContext(_localctx);
                    enterOuterAlt(_localctx, 26);
                {
                    setState(582);
                    match(ALTER);
                    setState(583);
                    match(TABLE);
                    setState(584);
                    ((HiveReplaceColumnsContext) _localctx).table = multipartIdentifier();
                    setState(586);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == PARTITION) {
                        {
                            setState(585);
                            partitionSpec();
                        }
                    }

                    setState(588);
                    match(REPLACE);
                    setState(589);
                    match(COLUMNS);
                    setState(590);
                    match(LEFT_PAREN);
                    setState(591);
                    ((HiveReplaceColumnsContext) _localctx).columns = qualifiedColTypeWithPositionList();
                    setState(592);
                    match(RIGHT_PAREN);
                }
                break;
                case 27:
                    _localctx = new SetTableSerDeContext(_localctx);
                    enterOuterAlt(_localctx, 27);
                {
                    setState(594);
                    match(ALTER);
                    setState(595);
                    match(TABLE);
                    setState(596);
                    multipartIdentifier();
                    setState(598);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == PARTITION) {
                        {
                            setState(597);
                            partitionSpec();
                        }
                    }

                    setState(600);
                    match(SET);
                    setState(601);
                    match(SERDE);
                    setState(602);
                    match(STRING);
                    setState(606);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == WITH) {
                        {
                            setState(603);
                            match(WITH);
                            setState(604);
                            match(SERDEPROPERTIES);
                            setState(605);
                            propertyList();
                        }
                    }

                }
                break;
                case 28:
                    _localctx = new SetTableSerDeContext(_localctx);
                    enterOuterAlt(_localctx, 28);
                {
                    setState(608);
                    match(ALTER);
                    setState(609);
                    match(TABLE);
                    setState(610);
                    multipartIdentifier();
                    setState(612);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == PARTITION) {
                        {
                            setState(611);
                            partitionSpec();
                        }
                    }

                    setState(614);
                    match(SET);
                    setState(615);
                    match(SERDEPROPERTIES);
                    setState(616);
                    propertyList();
                }
                break;
                case 29:
                    _localctx = new AddTablePartitionContext(_localctx);
                    enterOuterAlt(_localctx, 29);
                {
                    setState(618);
                    match(ALTER);
                    setState(619);
                    _la = _input.LA(1);
                    if (!(_la == TABLE || _la == VIEW)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(620);
                    multipartIdentifier();
                    setState(621);
                    match(ADD);
                    setState(625);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == IF) {
                        {
                            setState(622);
                            match(IF);
                            setState(623);
                            match(NOT);
                            setState(624);
                            match(EXISTS);
                        }
                    }

                    setState(628);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    do {
                        {
                            {
                                setState(627);
                                partitionSpecLocation();
                            }
                        }
                        setState(630);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    } while (_la == PARTITION);
                }
                break;
                case 30:
                    _localctx = new RenameTablePartitionContext(_localctx);
                    enterOuterAlt(_localctx, 30);
                {
                    setState(632);
                    match(ALTER);
                    setState(633);
                    match(TABLE);
                    setState(634);
                    multipartIdentifier();
                    setState(635);
                    ((RenameTablePartitionContext) _localctx).from = partitionSpec();
                    setState(636);
                    match(RENAME);
                    setState(637);
                    match(TO);
                    setState(638);
                    ((RenameTablePartitionContext) _localctx).to = partitionSpec();
                }
                break;
                case 31:
                    _localctx = new DropTablePartitionsContext(_localctx);
                    enterOuterAlt(_localctx, 31);
                {
                    setState(640);
                    match(ALTER);
                    setState(641);
                    _la = _input.LA(1);
                    if (!(_la == TABLE || _la == VIEW)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(642);
                    multipartIdentifier();
                    setState(643);
                    match(DROP);
                    setState(646);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == IF) {
                        {
                            setState(644);
                            match(IF);
                            setState(645);
                            match(EXISTS);
                        }
                    }

                    setState(648);
                    partitionSpec();
                    setState(653);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la == COMMA) {
                        {
                            {
                                setState(649);
                                match(COMMA);
                                setState(650);
                                partitionSpec();
                            }
                        }
                        setState(655);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                    setState(657);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == PURGE) {
                        {
                            setState(656);
                            match(PURGE);
                        }
                    }

                }
                break;
                case 32:
                    _localctx = new SetTableLocationContext(_localctx);
                    enterOuterAlt(_localctx, 32);
                {
                    setState(659);
                    match(ALTER);
                    setState(660);
                    match(TABLE);
                    setState(661);
                    multipartIdentifier();
                    setState(663);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == PARTITION) {
                        {
                            setState(662);
                            partitionSpec();
                        }
                    }

                    setState(665);
                    match(SET);
                    setState(666);
                    locationSpec();
                }
                break;
                case 33:
                    _localctx = new RecoverPartitionsContext(_localctx);
                    enterOuterAlt(_localctx, 33);
                {
                    setState(668);
                    match(ALTER);
                    setState(669);
                    match(TABLE);
                    setState(670);
                    multipartIdentifier();
                    setState(671);
                    match(RECOVER);
                    setState(672);
                    match(PARTITIONS);
                }
                break;
                case 34:
                    _localctx = new DropTableContext(_localctx);
                    enterOuterAlt(_localctx, 34);
                {
                    setState(674);
                    match(DROP);
                    setState(675);
                    match(TABLE);
                    setState(678);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 44, _ctx)) {
                        case 1: {
                            setState(676);
                            match(IF);
                            setState(677);
                            match(EXISTS);
                        }
                        break;
                    }
                    setState(680);
                    multipartIdentifier();
                    setState(682);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == PURGE) {
                        {
                            setState(681);
                            match(PURGE);
                        }
                    }

                }
                break;
                case 35:
                    _localctx = new DropViewContext(_localctx);
                    enterOuterAlt(_localctx, 35);
                {
                    setState(684);
                    match(DROP);
                    setState(685);
                    match(VIEW);
                    setState(688);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 46, _ctx)) {
                        case 1: {
                            setState(686);
                            match(IF);
                            setState(687);
                            match(EXISTS);
                        }
                        break;
                    }
                    setState(690);
                    multipartIdentifier();
                }
                break;
                case 36:
                    _localctx = new CreateViewContext(_localctx);
                    enterOuterAlt(_localctx, 36);
                {
                    setState(691);
                    match(CREATE);
                    setState(694);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == OR) {
                        {
                            setState(692);
                            match(OR);
                            setState(693);
                            match(REPLACE);
                        }
                    }

                    setState(700);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == GLOBAL || _la == TEMPORARY) {
                        {
                            setState(697);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == GLOBAL) {
                                {
                                    setState(696);
                                    match(GLOBAL);
                                }
                            }

                            setState(699);
                            match(TEMPORARY);
                        }
                    }

                    setState(702);
                    match(VIEW);
                    setState(706);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 50, _ctx)) {
                        case 1: {
                            setState(703);
                            match(IF);
                            setState(704);
                            match(NOT);
                            setState(705);
                            match(EXISTS);
                        }
                        break;
                    }
                    setState(708);
                    multipartIdentifier();
                    setState(710);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == LEFT_PAREN) {
                        {
                            setState(709);
                            identifierCommentList();
                        }
                    }

                    setState(720);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la == COMMENT || _la == PARTITIONED || _la == TBLPROPERTIES) {
                        {
                            setState(718);
                            _errHandler.sync(this);
                            switch (_input.LA(1)) {
                                case COMMENT: {
                                    setState(712);
                                    commentSpec();
                                }
                                break;
                                case PARTITIONED: {
                                    {
                                        setState(713);
                                        match(PARTITIONED);
                                        setState(714);
                                        match(ON);
                                        setState(715);
                                        identifierList();
                                    }
                                }
                                break;
                                case TBLPROPERTIES: {
                                    {
                                        setState(716);
                                        match(TBLPROPERTIES);
                                        setState(717);
                                        propertyList();
                                    }
                                }
                                break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                        }
                        setState(722);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                    setState(723);
                    match(AS);
                    setState(724);
                    query();
                }
                break;
                case 37:
                    _localctx = new CreateTempViewUsingContext(_localctx);
                    enterOuterAlt(_localctx, 37);
                {
                    setState(726);
                    match(CREATE);
                    setState(729);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == OR) {
                        {
                            setState(727);
                            match(OR);
                            setState(728);
                            match(REPLACE);
                        }
                    }

                    setState(732);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == GLOBAL) {
                        {
                            setState(731);
                            match(GLOBAL);
                        }
                    }

                    setState(734);
                    match(TEMPORARY);
                    setState(735);
                    match(VIEW);
                    setState(736);
                    tableIdentifier();
                    setState(741);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == LEFT_PAREN) {
                        {
                            setState(737);
                            match(LEFT_PAREN);
                            setState(738);
                            colTypeList();
                            setState(739);
                            match(RIGHT_PAREN);
                        }
                    }

                    setState(743);
                    tableProvider();
                    setState(746);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == OPTIONS) {
                        {
                            setState(744);
                            match(OPTIONS);
                            setState(745);
                            propertyList();
                        }
                    }

                }
                break;
                case 38:
                    _localctx = new AlterViewQueryContext(_localctx);
                    enterOuterAlt(_localctx, 38);
                {
                    setState(748);
                    match(ALTER);
                    setState(749);
                    match(VIEW);
                    setState(750);
                    multipartIdentifier();
                    setState(752);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == AS) {
                        {
                            setState(751);
                            match(AS);
                        }
                    }

                    setState(754);
                    query();
                }
                break;
                case 39:
                    _localctx = new CreateFunctionContext(_localctx);
                    enterOuterAlt(_localctx, 39);
                {
                    setState(756);
                    match(CREATE);
                    setState(759);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == OR) {
                        {
                            setState(757);
                            match(OR);
                            setState(758);
                            match(REPLACE);
                        }
                    }

                    setState(762);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == TEMPORARY) {
                        {
                            setState(761);
                            match(TEMPORARY);
                        }
                    }

                    setState(764);
                    match(FUNCTION);
                    setState(768);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 61, _ctx)) {
                        case 1: {
                            setState(765);
                            match(IF);
                            setState(766);
                            match(NOT);
                            setState(767);
                            match(EXISTS);
                        }
                        break;
                    }
                    setState(770);
                    multipartIdentifier();
                    setState(771);
                    match(AS);
                    setState(772);
                    ((CreateFunctionContext) _localctx).className = match(STRING);
                    setState(782);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == USING) {
                        {
                            setState(773);
                            match(USING);
                            setState(774);
                            resource();
                            setState(779);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            while (_la == COMMA) {
                                {
                                    {
                                        setState(775);
                                        match(COMMA);
                                        setState(776);
                                        resource();
                                    }
                                }
                                setState(781);
                                _errHandler.sync(this);
                                _la = _input.LA(1);
                            }
                        }
                    }

                }
                break;
                case 40:
                    _localctx = new DropFunctionContext(_localctx);
                    enterOuterAlt(_localctx, 40);
                {
                    setState(784);
                    match(DROP);
                    setState(786);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == TEMPORARY) {
                        {
                            setState(785);
                            match(TEMPORARY);
                        }
                    }

                    setState(788);
                    match(FUNCTION);
                    setState(791);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 65, _ctx)) {
                        case 1: {
                            setState(789);
                            match(IF);
                            setState(790);
                            match(EXISTS);
                        }
                        break;
                    }
                    setState(793);
                    multipartIdentifier();
                }
                break;
                case 41:
                    _localctx = new ExplainContext(_localctx);
                    enterOuterAlt(_localctx, 41);
                {
                    setState(794);
                    match(EXPLAIN);
                    setState(796);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == CODEGEN || _la == COST || ((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (EXTENDED - 90)) | (1L << (FORMATTED - 90)) | (1L << (LOGICAL - 90)))) != 0)) {
                        {
                            setState(795);
                            _la = _input.LA(1);
                            if (!(_la == CODEGEN || _la == COST || ((((_la - 90)) & ~0x3f) == 0 && ((1L << (_la - 90)) & ((1L << (EXTENDED - 90)) | (1L << (FORMATTED - 90)) | (1L << (LOGICAL - 90)))) != 0))) {
                                _errHandler.recoverInline(this);
                            } else {
                                if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                _errHandler.reportMatch(this);
                                consume();
                            }
                        }
                    }

                    setState(798);
                    statement();
                }
                break;
                case 42:
                    _localctx = new ShowTablesContext(_localctx);
                    enterOuterAlt(_localctx, 42);
                {
                    setState(799);
                    match(SHOW);
                    setState(800);
                    match(TABLES);
                    setState(803);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == FROM || _la == IN) {
                        {
                            setState(801);
                            _la = _input.LA(1);
                            if (!(_la == FROM || _la == IN)) {
                                _errHandler.recoverInline(this);
                            } else {
                                if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                _errHandler.reportMatch(this);
                                consume();
                            }
                            setState(802);
                            multipartIdentifier();
                        }
                    }

                    setState(809);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == LIKE || _la == STRING) {
                        {
                            setState(806);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == LIKE) {
                                {
                                    setState(805);
                                    match(LIKE);
                                }
                            }

                            setState(808);
                            ((ShowTablesContext) _localctx).pattern = match(STRING);
                        }
                    }

                }
                break;
                case 43:
                    _localctx = new ShowTableExtendedContext(_localctx);
                    enterOuterAlt(_localctx, 43);
                {
                    setState(811);
                    match(SHOW);
                    setState(812);
                    match(TABLE);
                    setState(813);
                    match(EXTENDED);
                    setState(816);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == FROM || _la == IN) {
                        {
                            setState(814);
                            _la = _input.LA(1);
                            if (!(_la == FROM || _la == IN)) {
                                _errHandler.recoverInline(this);
                            } else {
                                if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                _errHandler.reportMatch(this);
                                consume();
                            }
                            setState(815);
                            ((ShowTableExtendedContext) _localctx).ns = multipartIdentifier();
                        }
                    }

                    setState(818);
                    match(LIKE);
                    setState(819);
                    ((ShowTableExtendedContext) _localctx).pattern = match(STRING);
                    setState(821);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == PARTITION) {
                        {
                            setState(820);
                            partitionSpec();
                        }
                    }

                }
                break;
                case 44:
                    _localctx = new ShowTblPropertiesContext(_localctx);
                    enterOuterAlt(_localctx, 44);
                {
                    setState(823);
                    match(SHOW);
                    setState(824);
                    match(TBLPROPERTIES);
                    setState(825);
                    ((ShowTblPropertiesContext) _localctx).table = multipartIdentifier();
                    setState(830);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == LEFT_PAREN) {
                        {
                            setState(826);
                            match(LEFT_PAREN);
                            setState(827);
                            ((ShowTblPropertiesContext) _localctx).key = propertyKey();
                            setState(828);
                            match(RIGHT_PAREN);
                        }
                    }

                }
                break;
                case 45:
                    _localctx = new ShowColumnsContext(_localctx);
                    enterOuterAlt(_localctx, 45);
                {
                    setState(832);
                    match(SHOW);
                    setState(833);
                    match(COLUMNS);
                    setState(834);
                    _la = _input.LA(1);
                    if (!(_la == FROM || _la == IN)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(835);
                    ((ShowColumnsContext) _localctx).table = multipartIdentifier();
                    setState(838);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == FROM || _la == IN) {
                        {
                            setState(836);
                            _la = _input.LA(1);
                            if (!(_la == FROM || _la == IN)) {
                                _errHandler.recoverInline(this);
                            } else {
                                if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                _errHandler.reportMatch(this);
                                consume();
                            }
                            setState(837);
                            ((ShowColumnsContext) _localctx).ns = multipartIdentifier();
                        }
                    }

                }
                break;
                case 46:
                    _localctx = new ShowViewsContext(_localctx);
                    enterOuterAlt(_localctx, 46);
                {
                    setState(840);
                    match(SHOW);
                    setState(841);
                    match(VIEWS);
                    setState(844);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == FROM || _la == IN) {
                        {
                            setState(842);
                            _la = _input.LA(1);
                            if (!(_la == FROM || _la == IN)) {
                                _errHandler.recoverInline(this);
                            } else {
                                if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                _errHandler.reportMatch(this);
                                consume();
                            }
                            setState(843);
                            multipartIdentifier();
                        }
                    }

                    setState(850);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == LIKE || _la == STRING) {
                        {
                            setState(847);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == LIKE) {
                                {
                                    setState(846);
                                    match(LIKE);
                                }
                            }

                            setState(849);
                            ((ShowViewsContext) _localctx).pattern = match(STRING);
                        }
                    }

                }
                break;
                case 47:
                    _localctx = new ShowPartitionsContext(_localctx);
                    enterOuterAlt(_localctx, 47);
                {
                    setState(852);
                    match(SHOW);
                    setState(853);
                    match(PARTITIONS);
                    setState(854);
                    multipartIdentifier();
                    setState(856);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == PARTITION) {
                        {
                            setState(855);
                            partitionSpec();
                        }
                    }

                }
                break;
                case 48:
                    _localctx = new ShowFunctionsContext(_localctx);
                    enterOuterAlt(_localctx, 48);
                {
                    setState(858);
                    match(SHOW);
                    setState(860);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 78, _ctx)) {
                        case 1: {
                            setState(859);
                            identifier();
                        }
                        break;
                    }
                    setState(862);
                    match(FUNCTIONS);
                    setState(865);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 79, _ctx)) {
                        case 1: {
                            setState(863);
                            _la = _input.LA(1);
                            if (!(_la == FROM || _la == IN)) {
                                _errHandler.recoverInline(this);
                            } else {
                                if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                _errHandler.reportMatch(this);
                                consume();
                            }
                            setState(864);
                            ((ShowFunctionsContext) _localctx).ns = multipartIdentifier();
                        }
                        break;
                    }
                    setState(874);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 82, _ctx)) {
                        case 1: {
                            setState(868);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 80, _ctx)) {
                                case 1: {
                                    setState(867);
                                    match(LIKE);
                                }
                                break;
                            }
                            setState(872);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 81, _ctx)) {
                                case 1: {
                                    setState(870);
                                    ((ShowFunctionsContext) _localctx).legacy = multipartIdentifier();
                                }
                                break;
                                case 2: {
                                    setState(871);
                                    ((ShowFunctionsContext) _localctx).pattern = match(STRING);
                                }
                                break;
                            }
                        }
                        break;
                    }
                }
                break;
                case 49:
                    _localctx = new ShowCreateTableContext(_localctx);
                    enterOuterAlt(_localctx, 49);
                {
                    setState(876);
                    match(SHOW);
                    setState(877);
                    match(CREATE);
                    setState(878);
                    match(TABLE);
                    setState(879);
                    multipartIdentifier();
                    setState(882);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == AS) {
                        {
                            setState(880);
                            match(AS);
                            setState(881);
                            match(SERDE);
                        }
                    }

                }
                break;
                case 50:
                    _localctx = new ShowCurrentNamespaceContext(_localctx);
                    enterOuterAlt(_localctx, 50);
                {
                    setState(884);
                    match(SHOW);
                    setState(885);
                    match(CURRENT);
                    setState(886);
                    namespace();
                }
                break;
                case 51:
                    _localctx = new ShowCatalogsContext(_localctx);
                    enterOuterAlt(_localctx, 51);
                {
                    setState(887);
                    match(SHOW);
                    setState(888);
                    match(CATALOGS);
                    setState(893);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == LIKE || _la == STRING) {
                        {
                            setState(890);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == LIKE) {
                                {
                                    setState(889);
                                    match(LIKE);
                                }
                            }

                            setState(892);
                            ((ShowCatalogsContext) _localctx).pattern = match(STRING);
                        }
                    }

                }
                break;
                case 52:
                    _localctx = new DescribeFunctionContext(_localctx);
                    enterOuterAlt(_localctx, 52);
                {
                    setState(895);
                    _la = _input.LA(1);
                    if (!(_la == DESC || _la == DESCRIBE)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(896);
                    match(FUNCTION);
                    setState(898);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 86, _ctx)) {
                        case 1: {
                            setState(897);
                            match(EXTENDED);
                        }
                        break;
                    }
                    setState(900);
                    describeFuncName();
                }
                break;
                case 53:
                    _localctx = new DescribeNamespaceContext(_localctx);
                    enterOuterAlt(_localctx, 53);
                {
                    setState(901);
                    _la = _input.LA(1);
                    if (!(_la == DESC || _la == DESCRIBE)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(902);
                    namespace();
                    setState(904);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 87, _ctx)) {
                        case 1: {
                            setState(903);
                            match(EXTENDED);
                        }
                        break;
                    }
                    setState(906);
                    multipartIdentifier();
                }
                break;
                case 54:
                    _localctx = new DescribeRelationContext(_localctx);
                    enterOuterAlt(_localctx, 54);
                {
                    setState(908);
                    _la = _input.LA(1);
                    if (!(_la == DESC || _la == DESCRIBE)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(910);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 88, _ctx)) {
                        case 1: {
                            setState(909);
                            match(TABLE);
                        }
                        break;
                    }
                    setState(913);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 89, _ctx)) {
                        case 1: {
                            setState(912);
                            ((DescribeRelationContext) _localctx).option = _input.LT(1);
                            _la = _input.LA(1);
                            if (!(_la == EXTENDED || _la == FORMATTED)) {
                                ((DescribeRelationContext) _localctx).option = (Token) _errHandler.recoverInline(this);
                            } else {
                                if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                _errHandler.reportMatch(this);
                                consume();
                            }
                        }
                        break;
                    }
                    setState(915);
                    multipartIdentifier();
                    setState(917);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 90, _ctx)) {
                        case 1: {
                            setState(916);
                            partitionSpec();
                        }
                        break;
                    }
                    setState(920);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 91, _ctx)) {
                        case 1: {
                            setState(919);
                            describeColName();
                        }
                        break;
                    }
                }
                break;
                case 55:
                    _localctx = new DescribeQueryContext(_localctx);
                    enterOuterAlt(_localctx, 55);
                {
                    setState(922);
                    _la = _input.LA(1);
                    if (!(_la == DESC || _la == DESCRIBE)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(924);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == QUERY) {
                        {
                            setState(923);
                            match(QUERY);
                        }
                    }

                    setState(926);
                    query();
                }
                break;
                case 56:
                    _localctx = new CommentNamespaceContext(_localctx);
                    enterOuterAlt(_localctx, 56);
                {
                    setState(927);
                    match(COMMENT);
                    setState(928);
                    match(ON);
                    setState(929);
                    namespace();
                    setState(930);
                    multipartIdentifier();
                    setState(931);
                    match(IS);
                    setState(932);
                    ((CommentNamespaceContext) _localctx).comment = _input.LT(1);
                    _la = _input.LA(1);
                    if (!(_la == NULL || _la == STRING)) {
                        ((CommentNamespaceContext) _localctx).comment = (Token) _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                }
                break;
                case 57:
                    _localctx = new CommentTableContext(_localctx);
                    enterOuterAlt(_localctx, 57);
                {
                    setState(934);
                    match(COMMENT);
                    setState(935);
                    match(ON);
                    setState(936);
                    match(TABLE);
                    setState(937);
                    multipartIdentifier();
                    setState(938);
                    match(IS);
                    setState(939);
                    ((CommentTableContext) _localctx).comment = _input.LT(1);
                    _la = _input.LA(1);
                    if (!(_la == NULL || _la == STRING)) {
                        ((CommentTableContext) _localctx).comment = (Token) _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                }
                break;
                case 58:
                    _localctx = new RefreshTableContext(_localctx);
                    enterOuterAlt(_localctx, 58);
                {
                    setState(941);
                    match(REFRESH);
                    setState(942);
                    match(TABLE);
                    setState(943);
                    multipartIdentifier();
                }
                break;
                case 59:
                    _localctx = new RefreshFunctionContext(_localctx);
                    enterOuterAlt(_localctx, 59);
                {
                    setState(944);
                    match(REFRESH);
                    setState(945);
                    match(FUNCTION);
                    setState(946);
                    multipartIdentifier();
                }
                break;
                case 60:
                    _localctx = new RefreshResourceContext(_localctx);
                    enterOuterAlt(_localctx, 60);
                {
                    setState(947);
                    match(REFRESH);
                    setState(955);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 94, _ctx)) {
                        case 1: {
                            setState(948);
                            match(STRING);
                        }
                        break;
                        case 2: {
                            setState(952);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 93, _ctx);
                            while (_alt != 1 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                                if (_alt == 1 + 1) {
                                    {
                                        {
                                            setState(949);
                                            matchWildcard();
                                        }
                                    }
                                }
                                setState(954);
                                _errHandler.sync(this);
                                _alt = getInterpreter().adaptivePredict(_input, 93, _ctx);
                            }
                        }
                        break;
                    }
                }
                break;
                case 61:
                    _localctx = new CacheTableContext(_localctx);
                    enterOuterAlt(_localctx, 61);
                {
                    setState(957);
                    match(CACHE);
                    setState(959);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == LAZY) {
                        {
                            setState(958);
                            match(LAZY);
                        }
                    }

                    setState(961);
                    match(TABLE);
                    setState(962);
                    multipartIdentifier();
                    setState(965);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == OPTIONS) {
                        {
                            setState(963);
                            match(OPTIONS);
                            setState(964);
                            ((CacheTableContext) _localctx).options = propertyList();
                        }
                    }

                    setState(971);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == LEFT_PAREN || _la == AS || _la == FROM || _la == MAP || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & ((1L << (REDUCE - 198)) | (1L << (SELECT - 198)) | (1L << (TABLE - 198)))) != 0) || _la == VALUES || _la == WITH) {
                        {
                            setState(968);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == AS) {
                                {
                                    setState(967);
                                    match(AS);
                                }
                            }

                            setState(970);
                            query();
                        }
                    }

                }
                break;
                case 62:
                    _localctx = new UncacheTableContext(_localctx);
                    enterOuterAlt(_localctx, 62);
                {
                    setState(973);
                    match(UNCACHE);
                    setState(974);
                    match(TABLE);
                    setState(977);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 99, _ctx)) {
                        case 1: {
                            setState(975);
                            match(IF);
                            setState(976);
                            match(EXISTS);
                        }
                        break;
                    }
                    setState(979);
                    multipartIdentifier();
                }
                break;
                case 63:
                    _localctx = new ClearCacheContext(_localctx);
                    enterOuterAlt(_localctx, 63);
                {
                    setState(980);
                    match(CLEAR);
                    setState(981);
                    match(CACHE);
                }
                break;
                case 64:
                    _localctx = new LoadDataContext(_localctx);
                    enterOuterAlt(_localctx, 64);
                {
                    setState(982);
                    match(LOAD);
                    setState(983);
                    match(DATA);
                    setState(985);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == LOCAL) {
                        {
                            setState(984);
                            match(LOCAL);
                        }
                    }

                    setState(987);
                    match(INPATH);
                    setState(988);
                    ((LoadDataContext) _localctx).path = match(STRING);
                    setState(990);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == OVERWRITE) {
                        {
                            setState(989);
                            match(OVERWRITE);
                        }
                    }

                    setState(992);
                    match(INTO);
                    setState(993);
                    match(TABLE);
                    setState(994);
                    multipartIdentifier();
                    setState(996);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == PARTITION) {
                        {
                            setState(995);
                            partitionSpec();
                        }
                    }

                }
                break;
                case 65:
                    _localctx = new TruncateTableContext(_localctx);
                    enterOuterAlt(_localctx, 65);
                {
                    setState(998);
                    match(TRUNCATE);
                    setState(999);
                    match(TABLE);
                    setState(1000);
                    multipartIdentifier();
                    setState(1002);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == PARTITION) {
                        {
                            setState(1001);
                            partitionSpec();
                        }
                    }

                }
                break;
                case 66:
                    _localctx = new RepairTableContext(_localctx);
                    enterOuterAlt(_localctx, 66);
                {
                    setState(1004);
                    match(MSCK);
                    setState(1005);
                    match(REPAIR);
                    setState(1006);
                    match(TABLE);
                    setState(1007);
                    multipartIdentifier();
                    setState(1010);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == ADD || _la == DROP || _la == SYNC) {
                        {
                            setState(1008);
                            ((RepairTableContext) _localctx).option = _input.LT(1);
                            _la = _input.LA(1);
                            if (!(_la == ADD || _la == DROP || _la == SYNC)) {
                                ((RepairTableContext) _localctx).option = (Token) _errHandler.recoverInline(this);
                            } else {
                                if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                _errHandler.reportMatch(this);
                                consume();
                            }
                            setState(1009);
                            match(PARTITIONS);
                        }
                    }

                }
                break;
                case 67:
                    _localctx = new ManageResourceContext(_localctx);
                    enterOuterAlt(_localctx, 67);
                {
                    setState(1012);
                    ((ManageResourceContext) _localctx).op = _input.LT(1);
                    _la = _input.LA(1);
                    if (!(_la == ADD || _la == LIST)) {
                        ((ManageResourceContext) _localctx).op = (Token) _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(1013);
                    identifier();
                    setState(1017);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 105, _ctx);
                    while (_alt != 1 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt == 1 + 1) {
                            {
                                {
                                    setState(1014);
                                    matchWildcard();
                                }
                            }
                        }
                        setState(1019);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 105, _ctx);
                    }
                }
                break;
                case 68:
                    _localctx = new FailNativeCommandContext(_localctx);
                    enterOuterAlt(_localctx, 68);
                {
                    setState(1020);
                    match(SET);
                    setState(1021);
                    match(ROLE);
                    setState(1025);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 106, _ctx);
                    while (_alt != 1 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt == 1 + 1) {
                            {
                                {
                                    setState(1022);
                                    matchWildcard();
                                }
                            }
                        }
                        setState(1027);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 106, _ctx);
                    }
                }
                break;
                case 69:
                    _localctx = new SetTimeZoneContext(_localctx);
                    enterOuterAlt(_localctx, 69);
                {
                    setState(1028);
                    match(SET);
                    setState(1029);
                    match(TIME);
                    setState(1030);
                    match(ZONE);
                    setState(1031);
                    interval();
                }
                break;
                case 70:
                    _localctx = new SetTimeZoneContext(_localctx);
                    enterOuterAlt(_localctx, 70);
                {
                    setState(1032);
                    match(SET);
                    setState(1033);
                    match(TIME);
                    setState(1034);
                    match(ZONE);
                    setState(1035);
                    ((SetTimeZoneContext) _localctx).timezone = _input.LT(1);
                    _la = _input.LA(1);
                    if (!(_la == LOCAL || _la == STRING)) {
                        ((SetTimeZoneContext) _localctx).timezone = (Token) _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                }
                break;
                case 71:
                    _localctx = new SetTimeZoneContext(_localctx);
                    enterOuterAlt(_localctx, 71);
                {
                    setState(1036);
                    match(SET);
                    setState(1037);
                    match(TIME);
                    setState(1038);
                    match(ZONE);
                    setState(1042);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 107, _ctx);
                    while (_alt != 1 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt == 1 + 1) {
                            {
                                {
                                    setState(1039);
                                    matchWildcard();
                                }
                            }
                        }
                        setState(1044);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 107, _ctx);
                    }
                }
                break;
                case 72:
                    _localctx = new SetQuotedConfigurationContext(_localctx);
                    enterOuterAlt(_localctx, 72);
                {
                    setState(1045);
                    match(SET);
                    setState(1046);
                    configKey();
                    setState(1047);
                    match(EQ);
                    setState(1048);
                    configValue();
                }
                break;
                case 73:
                    _localctx = new SetConfigurationContext(_localctx);
                    enterOuterAlt(_localctx, 73);
                {
                    setState(1050);
                    match(SET);
                    setState(1051);
                    configKey();
                    setState(1059);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == EQ) {
                        {
                            setState(1052);
                            match(EQ);
                            setState(1056);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 108, _ctx);
                            while (_alt != 1 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                                if (_alt == 1 + 1) {
                                    {
                                        {
                                            setState(1053);
                                            matchWildcard();
                                        }
                                    }
                                }
                                setState(1058);
                                _errHandler.sync(this);
                                _alt = getInterpreter().adaptivePredict(_input, 108, _ctx);
                            }
                        }
                    }

                }
                break;
                case 74:
                    _localctx = new SetQuotedConfigurationContext(_localctx);
                    enterOuterAlt(_localctx, 74);
                {
                    setState(1061);
                    match(SET);
                    setState(1065);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 110, _ctx);
                    while (_alt != 1 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt == 1 + 1) {
                            {
                                {
                                    setState(1062);
                                    matchWildcard();
                                }
                            }
                        }
                        setState(1067);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 110, _ctx);
                    }
                    setState(1068);
                    match(EQ);
                    setState(1069);
                    configValue();
                }
                break;
                case 75:
                    _localctx = new SetConfigurationContext(_localctx);
                    enterOuterAlt(_localctx, 75);
                {
                    setState(1070);
                    match(SET);
                    setState(1074);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 111, _ctx);
                    while (_alt != 1 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt == 1 + 1) {
                            {
                                {
                                    setState(1071);
                                    matchWildcard();
                                }
                            }
                        }
                        setState(1076);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 111, _ctx);
                    }
                }
                break;
                case 76:
                    _localctx = new ResetQuotedConfigurationContext(_localctx);
                    enterOuterAlt(_localctx, 76);
                {
                    setState(1077);
                    match(RESET);
                    setState(1078);
                    configKey();
                }
                break;
                case 77:
                    _localctx = new ResetConfigurationContext(_localctx);
                    enterOuterAlt(_localctx, 77);
                {
                    setState(1079);
                    match(RESET);
                    setState(1083);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 112, _ctx);
                    while (_alt != 1 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt == 1 + 1) {
                            {
                                {
                                    setState(1080);
                                    matchWildcard();
                                }
                            }
                        }
                        setState(1085);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 112, _ctx);
                    }
                }
                break;
                case 78:
                    _localctx = new CreateIndexContext(_localctx);
                    enterOuterAlt(_localctx, 78);
                {
                    setState(1086);
                    match(CREATE);
                    setState(1087);
                    match(INDEX);
                    setState(1091);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 113, _ctx)) {
                        case 1: {
                            setState(1088);
                            match(IF);
                            setState(1089);
                            match(NOT);
                            setState(1090);
                            match(EXISTS);
                        }
                        break;
                    }
                    setState(1093);
                    identifier();
                    setState(1094);
                    match(ON);
                    setState(1096);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 114, _ctx)) {
                        case 1: {
                            setState(1095);
                            match(TABLE);
                        }
                        break;
                    }
                    setState(1098);
                    multipartIdentifier();
                    setState(1101);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == USING) {
                        {
                            setState(1099);
                            match(USING);
                            setState(1100);
                            ((CreateIndexContext) _localctx).indexType = identifier();
                        }
                    }

                    setState(1103);
                    match(LEFT_PAREN);
                    setState(1104);
                    ((CreateIndexContext) _localctx).columns = multipartIdentifierPropertyList();
                    setState(1105);
                    match(RIGHT_PAREN);
                    setState(1108);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == OPTIONS) {
                        {
                            setState(1106);
                            match(OPTIONS);
                            setState(1107);
                            ((CreateIndexContext) _localctx).options = propertyList();
                        }
                    }

                }
                break;
                case 79:
                    _localctx = new DropIndexContext(_localctx);
                    enterOuterAlt(_localctx, 79);
                {
                    setState(1110);
                    match(DROP);
                    setState(1111);
                    match(INDEX);
                    setState(1114);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 117, _ctx)) {
                        case 1: {
                            setState(1112);
                            match(IF);
                            setState(1113);
                            match(EXISTS);
                        }
                        break;
                    }
                    setState(1116);
                    identifier();
                    setState(1117);
                    match(ON);
                    setState(1119);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 118, _ctx)) {
                        case 1: {
                            setState(1118);
                            match(TABLE);
                        }
                        break;
                    }
                    setState(1121);
                    multipartIdentifier();
                }
                break;
                case 80:
                    _localctx = new FailNativeCommandContext(_localctx);
                    enterOuterAlt(_localctx, 80);
                {
                    setState(1123);
                    unsupportedHiveNativeCommands();
                    setState(1127);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 119, _ctx);
                    while (_alt != 1 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt == 1 + 1) {
                            {
                                {
                                    setState(1124);
                                    matchWildcard();
                                }
                            }
                        }
                        setState(1129);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 119, _ctx);
                    }
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ConfigKeyContext configKey() throws RecognitionException {
        ConfigKeyContext _localctx = new ConfigKeyContext(_ctx, getState());
        enterRule(_localctx, 16, RULE_configKey);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1132);
                quotedIdentifier();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ConfigValueContext configValue() throws RecognitionException {
        ConfigValueContext _localctx = new ConfigValueContext(_ctx, getState());
        enterRule(_localctx, 18, RULE_configValue);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1134);
                quotedIdentifier();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final UnsupportedHiveNativeCommandsContext unsupportedHiveNativeCommands() throws RecognitionException {
        UnsupportedHiveNativeCommandsContext _localctx = new UnsupportedHiveNativeCommandsContext(_ctx, getState());
        enterRule(_localctx, 20, RULE_unsupportedHiveNativeCommands);
        int _la;
        try {
            setState(1304);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 128, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1136);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(CREATE);
                    setState(1137);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(ROLE);
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1138);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(DROP);
                    setState(1139);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(ROLE);
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(1140);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(GRANT);
                    setState(1142);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 121, _ctx)) {
                        case 1: {
                            setState(1141);
                            ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(ROLE);
                        }
                        break;
                    }
                }
                break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(1144);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(REVOKE);
                    setState(1146);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 122, _ctx)) {
                        case 1: {
                            setState(1145);
                            ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(ROLE);
                        }
                        break;
                    }
                }
                break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                {
                    setState(1148);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(SHOW);
                    setState(1149);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(GRANT);
                }
                break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                {
                    setState(1150);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(SHOW);
                    setState(1151);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(ROLE);
                    setState(1153);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 123, _ctx)) {
                        case 1: {
                            setState(1152);
                            ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(GRANT);
                        }
                        break;
                    }
                }
                break;
                case 7:
                    enterOuterAlt(_localctx, 7);
                {
                    setState(1155);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(SHOW);
                    setState(1156);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(PRINCIPALS);
                }
                break;
                case 8:
                    enterOuterAlt(_localctx, 8);
                {
                    setState(1157);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(SHOW);
                    setState(1158);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(ROLES);
                }
                break;
                case 9:
                    enterOuterAlt(_localctx, 9);
                {
                    setState(1159);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(SHOW);
                    setState(1160);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(CURRENT);
                    setState(1161);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(ROLES);
                }
                break;
                case 10:
                    enterOuterAlt(_localctx, 10);
                {
                    setState(1162);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(EXPORT);
                    setState(1163);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                }
                break;
                case 11:
                    enterOuterAlt(_localctx, 11);
                {
                    setState(1164);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(IMPORT);
                    setState(1165);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                }
                break;
                case 12:
                    enterOuterAlt(_localctx, 12);
                {
                    setState(1166);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(SHOW);
                    setState(1167);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(COMPACTIONS);
                }
                break;
                case 13:
                    enterOuterAlt(_localctx, 13);
                {
                    setState(1168);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(SHOW);
                    setState(1169);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(CREATE);
                    setState(1170);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(TABLE);
                }
                break;
                case 14:
                    enterOuterAlt(_localctx, 14);
                {
                    setState(1171);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(SHOW);
                    setState(1172);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TRANSACTIONS);
                }
                break;
                case 15:
                    enterOuterAlt(_localctx, 15);
                {
                    setState(1173);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(SHOW);
                    setState(1174);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(INDEXES);
                }
                break;
                case 16:
                    enterOuterAlt(_localctx, 16);
                {
                    setState(1175);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(SHOW);
                    setState(1176);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(LOCKS);
                }
                break;
                case 17:
                    enterOuterAlt(_localctx, 17);
                {
                    setState(1177);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(CREATE);
                    setState(1178);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(INDEX);
                }
                break;
                case 18:
                    enterOuterAlt(_localctx, 18);
                {
                    setState(1179);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(DROP);
                    setState(1180);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(INDEX);
                }
                break;
                case 19:
                    enterOuterAlt(_localctx, 19);
                {
                    setState(1181);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(ALTER);
                    setState(1182);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(INDEX);
                }
                break;
                case 20:
                    enterOuterAlt(_localctx, 20);
                {
                    setState(1183);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(LOCK);
                    setState(1184);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                }
                break;
                case 21:
                    enterOuterAlt(_localctx, 21);
                {
                    setState(1185);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(LOCK);
                    setState(1186);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(DATABASE);
                }
                break;
                case 22:
                    enterOuterAlt(_localctx, 22);
                {
                    setState(1187);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(UNLOCK);
                    setState(1188);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                }
                break;
                case 23:
                    enterOuterAlt(_localctx, 23);
                {
                    setState(1189);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(UNLOCK);
                    setState(1190);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(DATABASE);
                }
                break;
                case 24:
                    enterOuterAlt(_localctx, 24);
                {
                    setState(1191);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(CREATE);
                    setState(1192);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TEMPORARY);
                    setState(1193);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(MACRO);
                }
                break;
                case 25:
                    enterOuterAlt(_localctx, 25);
                {
                    setState(1194);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(DROP);
                    setState(1195);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TEMPORARY);
                    setState(1196);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(MACRO);
                }
                break;
                case 26:
                    enterOuterAlt(_localctx, 26);
                {
                    setState(1197);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(ALTER);
                    setState(1198);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                    setState(1199);
                    tableIdentifier();
                    setState(1200);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(NOT);
                    setState(1201);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw4 = match(CLUSTERED);
                }
                break;
                case 27:
                    enterOuterAlt(_localctx, 27);
                {
                    setState(1203);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(ALTER);
                    setState(1204);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                    setState(1205);
                    tableIdentifier();
                    setState(1206);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(CLUSTERED);
                    setState(1207);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw4 = match(BY);
                }
                break;
                case 28:
                    enterOuterAlt(_localctx, 28);
                {
                    setState(1209);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(ALTER);
                    setState(1210);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                    setState(1211);
                    tableIdentifier();
                    setState(1212);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(NOT);
                    setState(1213);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw4 = match(SORTED);
                }
                break;
                case 29:
                    enterOuterAlt(_localctx, 29);
                {
                    setState(1215);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(ALTER);
                    setState(1216);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                    setState(1217);
                    tableIdentifier();
                    setState(1218);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(SKEWED);
                    setState(1219);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw4 = match(BY);
                }
                break;
                case 30:
                    enterOuterAlt(_localctx, 30);
                {
                    setState(1221);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(ALTER);
                    setState(1222);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                    setState(1223);
                    tableIdentifier();
                    setState(1224);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(NOT);
                    setState(1225);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw4 = match(SKEWED);
                }
                break;
                case 31:
                    enterOuterAlt(_localctx, 31);
                {
                    setState(1227);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(ALTER);
                    setState(1228);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                    setState(1229);
                    tableIdentifier();
                    setState(1230);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(NOT);
                    setState(1231);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw4 = match(STORED);
                    setState(1232);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw5 = match(AS);
                    setState(1233);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw6 = match(DIRECTORIES);
                }
                break;
                case 32:
                    enterOuterAlt(_localctx, 32);
                {
                    setState(1235);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(ALTER);
                    setState(1236);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                    setState(1237);
                    tableIdentifier();
                    setState(1238);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(SET);
                    setState(1239);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw4 = match(SKEWED);
                    setState(1240);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw5 = match(LOCATION);
                }
                break;
                case 33:
                    enterOuterAlt(_localctx, 33);
                {
                    setState(1242);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(ALTER);
                    setState(1243);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                    setState(1244);
                    tableIdentifier();
                    setState(1245);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(EXCHANGE);
                    setState(1246);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw4 = match(PARTITION);
                }
                break;
                case 34:
                    enterOuterAlt(_localctx, 34);
                {
                    setState(1248);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(ALTER);
                    setState(1249);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                    setState(1250);
                    tableIdentifier();
                    setState(1251);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(ARCHIVE);
                    setState(1252);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw4 = match(PARTITION);
                }
                break;
                case 35:
                    enterOuterAlt(_localctx, 35);
                {
                    setState(1254);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(ALTER);
                    setState(1255);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                    setState(1256);
                    tableIdentifier();
                    setState(1257);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(UNARCHIVE);
                    setState(1258);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw4 = match(PARTITION);
                }
                break;
                case 36:
                    enterOuterAlt(_localctx, 36);
                {
                    setState(1260);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(ALTER);
                    setState(1261);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                    setState(1262);
                    tableIdentifier();
                    setState(1263);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(TOUCH);
                }
                break;
                case 37:
                    enterOuterAlt(_localctx, 37);
                {
                    setState(1265);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(ALTER);
                    setState(1266);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                    setState(1267);
                    tableIdentifier();
                    setState(1269);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == PARTITION) {
                        {
                            setState(1268);
                            partitionSpec();
                        }
                    }

                    setState(1271);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(COMPACT);
                }
                break;
                case 38:
                    enterOuterAlt(_localctx, 38);
                {
                    setState(1273);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(ALTER);
                    setState(1274);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                    setState(1275);
                    tableIdentifier();
                    setState(1277);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == PARTITION) {
                        {
                            setState(1276);
                            partitionSpec();
                        }
                    }

                    setState(1279);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(CONCATENATE);
                }
                break;
                case 39:
                    enterOuterAlt(_localctx, 39);
                {
                    setState(1281);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(ALTER);
                    setState(1282);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                    setState(1283);
                    tableIdentifier();
                    setState(1285);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == PARTITION) {
                        {
                            setState(1284);
                            partitionSpec();
                        }
                    }

                    setState(1287);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(SET);
                    setState(1288);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw4 = match(FILEFORMAT);
                }
                break;
                case 40:
                    enterOuterAlt(_localctx, 40);
                {
                    setState(1290);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(ALTER);
                    setState(1291);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TABLE);
                    setState(1292);
                    tableIdentifier();
                    setState(1294);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == PARTITION) {
                        {
                            setState(1293);
                            partitionSpec();
                        }
                    }

                    setState(1296);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw3 = match(REPLACE);
                    setState(1297);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw4 = match(COLUMNS);
                }
                break;
                case 41:
                    enterOuterAlt(_localctx, 41);
                {
                    setState(1299);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(START);
                    setState(1300);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw2 = match(TRANSACTION);
                }
                break;
                case 42:
                    enterOuterAlt(_localctx, 42);
                {
                    setState(1301);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(COMMIT);
                }
                break;
                case 43:
                    enterOuterAlt(_localctx, 43);
                {
                    setState(1302);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(ROLLBACK);
                }
                break;
                case 44:
                    enterOuterAlt(_localctx, 44);
                {
                    setState(1303);
                    ((UnsupportedHiveNativeCommandsContext) _localctx).kw1 = match(DFS);
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final CreateTableHeaderContext createTableHeader() throws RecognitionException {
        CreateTableHeaderContext _localctx = new CreateTableHeaderContext(_ctx, getState());
        enterRule(_localctx, 22, RULE_createTableHeader);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1306);
                match(CREATE);
                setState(1308);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == TEMPORARY) {
                    {
                        setState(1307);
                        match(TEMPORARY);
                    }
                }

                setState(1311);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == EXTERNAL) {
                    {
                        setState(1310);
                        match(EXTERNAL);
                    }
                }

                setState(1313);
                match(TABLE);
                setState(1317);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 131, _ctx)) {
                    case 1: {
                        setState(1314);
                        match(IF);
                        setState(1315);
                        match(NOT);
                        setState(1316);
                        match(EXISTS);
                    }
                    break;
                }
                setState(1319);
                multipartIdentifier();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ReplaceTableHeaderContext replaceTableHeader() throws RecognitionException {
        ReplaceTableHeaderContext _localctx = new ReplaceTableHeaderContext(_ctx, getState());
        enterRule(_localctx, 24, RULE_replaceTableHeader);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1323);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == CREATE) {
                    {
                        setState(1321);
                        match(CREATE);
                        setState(1322);
                        match(OR);
                    }
                }

                setState(1325);
                match(REPLACE);
                setState(1326);
                match(TABLE);
                setState(1327);
                multipartIdentifier();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final BucketSpecContext bucketSpec() throws RecognitionException {
        BucketSpecContext _localctx = new BucketSpecContext(_ctx, getState());
        enterRule(_localctx, 26, RULE_bucketSpec);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1329);
                match(CLUSTERED);
                setState(1330);
                match(BY);
                setState(1331);
                identifierList();
                setState(1335);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == SORTED) {
                    {
                        setState(1332);
                        match(SORTED);
                        setState(1333);
                        match(BY);
                        setState(1334);
                        orderedIdentifierList();
                    }
                }

                setState(1337);
                match(INTO);
                setState(1338);
                match(INTEGER_VALUE);
                setState(1339);
                match(BUCKETS);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final SkewSpecContext skewSpec() throws RecognitionException {
        SkewSpecContext _localctx = new SkewSpecContext(_ctx, getState());
        enterRule(_localctx, 28, RULE_skewSpec);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1341);
                match(SKEWED);
                setState(1342);
                match(BY);
                setState(1343);
                identifierList();
                setState(1344);
                match(ON);
                setState(1347);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 134, _ctx)) {
                    case 1: {
                        setState(1345);
                        constantList();
                    }
                    break;
                    case 2: {
                        setState(1346);
                        nestedConstantList();
                    }
                    break;
                }
                setState(1352);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 135, _ctx)) {
                    case 1: {
                        setState(1349);
                        match(STORED);
                        setState(1350);
                        match(AS);
                        setState(1351);
                        match(DIRECTORIES);
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final LocationSpecContext locationSpec() throws RecognitionException {
        LocationSpecContext _localctx = new LocationSpecContext(_ctx, getState());
        enterRule(_localctx, 30, RULE_locationSpec);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1354);
                match(LOCATION);
                setState(1355);
                match(STRING);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final CommentSpecContext commentSpec() throws RecognitionException {
        CommentSpecContext _localctx = new CommentSpecContext(_ctx, getState());
        enterRule(_localctx, 32, RULE_commentSpec);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1357);
                match(COMMENT);
                setState(1358);
                match(STRING);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final QueryContext query() throws RecognitionException {
        QueryContext _localctx = new QueryContext(_ctx, getState());
        enterRule(_localctx, 34, RULE_query);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1361);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == WITH) {
                    {
                        setState(1360);
                        ctes();
                    }
                }

                setState(1363);
                queryTerm(0);
                setState(1364);
                queryOrganization();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final InsertIntoContext insertInto() throws RecognitionException {
        InsertIntoContext _localctx = new InsertIntoContext(_ctx, getState());
        enterRule(_localctx, 36, RULE_insertInto);
        int _la;
        try {
            setState(1427);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 151, _ctx)) {
                case 1:
                    _localctx = new InsertOverwriteTableContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1366);
                    match(INSERT);
                    setState(1367);
                    match(OVERWRITE);
                    setState(1369);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 137, _ctx)) {
                        case 1: {
                            setState(1368);
                            match(TABLE);
                        }
                        break;
                    }
                    setState(1371);
                    multipartIdentifier();
                    setState(1378);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == PARTITION) {
                        {
                            setState(1372);
                            partitionSpec();
                            setState(1376);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == IF) {
                                {
                                    setState(1373);
                                    match(IF);
                                    setState(1374);
                                    match(NOT);
                                    setState(1375);
                                    match(EXISTS);
                                }
                            }

                        }
                    }

                    setState(1381);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 140, _ctx)) {
                        case 1: {
                            setState(1380);
                            identifierList();
                        }
                        break;
                    }
                }
                break;
                case 2:
                    _localctx = new InsertIntoTableContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1383);
                    match(INSERT);
                    setState(1384);
                    match(INTO);
                    setState(1386);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 141, _ctx)) {
                        case 1: {
                            setState(1385);
                            match(TABLE);
                        }
                        break;
                    }
                    setState(1388);
                    multipartIdentifier();
                    setState(1390);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == PARTITION) {
                        {
                            setState(1389);
                            partitionSpec();
                        }
                    }

                    setState(1395);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == IF) {
                        {
                            setState(1392);
                            match(IF);
                            setState(1393);
                            match(NOT);
                            setState(1394);
                            match(EXISTS);
                        }
                    }

                    setState(1398);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 144, _ctx)) {
                        case 1: {
                            setState(1397);
                            identifierList();
                        }
                        break;
                    }
                }
                break;
                case 3:
                    _localctx = new InsertOverwriteHiveDirContext(_localctx);
                    enterOuterAlt(_localctx, 3);
                {
                    setState(1400);
                    match(INSERT);
                    setState(1401);
                    match(OVERWRITE);
                    setState(1403);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == LOCAL) {
                        {
                            setState(1402);
                            match(LOCAL);
                        }
                    }

                    setState(1405);
                    match(DIRECTORY);
                    setState(1406);
                    ((InsertOverwriteHiveDirContext) _localctx).path = match(STRING);
                    setState(1408);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == ROW) {
                        {
                            setState(1407);
                            rowFormat();
                        }
                    }

                    setState(1411);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == STORED) {
                        {
                            setState(1410);
                            createFileFormat();
                        }
                    }

                }
                break;
                case 4:
                    _localctx = new InsertOverwriteDirContext(_localctx);
                    enterOuterAlt(_localctx, 4);
                {
                    setState(1413);
                    match(INSERT);
                    setState(1414);
                    match(OVERWRITE);
                    setState(1416);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == LOCAL) {
                        {
                            setState(1415);
                            match(LOCAL);
                        }
                    }

                    setState(1418);
                    match(DIRECTORY);
                    setState(1420);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == STRING) {
                        {
                            setState(1419);
                            ((InsertOverwriteDirContext) _localctx).path = match(STRING);
                        }
                    }

                    setState(1422);
                    tableProvider();
                    setState(1425);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == OPTIONS) {
                        {
                            setState(1423);
                            match(OPTIONS);
                            setState(1424);
                            ((InsertOverwriteDirContext) _localctx).options = propertyList();
                        }
                    }

                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final PartitionSpecLocationContext partitionSpecLocation() throws RecognitionException {
        PartitionSpecLocationContext _localctx = new PartitionSpecLocationContext(_ctx, getState());
        enterRule(_localctx, 38, RULE_partitionSpecLocation);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1429);
                partitionSpec();
                setState(1431);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == LOCATION) {
                    {
                        setState(1430);
                        locationSpec();
                    }
                }

            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final PartitionSpecContext partitionSpec() throws RecognitionException {
        PartitionSpecContext _localctx = new PartitionSpecContext(_ctx, getState());
        enterRule(_localctx, 40, RULE_partitionSpec);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1433);
                match(PARTITION);
                setState(1434);
                match(LEFT_PAREN);
                setState(1435);
                partitionVal();
                setState(1440);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(1436);
                            match(COMMA);
                            setState(1437);
                            partitionVal();
                        }
                    }
                    setState(1442);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(1443);
                match(RIGHT_PAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final PartitionValContext partitionVal() throws RecognitionException {
        PartitionValContext _localctx = new PartitionValContext(_ctx, getState());
        enterRule(_localctx, 42, RULE_partitionVal);
        int _la;
        try {
            setState(1454);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 155, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1445);
                    identifier();
                    setState(1448);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == EQ) {
                        {
                            setState(1446);
                            match(EQ);
                            setState(1447);
                            constant();
                        }
                    }

                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1450);
                    identifier();
                    setState(1451);
                    match(EQ);
                    setState(1452);
                    match(DEFAULT);
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final NamespaceContext namespace() throws RecognitionException {
        NamespaceContext _localctx = new NamespaceContext(_ctx, getState());
        enterRule(_localctx, 44, RULE_namespace);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1456);
                _la = _input.LA(1);
                if (!(_la == DATABASE || _la == NAMESPACE || _la == SCHEMA)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final NamespacesContext namespaces() throws RecognitionException {
        NamespacesContext _localctx = new NamespacesContext(_ctx, getState());
        enterRule(_localctx, 46, RULE_namespaces);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1458);
                _la = _input.LA(1);
                if (!(_la == DATABASES || _la == NAMESPACES || _la == SCHEMAS)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final DescribeFuncNameContext describeFuncName() throws RecognitionException {
        DescribeFuncNameContext _localctx = new DescribeFuncNameContext(_ctx, getState());
        enterRule(_localctx, 48, RULE_describeFuncName);
        try {
            setState(1465);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 156, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1460);
                    qualifiedName();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1461);
                    match(STRING);
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(1462);
                    comparisonOperator();
                }
                break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(1463);
                    arithmeticOperator();
                }
                break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                {
                    setState(1464);
                    predicateOperator();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final DescribeColNameContext describeColName() throws RecognitionException {
        DescribeColNameContext _localctx = new DescribeColNameContext(_ctx, getState());
        enterRule(_localctx, 50, RULE_describeColName);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1467);
                ((DescribeColNameContext) _localctx).identifier = identifier();
                ((DescribeColNameContext) _localctx).nameParts.add(((DescribeColNameContext) _localctx).identifier);
                setState(1472);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == DOT) {
                    {
                        {
                            setState(1468);
                            match(DOT);
                            setState(1469);
                            ((DescribeColNameContext) _localctx).identifier = identifier();
                            ((DescribeColNameContext) _localctx).nameParts.add(((DescribeColNameContext) _localctx).identifier);
                        }
                    }
                    setState(1474);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final CtesContext ctes() throws RecognitionException {
        CtesContext _localctx = new CtesContext(_ctx, getState());
        enterRule(_localctx, 52, RULE_ctes);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1475);
                match(WITH);
                setState(1476);
                namedQuery();
                setState(1481);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(1477);
                            match(COMMA);
                            setState(1478);
                            namedQuery();
                        }
                    }
                    setState(1483);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final NamedQueryContext namedQuery() throws RecognitionException {
        NamedQueryContext _localctx = new NamedQueryContext(_ctx, getState());
        enterRule(_localctx, 54, RULE_namedQuery);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1484);
                ((NamedQueryContext) _localctx).name = errorCapturingIdentifier();
                setState(1486);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 159, _ctx)) {
                    case 1: {
                        setState(1485);
                        ((NamedQueryContext) _localctx).columnAliases = identifierList();
                    }
                    break;
                }
                setState(1489);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == AS) {
                    {
                        setState(1488);
                        match(AS);
                    }
                }

                setState(1491);
                match(LEFT_PAREN);
                setState(1492);
                query();
                setState(1493);
                match(RIGHT_PAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final TableProviderContext tableProvider() throws RecognitionException {
        TableProviderContext _localctx = new TableProviderContext(_ctx, getState());
        enterRule(_localctx, 56, RULE_tableProvider);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1495);
                match(USING);
                setState(1496);
                multipartIdentifier();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final CreateTableClausesContext createTableClauses() throws RecognitionException {
        CreateTableClausesContext _localctx = new CreateTableClausesContext(_ctx, getState());
        enterRule(_localctx, 58, RULE_createTableClauses);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1513);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == CLUSTERED || _la == COMMENT || ((((_la - 143)) & ~0x3f) == 0 && ((1L << (_la - 143)) & ((1L << (LOCATION - 143)) | (1L << (OPTIONS - 143)) | (1L << (PARTITIONED - 143)))) != 0) || ((((_la - 215)) & ~0x3f) == 0 && ((1L << (_la - 215)) & ((1L << (ROW - 215)) | (1L << (SKEWED - 215)) | (1L << (STORED - 215)) | (1L << (TBLPROPERTIES - 215)))) != 0)) {
                    {
                        setState(1511);
                        _errHandler.sync(this);
                        switch (_input.LA(1)) {
                            case OPTIONS: {
                                {
                                    setState(1498);
                                    match(OPTIONS);
                                    setState(1499);
                                    ((CreateTableClausesContext) _localctx).options = propertyList();
                                }
                            }
                            break;
                            case PARTITIONED: {
                                {
                                    setState(1500);
                                    match(PARTITIONED);
                                    setState(1501);
                                    match(BY);
                                    setState(1502);
                                    ((CreateTableClausesContext) _localctx).partitioning = partitionFieldList();
                                }
                            }
                            break;
                            case SKEWED: {
                                setState(1503);
                                skewSpec();
                            }
                            break;
                            case CLUSTERED: {
                                setState(1504);
                                bucketSpec();
                            }
                            break;
                            case ROW: {
                                setState(1505);
                                rowFormat();
                            }
                            break;
                            case STORED: {
                                setState(1506);
                                createFileFormat();
                            }
                            break;
                            case LOCATION: {
                                setState(1507);
                                locationSpec();
                            }
                            break;
                            case COMMENT: {
                                setState(1508);
                                commentSpec();
                            }
                            break;
                            case TBLPROPERTIES: {
                                {
                                    setState(1509);
                                    match(TBLPROPERTIES);
                                    setState(1510);
                                    ((CreateTableClausesContext) _localctx).tableProps = propertyList();
                                }
                            }
                            break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    setState(1515);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final PropertyListContext propertyList() throws RecognitionException {
        PropertyListContext _localctx = new PropertyListContext(_ctx, getState());
        enterRule(_localctx, 60, RULE_propertyList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1516);
                match(LEFT_PAREN);
                setState(1517);
                property();
                setState(1522);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(1518);
                            match(COMMA);
                            setState(1519);
                            property();
                        }
                    }
                    setState(1524);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(1525);
                match(RIGHT_PAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final PropertyContext property() throws RecognitionException {
        PropertyContext _localctx = new PropertyContext(_ctx, getState());
        enterRule(_localctx, 62, RULE_property);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1527);
                ((PropertyContext) _localctx).key = propertyKey();
                setState(1532);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == FALSE || ((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & ((1L << (TRUE - 262)) | (1L << (EQ - 262)) | (1L << (STRING - 262)) | (1L << (INTEGER_VALUE - 262)) | (1L << (DECIMAL_VALUE - 262)))) != 0)) {
                    {
                        setState(1529);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == EQ) {
                            {
                                setState(1528);
                                match(EQ);
                            }
                        }

                        setState(1531);
                        ((PropertyContext) _localctx).value = propertyValue();
                    }
                }

            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final PropertyKeyContext propertyKey() throws RecognitionException {
        PropertyKeyContext _localctx = new PropertyKeyContext(_ctx, getState());
        enterRule(_localctx, 64, RULE_propertyKey);
        int _la;
        try {
            setState(1543);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 167, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1534);
                    identifier();
                    setState(1539);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la == DOT) {
                        {
                            {
                                setState(1535);
                                match(DOT);
                                setState(1536);
                                identifier();
                            }
                        }
                        setState(1541);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1542);
                    match(STRING);
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final PropertyValueContext propertyValue() throws RecognitionException {
        PropertyValueContext _localctx = new PropertyValueContext(_ctx, getState());
        enterRule(_localctx, 66, RULE_propertyValue);
        try {
            setState(1549);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case INTEGER_VALUE:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1545);
                    match(INTEGER_VALUE);
                }
                break;
                case DECIMAL_VALUE:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1546);
                    match(DECIMAL_VALUE);
                }
                break;
                case FALSE:
                case TRUE:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(1547);
                    booleanValue();
                }
                break;
                case STRING:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(1548);
                    match(STRING);
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ConstantListContext constantList() throws RecognitionException {
        ConstantListContext _localctx = new ConstantListContext(_ctx, getState());
        enterRule(_localctx, 68, RULE_constantList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1551);
                match(LEFT_PAREN);
                setState(1552);
                constant();
                setState(1557);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(1553);
                            match(COMMA);
                            setState(1554);
                            constant();
                        }
                    }
                    setState(1559);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(1560);
                match(RIGHT_PAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final NestedConstantListContext nestedConstantList() throws RecognitionException {
        NestedConstantListContext _localctx = new NestedConstantListContext(_ctx, getState());
        enterRule(_localctx, 70, RULE_nestedConstantList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1562);
                match(LEFT_PAREN);
                setState(1563);
                constantList();
                setState(1568);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(1564);
                            match(COMMA);
                            setState(1565);
                            constantList();
                        }
                    }
                    setState(1570);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(1571);
                match(RIGHT_PAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final CreateFileFormatContext createFileFormat() throws RecognitionException {
        CreateFileFormatContext _localctx = new CreateFileFormatContext(_ctx, getState());
        enterRule(_localctx, 72, RULE_createFileFormat);
        try {
            setState(1579);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 171, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1573);
                    match(STORED);
                    setState(1574);
                    match(AS);
                    setState(1575);
                    fileFormat();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1576);
                    match(STORED);
                    setState(1577);
                    match(BY);
                    setState(1578);
                    storageHandler();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final FileFormatContext fileFormat() throws RecognitionException {
        FileFormatContext _localctx = new FileFormatContext(_ctx, getState());
        enterRule(_localctx, 74, RULE_fileFormat);
        try {
            setState(1586);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 172, _ctx)) {
                case 1:
                    _localctx = new TableFileFormatContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1581);
                    match(INPUTFORMAT);
                    setState(1582);
                    ((TableFileFormatContext) _localctx).inFmt = match(STRING);
                    setState(1583);
                    match(OUTPUTFORMAT);
                    setState(1584);
                    ((TableFileFormatContext) _localctx).outFmt = match(STRING);
                }
                break;
                case 2:
                    _localctx = new GenericFileFormatContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1585);
                    identifier();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final StorageHandlerContext storageHandler() throws RecognitionException {
        StorageHandlerContext _localctx = new StorageHandlerContext(_ctx, getState());
        enterRule(_localctx, 76, RULE_storageHandler);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1588);
                match(STRING);
                setState(1592);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 173, _ctx)) {
                    case 1: {
                        setState(1589);
                        match(WITH);
                        setState(1590);
                        match(SERDEPROPERTIES);
                        setState(1591);
                        propertyList();
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ResourceContext resource() throws RecognitionException {
        ResourceContext _localctx = new ResourceContext(_ctx, getState());
        enterRule(_localctx, 78, RULE_resource);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1594);
                identifier();
                setState(1595);
                match(STRING);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final DmlStatementNoWithContext dmlStatementNoWith() throws RecognitionException {
        DmlStatementNoWithContext _localctx = new DmlStatementNoWithContext(_ctx, getState());
        enterRule(_localctx, 80, RULE_dmlStatementNoWith);
        int _la;
        try {
            int _alt;
            setState(1647);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case INSERT:
                    _localctx = new SingleInsertQueryContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1597);
                    insertInto();
                    setState(1598);
                    query();
                }
                break;
                case FROM:
                    _localctx = new MultiInsertQueryContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1600);
                    fromClause();
                    setState(1602);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    do {
                        {
                            {
                                setState(1601);
                                multiInsertQueryBody();
                            }
                        }
                        setState(1604);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    } while (_la == INSERT);
                }
                break;
                case DELETE:
                    _localctx = new DeleteFromTableContext(_localctx);
                    enterOuterAlt(_localctx, 3);
                {
                    setState(1606);
                    match(DELETE);
                    setState(1607);
                    match(FROM);
                    setState(1608);
                    multipartIdentifier();
                    setState(1609);
                    tableAlias();
                    setState(1611);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == WHERE) {
                        {
                            setState(1610);
                            whereClause();
                        }
                    }

                }
                break;
                case UPDATE:
                    _localctx = new UpdateTableContext(_localctx);
                    enterOuterAlt(_localctx, 4);
                {
                    setState(1613);
                    match(UPDATE);
                    setState(1614);
                    multipartIdentifier();
                    setState(1615);
                    tableAlias();
                    setState(1616);
                    setClause();
                    setState(1618);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == WHERE) {
                        {
                            setState(1617);
                            whereClause();
                        }
                    }

                }
                break;
                case MERGE:
                    _localctx = new MergeIntoTableContext(_localctx);
                    enterOuterAlt(_localctx, 5);
                {
                    setState(1620);
                    match(MERGE);
                    setState(1621);
                    match(INTO);
                    setState(1622);
                    ((MergeIntoTableContext) _localctx).target = multipartIdentifier();
                    setState(1623);
                    ((MergeIntoTableContext) _localctx).targetAlias = tableAlias();
                    setState(1624);
                    match(USING);
                    setState(1630);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 177, _ctx)) {
                        case 1: {
                            setState(1625);
                            ((MergeIntoTableContext) _localctx).source = multipartIdentifier();
                        }
                        break;
                        case 2: {
                            setState(1626);
                            match(LEFT_PAREN);
                            setState(1627);
                            ((MergeIntoTableContext) _localctx).sourceQuery = query();
                            setState(1628);
                            match(RIGHT_PAREN);
                        }
                        break;
                    }
                    setState(1632);
                    ((MergeIntoTableContext) _localctx).sourceAlias = tableAlias();
                    setState(1633);
                    match(ON);
                    setState(1634);
                    ((MergeIntoTableContext) _localctx).mergeCondition = booleanExpression(0);
                    setState(1638);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 178, _ctx);
                    while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt == 1) {
                            {
                                {
                                    setState(1635);
                                    matchedClause();
                                }
                            }
                        }
                        setState(1640);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 178, _ctx);
                    }
                    setState(1644);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la == WHEN) {
                        {
                            {
                                setState(1641);
                                notMatchedClause();
                            }
                        }
                        setState(1646);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final QueryOrganizationContext queryOrganization() throws RecognitionException {
        QueryOrganizationContext _localctx = new QueryOrganizationContext(_ctx, getState());
        enterRule(_localctx, 82, RULE_queryOrganization);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1659);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 182, _ctx)) {
                    case 1: {
                        setState(1649);
                        match(ORDER);
                        setState(1650);
                        match(BY);
                        setState(1651);
                        ((QueryOrganizationContext) _localctx).sortItem = sortItem();
                        ((QueryOrganizationContext) _localctx).order.add(((QueryOrganizationContext) _localctx).sortItem);
                        setState(1656);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 181, _ctx);
                        while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt == 1) {
                                {
                                    {
                                        setState(1652);
                                        match(COMMA);
                                        setState(1653);
                                        ((QueryOrganizationContext) _localctx).sortItem = sortItem();
                                        ((QueryOrganizationContext) _localctx).order.add(((QueryOrganizationContext) _localctx).sortItem);
                                    }
                                }
                            }
                            setState(1658);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 181, _ctx);
                        }
                    }
                    break;
                }
                setState(1671);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 184, _ctx)) {
                    case 1: {
                        setState(1661);
                        match(CLUSTER);
                        setState(1662);
                        match(BY);
                        setState(1663);
                        ((QueryOrganizationContext) _localctx).expression = expression();
                        ((QueryOrganizationContext) _localctx).clusterBy.add(((QueryOrganizationContext) _localctx).expression);
                        setState(1668);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 183, _ctx);
                        while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt == 1) {
                                {
                                    {
                                        setState(1664);
                                        match(COMMA);
                                        setState(1665);
                                        ((QueryOrganizationContext) _localctx).expression = expression();
                                        ((QueryOrganizationContext) _localctx).clusterBy.add(((QueryOrganizationContext) _localctx).expression);
                                    }
                                }
                            }
                            setState(1670);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 183, _ctx);
                        }
                    }
                    break;
                }
                setState(1683);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 186, _ctx)) {
                    case 1: {
                        setState(1673);
                        match(DISTRIBUTE);
                        setState(1674);
                        match(BY);
                        setState(1675);
                        ((QueryOrganizationContext) _localctx).expression = expression();
                        ((QueryOrganizationContext) _localctx).distributeBy.add(((QueryOrganizationContext) _localctx).expression);
                        setState(1680);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 185, _ctx);
                        while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt == 1) {
                                {
                                    {
                                        setState(1676);
                                        match(COMMA);
                                        setState(1677);
                                        ((QueryOrganizationContext) _localctx).expression = expression();
                                        ((QueryOrganizationContext) _localctx).distributeBy.add(((QueryOrganizationContext) _localctx).expression);
                                    }
                                }
                            }
                            setState(1682);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 185, _ctx);
                        }
                    }
                    break;
                }
                setState(1695);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 188, _ctx)) {
                    case 1: {
                        setState(1685);
                        match(SORT);
                        setState(1686);
                        match(BY);
                        setState(1687);
                        ((QueryOrganizationContext) _localctx).sortItem = sortItem();
                        ((QueryOrganizationContext) _localctx).sort.add(((QueryOrganizationContext) _localctx).sortItem);
                        setState(1692);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 187, _ctx);
                        while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt == 1) {
                                {
                                    {
                                        setState(1688);
                                        match(COMMA);
                                        setState(1689);
                                        ((QueryOrganizationContext) _localctx).sortItem = sortItem();
                                        ((QueryOrganizationContext) _localctx).sort.add(((QueryOrganizationContext) _localctx).sortItem);
                                    }
                                }
                            }
                            setState(1694);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 187, _ctx);
                        }
                    }
                    break;
                }
                setState(1698);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 189, _ctx)) {
                    case 1: {
                        setState(1697);
                        windowClause();
                    }
                    break;
                }
                setState(1705);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 191, _ctx)) {
                    case 1: {
                        setState(1700);
                        match(LIMIT);
                        setState(1703);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 190, _ctx)) {
                            case 1: {
                                setState(1701);
                                match(ALL);
                            }
                            break;
                            case 2: {
                                setState(1702);
                                ((QueryOrganizationContext) _localctx).limit = expression();
                            }
                            break;
                        }
                    }
                    break;
                }
                setState(1709);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 192, _ctx)) {
                    case 1: {
                        setState(1707);
                        match(OFFSET);
                        setState(1708);
                        ((QueryOrganizationContext) _localctx).offset = expression();
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final MultiInsertQueryBodyContext multiInsertQueryBody() throws RecognitionException {
        MultiInsertQueryBodyContext _localctx = new MultiInsertQueryBodyContext(_ctx, getState());
        enterRule(_localctx, 84, RULE_multiInsertQueryBody);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1711);
                insertInto();
                setState(1712);
                fromStatementBody();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final QueryTermContext queryTerm() throws RecognitionException {
        return queryTerm(0);
    }

    private QueryTermContext queryTerm(int _p) throws RecognitionException {
        ParserRuleContext _parentctx = _ctx;
        int _parentState = getState();
        QueryTermContext _localctx = new QueryTermContext(_ctx, _parentState);
        QueryTermContext _prevctx = _localctx;
        int _startState = 86;
        enterRecursionRule(_localctx, 86, RULE_queryTerm, _p);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                {
                    _localctx = new QueryTermDefaultContext(_localctx);
                    _ctx = _localctx;
                    _prevctx = _localctx;

                    setState(1715);
                    queryPrimary();
                }
                _ctx.stop = _input.LT(-1);
                setState(1740);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 197, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        if (_parseListeners != null) triggerExitRuleEvent();
                        _prevctx = _localctx;
                        {
                            setState(1738);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 196, _ctx)) {
                                case 1: {
                                    _localctx = new SetOperationContext(new QueryTermContext(_parentctx, _parentState));
                                    ((SetOperationContext) _localctx).left = _prevctx;
                                    pushNewRecursionContext(_localctx, _startState, RULE_queryTerm);
                                    setState(1717);
                                    if (!(precpred(_ctx, 3)))
                                        throw new FailedPredicateException(this, "precpred(_ctx, 3)");
                                    setState(1718);
                                    if (!(legacy_setops_precedence_enabled))
                                        throw new FailedPredicateException(this, "legacy_setops_precedence_enabled");
                                    setState(1719);
                                    ((SetOperationContext) _localctx).operator = _input.LT(1);
                                    _la = _input.LA(1);
                                    if (!(_la == EXCEPT || _la == INTERSECT || _la == SETMINUS || _la == UNION)) {
                                        ((SetOperationContext) _localctx).operator = (Token) _errHandler.recoverInline(this);
                                    } else {
                                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                        _errHandler.reportMatch(this);
                                        consume();
                                    }
                                    setState(1721);
                                    _errHandler.sync(this);
                                    _la = _input.LA(1);
                                    if (_la == ALL || _la == DISTINCT) {
                                        {
                                            setState(1720);
                                            setQuantifier();
                                        }
                                    }

                                    setState(1723);
                                    ((SetOperationContext) _localctx).right = queryTerm(4);
                                }
                                break;
                                case 2: {
                                    _localctx = new SetOperationContext(new QueryTermContext(_parentctx, _parentState));
                                    ((SetOperationContext) _localctx).left = _prevctx;
                                    pushNewRecursionContext(_localctx, _startState, RULE_queryTerm);
                                    setState(1724);
                                    if (!(precpred(_ctx, 2)))
                                        throw new FailedPredicateException(this, "precpred(_ctx, 2)");
                                    setState(1725);
                                    if (!(!legacy_setops_precedence_enabled))
                                        throw new FailedPredicateException(this, "!legacy_setops_precedence_enabled");
                                    setState(1726);
                                    ((SetOperationContext) _localctx).operator = match(INTERSECT);
                                    setState(1728);
                                    _errHandler.sync(this);
                                    _la = _input.LA(1);
                                    if (_la == ALL || _la == DISTINCT) {
                                        {
                                            setState(1727);
                                            setQuantifier();
                                        }
                                    }

                                    setState(1730);
                                    ((SetOperationContext) _localctx).right = queryTerm(3);
                                }
                                break;
                                case 3: {
                                    _localctx = new SetOperationContext(new QueryTermContext(_parentctx, _parentState));
                                    ((SetOperationContext) _localctx).left = _prevctx;
                                    pushNewRecursionContext(_localctx, _startState, RULE_queryTerm);
                                    setState(1731);
                                    if (!(precpred(_ctx, 1)))
                                        throw new FailedPredicateException(this, "precpred(_ctx, 1)");
                                    setState(1732);
                                    if (!(!legacy_setops_precedence_enabled))
                                        throw new FailedPredicateException(this, "!legacy_setops_precedence_enabled");
                                    setState(1733);
                                    ((SetOperationContext) _localctx).operator = _input.LT(1);
                                    _la = _input.LA(1);
                                    if (!(_la == EXCEPT || _la == SETMINUS || _la == UNION)) {
                                        ((SetOperationContext) _localctx).operator = (Token) _errHandler.recoverInline(this);
                                    } else {
                                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                        _errHandler.reportMatch(this);
                                        consume();
                                    }
                                    setState(1735);
                                    _errHandler.sync(this);
                                    _la = _input.LA(1);
                                    if (_la == ALL || _la == DISTINCT) {
                                        {
                                            setState(1734);
                                            setQuantifier();
                                        }
                                    }

                                    setState(1737);
                                    ((SetOperationContext) _localctx).right = queryTerm(2);
                                }
                                break;
                            }
                        }
                    }
                    setState(1742);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 197, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    }

    public final QueryPrimaryContext queryPrimary() throws RecognitionException {
        QueryPrimaryContext _localctx = new QueryPrimaryContext(_ctx, getState());
        enterRule(_localctx, 88, RULE_queryPrimary);
        try {
            setState(1752);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case MAP:
                case REDUCE:
                case SELECT:
                    _localctx = new QueryPrimaryDefaultContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1743);
                    querySpecification();
                }
                break;
                case FROM:
                    _localctx = new FromStmtContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1744);
                    fromStatement();
                }
                break;
                case TABLE:
                    _localctx = new TableContext(_localctx);
                    enterOuterAlt(_localctx, 3);
                {
                    setState(1745);
                    match(TABLE);
                    setState(1746);
                    multipartIdentifier();
                }
                break;
                case VALUES:
                    _localctx = new InlineTableDefault1Context(_localctx);
                    enterOuterAlt(_localctx, 4);
                {
                    setState(1747);
                    inlineTable();
                }
                break;
                case LEFT_PAREN:
                    _localctx = new SubqueryContext(_localctx);
                    enterOuterAlt(_localctx, 5);
                {
                    setState(1748);
                    match(LEFT_PAREN);
                    setState(1749);
                    query();
                    setState(1750);
                    match(RIGHT_PAREN);
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final SortItemContext sortItem() throws RecognitionException {
        SortItemContext _localctx = new SortItemContext(_ctx, getState());
        enterRule(_localctx, 90, RULE_sortItem);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1754);
                expression();
                setState(1756);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 199, _ctx)) {
                    case 1: {
                        setState(1755);
                        ((SortItemContext) _localctx).ordering = _input.LT(1);
                        _la = _input.LA(1);
                        if (!(_la == ASC || _la == DESC)) {
                            ((SortItemContext) _localctx).ordering = (Token) _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                    }
                    break;
                }
                setState(1760);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 200, _ctx)) {
                    case 1: {
                        setState(1758);
                        match(NULLS);
                        setState(1759);
                        ((SortItemContext) _localctx).nullOrder = _input.LT(1);
                        _la = _input.LA(1);
                        if (!(_la == FIRST || _la == LAST)) {
                            ((SortItemContext) _localctx).nullOrder = (Token) _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final FromStatementContext fromStatement() throws RecognitionException {
        FromStatementContext _localctx = new FromStatementContext(_ctx, getState());
        enterRule(_localctx, 92, RULE_fromStatement);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1762);
                fromClause();
                setState(1764);
                _errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1: {
                            {
                                setState(1763);
                                fromStatementBody();
                            }
                        }
                        break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    setState(1766);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 201, _ctx);
                } while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final FromStatementBodyContext fromStatementBody() throws RecognitionException {
        FromStatementBodyContext _localctx = new FromStatementBodyContext(_ctx, getState());
        enterRule(_localctx, 94, RULE_fromStatementBody);
        try {
            int _alt;
            setState(1795);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 208, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1768);
                    transformClause();
                    setState(1770);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 202, _ctx)) {
                        case 1: {
                            setState(1769);
                            whereClause();
                        }
                        break;
                    }
                    setState(1772);
                    queryOrganization();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1774);
                    selectClause();
                    setState(1778);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 203, _ctx);
                    while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt == 1) {
                            {
                                {
                                    setState(1775);
                                    lateralView();
                                }
                            }
                        }
                        setState(1780);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 203, _ctx);
                    }
                    setState(1782);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 204, _ctx)) {
                        case 1: {
                            setState(1781);
                            whereClause();
                        }
                        break;
                    }
                    setState(1785);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 205, _ctx)) {
                        case 1: {
                            setState(1784);
                            aggregationClause();
                        }
                        break;
                    }
                    setState(1788);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 206, _ctx)) {
                        case 1: {
                            setState(1787);
                            havingClause();
                        }
                        break;
                    }
                    setState(1791);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 207, _ctx)) {
                        case 1: {
                            setState(1790);
                            windowClause();
                        }
                        break;
                    }
                    setState(1793);
                    queryOrganization();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final QuerySpecificationContext querySpecification() throws RecognitionException {
        QuerySpecificationContext _localctx = new QuerySpecificationContext(_ctx, getState());
        enterRule(_localctx, 96, RULE_querySpecification);
        try {
            int _alt;
            setState(1841);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 221, _ctx)) {
                case 1:
                    _localctx = new TransformQuerySpecificationContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1797);
                    transformClause();
                    setState(1799);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 209, _ctx)) {
                        case 1: {
                            setState(1798);
                            fromClause();
                        }
                        break;
                    }
                    setState(1804);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 210, _ctx);
                    while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt == 1) {
                            {
                                {
                                    setState(1801);
                                    lateralView();
                                }
                            }
                        }
                        setState(1806);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 210, _ctx);
                    }
                    setState(1808);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 211, _ctx)) {
                        case 1: {
                            setState(1807);
                            whereClause();
                        }
                        break;
                    }
                    setState(1811);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 212, _ctx)) {
                        case 1: {
                            setState(1810);
                            aggregationClause();
                        }
                        break;
                    }
                    setState(1814);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 213, _ctx)) {
                        case 1: {
                            setState(1813);
                            havingClause();
                        }
                        break;
                    }
                    setState(1817);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 214, _ctx)) {
                        case 1: {
                            setState(1816);
                            windowClause();
                        }
                        break;
                    }
                }
                break;
                case 2:
                    _localctx = new RegularQuerySpecificationContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1819);
                    selectClause();
                    setState(1821);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 215, _ctx)) {
                        case 1: {
                            setState(1820);
                            fromClause();
                        }
                        break;
                    }
                    setState(1826);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 216, _ctx);
                    while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt == 1) {
                            {
                                {
                                    setState(1823);
                                    lateralView();
                                }
                            }
                        }
                        setState(1828);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 216, _ctx);
                    }
                    setState(1830);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 217, _ctx)) {
                        case 1: {
                            setState(1829);
                            whereClause();
                        }
                        break;
                    }
                    setState(1833);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 218, _ctx)) {
                        case 1: {
                            setState(1832);
                            aggregationClause();
                        }
                        break;
                    }
                    setState(1836);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 219, _ctx)) {
                        case 1: {
                            setState(1835);
                            havingClause();
                        }
                        break;
                    }
                    setState(1839);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 220, _ctx)) {
                        case 1: {
                            setState(1838);
                            windowClause();
                        }
                        break;
                    }
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final TransformClauseContext transformClause() throws RecognitionException {
        TransformClauseContext _localctx = new TransformClauseContext(_ctx, getState());
        enterRule(_localctx, 98, RULE_transformClause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1862);
                _errHandler.sync(this);
                switch (_input.LA(1)) {
                    case SELECT: {
                        setState(1843);
                        match(SELECT);
                        setState(1844);
                        ((TransformClauseContext) _localctx).kind = match(TRANSFORM);
                        setState(1845);
                        match(LEFT_PAREN);
                        setState(1847);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 222, _ctx)) {
                            case 1: {
                                setState(1846);
                                setQuantifier();
                            }
                            break;
                        }
                        setState(1849);
                        expressionSeq();
                        setState(1850);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case MAP: {
                        setState(1852);
                        ((TransformClauseContext) _localctx).kind = match(MAP);
                        setState(1854);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 223, _ctx)) {
                            case 1: {
                                setState(1853);
                                setQuantifier();
                            }
                            break;
                        }
                        setState(1856);
                        expressionSeq();
                    }
                    break;
                    case REDUCE: {
                        setState(1857);
                        ((TransformClauseContext) _localctx).kind = match(REDUCE);
                        setState(1859);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 224, _ctx)) {
                            case 1: {
                                setState(1858);
                                setQuantifier();
                            }
                            break;
                        }
                        setState(1861);
                        expressionSeq();
                    }
                    break;
                    default:
                        throw new NoViableAltException(this);
                }
                setState(1865);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == ROW) {
                    {
                        setState(1864);
                        ((TransformClauseContext) _localctx).inRowFormat = rowFormat();
                    }
                }

                setState(1869);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == RECORDWRITER) {
                    {
                        setState(1867);
                        match(RECORDWRITER);
                        setState(1868);
                        ((TransformClauseContext) _localctx).recordWriter = match(STRING);
                    }
                }

                setState(1871);
                match(USING);
                setState(1872);
                ((TransformClauseContext) _localctx).script = match(STRING);
                setState(1885);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 230, _ctx)) {
                    case 1: {
                        setState(1873);
                        match(AS);
                        setState(1883);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 229, _ctx)) {
                            case 1: {
                                setState(1874);
                                identifierSeq();
                            }
                            break;
                            case 2: {
                                setState(1875);
                                colTypeList();
                            }
                            break;
                            case 3: {
                                {
                                    setState(1876);
                                    match(LEFT_PAREN);
                                    setState(1879);
                                    _errHandler.sync(this);
                                    switch (getInterpreter().adaptivePredict(_input, 228, _ctx)) {
                                        case 1: {
                                            setState(1877);
                                            identifierSeq();
                                        }
                                        break;
                                        case 2: {
                                            setState(1878);
                                            colTypeList();
                                        }
                                        break;
                                    }
                                    setState(1881);
                                    match(RIGHT_PAREN);
                                }
                            }
                            break;
                        }
                    }
                    break;
                }
                setState(1888);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 231, _ctx)) {
                    case 1: {
                        setState(1887);
                        ((TransformClauseContext) _localctx).outRowFormat = rowFormat();
                    }
                    break;
                }
                setState(1892);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 232, _ctx)) {
                    case 1: {
                        setState(1890);
                        match(RECORDREADER);
                        setState(1891);
                        ((TransformClauseContext) _localctx).recordReader = match(STRING);
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final SelectClauseContext selectClause() throws RecognitionException {
        SelectClauseContext _localctx = new SelectClauseContext(_ctx, getState());
        enterRule(_localctx, 100, RULE_selectClause);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1894);
                match(SELECT);
                setState(1898);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 233, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(1895);
                                ((SelectClauseContext) _localctx).hint = hint();
                                ((SelectClauseContext) _localctx).hints.add(((SelectClauseContext) _localctx).hint);
                            }
                        }
                    }
                    setState(1900);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 233, _ctx);
                }
                setState(1902);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 234, _ctx)) {
                    case 1: {
                        setState(1901);
                        setQuantifier();
                    }
                    break;
                }
                setState(1904);
                namedExpressionSeq();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final SetClauseContext setClause() throws RecognitionException {
        SetClauseContext _localctx = new SetClauseContext(_ctx, getState());
        enterRule(_localctx, 102, RULE_setClause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1906);
                match(SET);
                setState(1907);
                assignmentList();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final MatchedClauseContext matchedClause() throws RecognitionException {
        MatchedClauseContext _localctx = new MatchedClauseContext(_ctx, getState());
        enterRule(_localctx, 104, RULE_matchedClause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1909);
                match(WHEN);
                setState(1910);
                match(MATCHED);
                setState(1913);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == AND) {
                    {
                        setState(1911);
                        match(AND);
                        setState(1912);
                        ((MatchedClauseContext) _localctx).matchedCond = booleanExpression(0);
                    }
                }

                setState(1915);
                match(THEN);
                setState(1916);
                matchedAction();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final NotMatchedClauseContext notMatchedClause() throws RecognitionException {
        NotMatchedClauseContext _localctx = new NotMatchedClauseContext(_ctx, getState());
        enterRule(_localctx, 106, RULE_notMatchedClause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1918);
                match(WHEN);
                setState(1919);
                match(NOT);
                setState(1920);
                match(MATCHED);
                setState(1923);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == AND) {
                    {
                        setState(1921);
                        match(AND);
                        setState(1922);
                        ((NotMatchedClauseContext) _localctx).notMatchedCond = booleanExpression(0);
                    }
                }

                setState(1925);
                match(THEN);
                setState(1926);
                notMatchedAction();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final MatchedActionContext matchedAction() throws RecognitionException {
        MatchedActionContext _localctx = new MatchedActionContext(_ctx, getState());
        enterRule(_localctx, 108, RULE_matchedAction);
        try {
            setState(1935);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 237, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1928);
                    match(DELETE);
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1929);
                    match(UPDATE);
                    setState(1930);
                    match(SET);
                    setState(1931);
                    match(ASTERISK);
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(1932);
                    match(UPDATE);
                    setState(1933);
                    match(SET);
                    setState(1934);
                    assignmentList();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final NotMatchedActionContext notMatchedAction() throws RecognitionException {
        NotMatchedActionContext _localctx = new NotMatchedActionContext(_ctx, getState());
        enterRule(_localctx, 110, RULE_notMatchedAction);
        int _la;
        try {
            setState(1955);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 239, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1937);
                    match(INSERT);
                    setState(1938);
                    match(ASTERISK);
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1939);
                    match(INSERT);
                    setState(1940);
                    match(LEFT_PAREN);
                    setState(1941);
                    ((NotMatchedActionContext) _localctx).columns = multipartIdentifierList();
                    setState(1942);
                    match(RIGHT_PAREN);
                    setState(1943);
                    match(VALUES);
                    setState(1944);
                    match(LEFT_PAREN);
                    setState(1945);
                    expression();
                    setState(1950);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la == COMMA) {
                        {
                            {
                                setState(1946);
                                match(COMMA);
                                setState(1947);
                                expression();
                            }
                        }
                        setState(1952);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                    setState(1953);
                    match(RIGHT_PAREN);
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final AssignmentListContext assignmentList() throws RecognitionException {
        AssignmentListContext _localctx = new AssignmentListContext(_ctx, getState());
        enterRule(_localctx, 112, RULE_assignmentList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1957);
                assignment();
                setState(1962);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(1958);
                            match(COMMA);
                            setState(1959);
                            assignment();
                        }
                    }
                    setState(1964);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final AssignmentContext assignment() throws RecognitionException {
        AssignmentContext _localctx = new AssignmentContext(_ctx, getState());
        enterRule(_localctx, 114, RULE_assignment);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1965);
                ((AssignmentContext) _localctx).key = multipartIdentifier();
                setState(1966);
                match(EQ);
                setState(1967);
                ((AssignmentContext) _localctx).value = expression();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final WhereClauseContext whereClause() throws RecognitionException {
        WhereClauseContext _localctx = new WhereClauseContext(_ctx, getState());
        enterRule(_localctx, 116, RULE_whereClause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1969);
                match(WHERE);
                setState(1970);
                booleanExpression(0);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final HavingClauseContext havingClause() throws RecognitionException {
        HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
        enterRule(_localctx, 118, RULE_havingClause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(1972);
                match(HAVING);
                setState(1973);
                booleanExpression(0);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final HintContext hint() throws RecognitionException {
        HintContext _localctx = new HintContext(_ctx, getState());
        enterRule(_localctx, 120, RULE_hint);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(1975);
                match(HENT_START);
                setState(1976);
                ((HintContext) _localctx).hintStatement = hintStatement();
                ((HintContext) _localctx).hintStatements.add(((HintContext) _localctx).hintStatement);
                setState(1983);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 242, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(1978);
                                _errHandler.sync(this);
                                switch (getInterpreter().adaptivePredict(_input, 241, _ctx)) {
                                    case 1: {
                                        setState(1977);
                                        match(COMMA);
                                    }
                                    break;
                                }
                                setState(1980);
                                ((HintContext) _localctx).hintStatement = hintStatement();
                                ((HintContext) _localctx).hintStatements.add(((HintContext) _localctx).hintStatement);
                            }
                        }
                    }
                    setState(1985);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 242, _ctx);
                }
                setState(1986);
                match(HENT_END);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final HintStatementContext hintStatement() throws RecognitionException {
        HintStatementContext _localctx = new HintStatementContext(_ctx, getState());
        enterRule(_localctx, 122, RULE_hintStatement);
        int _la;
        try {
            setState(2001);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 244, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(1988);
                    ((HintStatementContext) _localctx).hintName = identifier();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(1989);
                    ((HintStatementContext) _localctx).hintName = identifier();
                    setState(1990);
                    match(LEFT_PAREN);
                    setState(1991);
                    ((HintStatementContext) _localctx).primaryExpression = primaryExpression(0);
                    ((HintStatementContext) _localctx).parameters.add(((HintStatementContext) _localctx).primaryExpression);
                    setState(1996);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la == COMMA) {
                        {
                            {
                                setState(1992);
                                match(COMMA);
                                setState(1993);
                                ((HintStatementContext) _localctx).primaryExpression = primaryExpression(0);
                                ((HintStatementContext) _localctx).parameters.add(((HintStatementContext) _localctx).primaryExpression);
                            }
                        }
                        setState(1998);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                    setState(1999);
                    match(RIGHT_PAREN);
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final FromClauseContext fromClause() throws RecognitionException {
        FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
        enterRule(_localctx, 124, RULE_fromClause);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2003);
                match(FROM);
                setState(2004);
                relation();
                setState(2009);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 245, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(2005);
                                match(COMMA);
                                setState(2006);
                                relation();
                            }
                        }
                    }
                    setState(2011);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 245, _ctx);
                }
                setState(2015);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 246, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(2012);
                                lateralView();
                            }
                        }
                    }
                    setState(2017);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 246, _ctx);
                }
                setState(2019);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 247, _ctx)) {
                    case 1: {
                        setState(2018);
                        pivotClause();
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final TemporalClauseContext temporalClause() throws RecognitionException {
        TemporalClauseContext _localctx = new TemporalClauseContext(_ctx, getState());
        enterRule(_localctx, 126, RULE_temporalClause);
        int _la;
        try {
            setState(2035);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 250, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2022);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == FOR) {
                        {
                            setState(2021);
                            match(FOR);
                        }
                    }

                    setState(2024);
                    _la = _input.LA(1);
                    if (!(_la == SYSTEM_VERSION || _la == VERSION)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(2025);
                    match(AS);
                    setState(2026);
                    match(OF);
                    setState(2027);
                    ((TemporalClauseContext) _localctx).version = _input.LT(1);
                    _la = _input.LA(1);
                    if (!(_la == STRING || _la == INTEGER_VALUE)) {
                        ((TemporalClauseContext) _localctx).version = (Token) _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2029);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == FOR) {
                        {
                            setState(2028);
                            match(FOR);
                        }
                    }

                    setState(2031);
                    _la = _input.LA(1);
                    if (!(_la == SYSTEM_TIME || _la == TIMESTAMP)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(2032);
                    match(AS);
                    setState(2033);
                    match(OF);
                    setState(2034);
                    ((TemporalClauseContext) _localctx).timestamp = valueExpression(0);
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final AggregationClauseContext aggregationClause() throws RecognitionException {
        AggregationClauseContext _localctx = new AggregationClauseContext(_ctx, getState());
        enterRule(_localctx, 128, RULE_aggregationClause);
        int _la;
        try {
            int _alt;
            setState(2076);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 255, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2037);
                    match(GROUP);
                    setState(2038);
                    match(BY);
                    setState(2039);
                    ((AggregationClauseContext) _localctx).groupByClause = groupByClause();
                    ((AggregationClauseContext) _localctx).groupingExpressionsWithGroupingAnalytics.add(((AggregationClauseContext) _localctx).groupByClause);
                    setState(2044);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 251, _ctx);
                    while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt == 1) {
                            {
                                {
                                    setState(2040);
                                    match(COMMA);
                                    setState(2041);
                                    ((AggregationClauseContext) _localctx).groupByClause = groupByClause();
                                    ((AggregationClauseContext) _localctx).groupingExpressionsWithGroupingAnalytics.add(((AggregationClauseContext) _localctx).groupByClause);
                                }
                            }
                        }
                        setState(2046);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 251, _ctx);
                    }
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2047);
                    match(GROUP);
                    setState(2048);
                    match(BY);
                    setState(2049);
                    ((AggregationClauseContext) _localctx).expression = expression();
                    ((AggregationClauseContext) _localctx).groupingExpressions.add(((AggregationClauseContext) _localctx).expression);
                    setState(2054);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 252, _ctx);
                    while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                        if (_alt == 1) {
                            {
                                {
                                    setState(2050);
                                    match(COMMA);
                                    setState(2051);
                                    ((AggregationClauseContext) _localctx).expression = expression();
                                    ((AggregationClauseContext) _localctx).groupingExpressions.add(((AggregationClauseContext) _localctx).expression);
                                }
                            }
                        }
                        setState(2056);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 252, _ctx);
                    }
                    setState(2074);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 254, _ctx)) {
                        case 1: {
                            setState(2057);
                            match(WITH);
                            setState(2058);
                            ((AggregationClauseContext) _localctx).kind = match(ROLLUP);
                        }
                        break;
                        case 2: {
                            setState(2059);
                            match(WITH);
                            setState(2060);
                            ((AggregationClauseContext) _localctx).kind = match(CUBE);
                        }
                        break;
                        case 3: {
                            setState(2061);
                            ((AggregationClauseContext) _localctx).kind = match(GROUPING);
                            setState(2062);
                            match(SETS);
                            setState(2063);
                            match(LEFT_PAREN);
                            setState(2064);
                            groupingSet();
                            setState(2069);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            while (_la == COMMA) {
                                {
                                    {
                                        setState(2065);
                                        match(COMMA);
                                        setState(2066);
                                        groupingSet();
                                    }
                                }
                                setState(2071);
                                _errHandler.sync(this);
                                _la = _input.LA(1);
                            }
                            setState(2072);
                            match(RIGHT_PAREN);
                        }
                        break;
                    }
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final GroupByClauseContext groupByClause() throws RecognitionException {
        GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, getState());
        enterRule(_localctx, 130, RULE_groupByClause);
        try {
            setState(2080);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 256, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2078);
                    groupingAnalytics();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2079);
                    expression();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final GroupingAnalyticsContext groupingAnalytics() throws RecognitionException {
        GroupingAnalyticsContext _localctx = new GroupingAnalyticsContext(_ctx, getState());
        enterRule(_localctx, 132, RULE_groupingAnalytics);
        int _la;
        try {
            setState(2107);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case CUBE:
                case ROLLUP:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2082);
                    _la = _input.LA(1);
                    if (!(_la == CUBE || _la == ROLLUP)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(2083);
                    match(LEFT_PAREN);
                    setState(2084);
                    groupingSet();
                    setState(2089);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la == COMMA) {
                        {
                            {
                                setState(2085);
                                match(COMMA);
                                setState(2086);
                                groupingSet();
                            }
                        }
                        setState(2091);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                    setState(2092);
                    match(RIGHT_PAREN);
                }
                break;
                case GROUPING:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2094);
                    match(GROUPING);
                    setState(2095);
                    match(SETS);
                    setState(2096);
                    match(LEFT_PAREN);
                    setState(2097);
                    groupingElement();
                    setState(2102);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la == COMMA) {
                        {
                            {
                                setState(2098);
                                match(COMMA);
                                setState(2099);
                                groupingElement();
                            }
                        }
                        setState(2104);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                    setState(2105);
                    match(RIGHT_PAREN);
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final GroupingElementContext groupingElement() throws RecognitionException {
        GroupingElementContext _localctx = new GroupingElementContext(_ctx, getState());
        enterRule(_localctx, 134, RULE_groupingElement);
        try {
            setState(2111);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 260, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2109);
                    groupingAnalytics();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2110);
                    groupingSet();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final GroupingSetContext groupingSet() throws RecognitionException {
        GroupingSetContext _localctx = new GroupingSetContext(_ctx, getState());
        enterRule(_localctx, 136, RULE_groupingSet);
        int _la;
        try {
            setState(2126);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 263, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2113);
                    match(LEFT_PAREN);
                    setState(2122);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 262, _ctx)) {
                        case 1: {
                            setState(2114);
                            expression();
                            setState(2119);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            while (_la == COMMA) {
                                {
                                    {
                                        setState(2115);
                                        match(COMMA);
                                        setState(2116);
                                        expression();
                                    }
                                }
                                setState(2121);
                                _errHandler.sync(this);
                                _la = _input.LA(1);
                            }
                        }
                        break;
                    }
                    setState(2124);
                    match(RIGHT_PAREN);
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2125);
                    expression();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final PivotClauseContext pivotClause() throws RecognitionException {
        PivotClauseContext _localctx = new PivotClauseContext(_ctx, getState());
        enterRule(_localctx, 138, RULE_pivotClause);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2128);
                match(PIVOT);
                setState(2129);
                match(LEFT_PAREN);
                setState(2130);
                ((PivotClauseContext) _localctx).aggregates = namedExpressionSeq();
                setState(2131);
                match(FOR);
                setState(2132);
                pivotColumn();
                setState(2133);
                match(IN);
                setState(2134);
                match(LEFT_PAREN);
                setState(2135);
                ((PivotClauseContext) _localctx).pivotValue = pivotValue();
                ((PivotClauseContext) _localctx).pivotValues.add(((PivotClauseContext) _localctx).pivotValue);
                setState(2140);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(2136);
                            match(COMMA);
                            setState(2137);
                            ((PivotClauseContext) _localctx).pivotValue = pivotValue();
                            ((PivotClauseContext) _localctx).pivotValues.add(((PivotClauseContext) _localctx).pivotValue);
                        }
                    }
                    setState(2142);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(2143);
                match(RIGHT_PAREN);
                setState(2144);
                match(RIGHT_PAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final PivotColumnContext pivotColumn() throws RecognitionException {
        PivotColumnContext _localctx = new PivotColumnContext(_ctx, getState());
        enterRule(_localctx, 140, RULE_pivotColumn);
        int _la;
        try {
            setState(2158);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 266, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2146);
                    ((PivotColumnContext) _localctx).identifier = identifier();
                    ((PivotColumnContext) _localctx).identifiers.add(((PivotColumnContext) _localctx).identifier);
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2147);
                    match(LEFT_PAREN);
                    setState(2148);
                    ((PivotColumnContext) _localctx).identifier = identifier();
                    ((PivotColumnContext) _localctx).identifiers.add(((PivotColumnContext) _localctx).identifier);
                    setState(2153);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la == COMMA) {
                        {
                            {
                                setState(2149);
                                match(COMMA);
                                setState(2150);
                                ((PivotColumnContext) _localctx).identifier = identifier();
                                ((PivotColumnContext) _localctx).identifiers.add(((PivotColumnContext) _localctx).identifier);
                            }
                        }
                        setState(2155);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                    setState(2156);
                    match(RIGHT_PAREN);
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final PivotValueContext pivotValue() throws RecognitionException {
        PivotValueContext _localctx = new PivotValueContext(_ctx, getState());
        enterRule(_localctx, 142, RULE_pivotValue);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2160);
                expression();
                setState(2165);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 268, _ctx)) {
                    case 1: {
                        setState(2162);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 267, _ctx)) {
                            case 1: {
                                setState(2161);
                                match(AS);
                            }
                            break;
                        }
                        setState(2164);
                        identifier();
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final LateralViewContext lateralView() throws RecognitionException {
        LateralViewContext _localctx = new LateralViewContext(_ctx, getState());
        enterRule(_localctx, 144, RULE_lateralView);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2167);
                match(LATERAL);
                setState(2168);
                match(VIEW);
                setState(2170);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 269, _ctx)) {
                    case 1: {
                        setState(2169);
                        match(OUTER);
                    }
                    break;
                }
                setState(2172);
                qualifiedName();
                setState(2173);
                match(LEFT_PAREN);
                setState(2182);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 271, _ctx)) {
                    case 1: {
                        setState(2174);
                        expression();
                        setState(2179);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la == COMMA) {
                            {
                                {
                                    setState(2175);
                                    match(COMMA);
                                    setState(2176);
                                    expression();
                                }
                            }
                            setState(2181);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                    }
                    break;
                }
                setState(2184);
                match(RIGHT_PAREN);
                setState(2185);
                ((LateralViewContext) _localctx).tblName = identifier();
                setState(2197);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 274, _ctx)) {
                    case 1: {
                        setState(2187);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 272, _ctx)) {
                            case 1: {
                                setState(2186);
                                match(AS);
                            }
                            break;
                        }
                        setState(2189);
                        ((LateralViewContext) _localctx).identifier = identifier();
                        ((LateralViewContext) _localctx).colName.add(((LateralViewContext) _localctx).identifier);
                        setState(2194);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 273, _ctx);
                        while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                            if (_alt == 1) {
                                {
                                    {
                                        setState(2190);
                                        match(COMMA);
                                        setState(2191);
                                        ((LateralViewContext) _localctx).identifier = identifier();
                                        ((LateralViewContext) _localctx).colName.add(((LateralViewContext) _localctx).identifier);
                                    }
                                }
                            }
                            setState(2196);
                            _errHandler.sync(this);
                            _alt = getInterpreter().adaptivePredict(_input, 273, _ctx);
                        }
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final SetQuantifierContext setQuantifier() throws RecognitionException {
        SetQuantifierContext _localctx = new SetQuantifierContext(_ctx, getState());
        enterRule(_localctx, 146, RULE_setQuantifier);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2199);
                _la = _input.LA(1);
                if (!(_la == ALL || _la == DISTINCT)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final RelationContext relation() throws RecognitionException {
        RelationContext _localctx = new RelationContext(_ctx, getState());
        enterRule(_localctx, 148, RULE_relation);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2202);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 275, _ctx)) {
                    case 1: {
                        setState(2201);
                        match(LATERAL);
                    }
                    break;
                }
                setState(2204);
                relationPrimary();
                setState(2208);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 276, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(2205);
                                joinRelation();
                            }
                        }
                    }
                    setState(2210);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 276, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final JoinRelationContext joinRelation() throws RecognitionException {
        JoinRelationContext _localctx = new JoinRelationContext(_ctx, getState());
        enterRule(_localctx, 150, RULE_joinRelation);
        try {
            setState(2228);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case ANTI:
                case CROSS:
                case FULL:
                case INNER:
                case JOIN:
                case LEFT:
                case RIGHT:
                case SEMI:
                    enterOuterAlt(_localctx, 1);
                {
                    {
                        setState(2211);
                        joinType();
                    }
                    setState(2212);
                    match(JOIN);
                    setState(2214);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 277, _ctx)) {
                        case 1: {
                            setState(2213);
                            match(LATERAL);
                        }
                        break;
                    }
                    setState(2216);
                    ((JoinRelationContext) _localctx).right = relationPrimary();
                    setState(2218);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 278, _ctx)) {
                        case 1: {
                            setState(2217);
                            joinCriteria();
                        }
                        break;
                    }
                }
                break;
                case NATURAL:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2220);
                    match(NATURAL);
                    setState(2221);
                    joinType();
                    setState(2222);
                    match(JOIN);
                    setState(2224);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 279, _ctx)) {
                        case 1: {
                            setState(2223);
                            match(LATERAL);
                        }
                        break;
                    }
                    setState(2226);
                    ((JoinRelationContext) _localctx).right = relationPrimary();
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final JoinTypeContext joinType() throws RecognitionException {
        JoinTypeContext _localctx = new JoinTypeContext(_ctx, getState());
        enterRule(_localctx, 152, RULE_joinType);
        int _la;
        try {
            setState(2254);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 287, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2231);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == INNER) {
                        {
                            setState(2230);
                            match(INNER);
                        }
                    }

                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2233);
                    match(CROSS);
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(2234);
                    match(LEFT);
                    setState(2236);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == OUTER) {
                        {
                            setState(2235);
                            match(OUTER);
                        }
                    }

                }
                break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(2239);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == LEFT) {
                        {
                            setState(2238);
                            match(LEFT);
                        }
                    }

                    setState(2241);
                    match(SEMI);
                }
                break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                {
                    setState(2242);
                    match(RIGHT);
                    setState(2244);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == OUTER) {
                        {
                            setState(2243);
                            match(OUTER);
                        }
                    }

                }
                break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                {
                    setState(2246);
                    match(FULL);
                    setState(2248);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == OUTER) {
                        {
                            setState(2247);
                            match(OUTER);
                        }
                    }

                }
                break;
                case 7:
                    enterOuterAlt(_localctx, 7);
                {
                    setState(2251);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == LEFT) {
                        {
                            setState(2250);
                            match(LEFT);
                        }
                    }

                    setState(2253);
                    match(ANTI);
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final JoinCriteriaContext joinCriteria() throws RecognitionException {
        JoinCriteriaContext _localctx = new JoinCriteriaContext(_ctx, getState());
        enterRule(_localctx, 154, RULE_joinCriteria);
        try {
            setState(2260);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case ON:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2256);
                    match(ON);
                    setState(2257);
                    booleanExpression(0);
                }
                break;
                case USING:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2258);
                    match(USING);
                    setState(2259);
                    identifierList();
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final SampleContext sample() throws RecognitionException {
        SampleContext _localctx = new SampleContext(_ctx, getState());
        enterRule(_localctx, 156, RULE_sample);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2262);
                match(TABLESAMPLE);
                setState(2263);
                match(LEFT_PAREN);
                setState(2265);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 289, _ctx)) {
                    case 1: {
                        setState(2264);
                        sampleMethod();
                    }
                    break;
                }
                setState(2267);
                match(RIGHT_PAREN);
                setState(2272);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 290, _ctx)) {
                    case 1: {
                        setState(2268);
                        match(REPEATABLE);
                        setState(2269);
                        match(LEFT_PAREN);
                        setState(2270);
                        ((SampleContext) _localctx).seed = match(INTEGER_VALUE);
                        setState(2271);
                        match(RIGHT_PAREN);
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final SampleMethodContext sampleMethod() throws RecognitionException {
        SampleMethodContext _localctx = new SampleMethodContext(_ctx, getState());
        enterRule(_localctx, 158, RULE_sampleMethod);
        int _la;
        try {
            setState(2298);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 294, _ctx)) {
                case 1:
                    _localctx = new SampleByPercentileContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2275);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == MINUS) {
                        {
                            setState(2274);
                            ((SampleByPercentileContext) _localctx).negativeSign = match(MINUS);
                        }
                    }

                    setState(2277);
                    ((SampleByPercentileContext) _localctx).percentage = _input.LT(1);
                    _la = _input.LA(1);
                    if (!(_la == INTEGER_VALUE || _la == DECIMAL_VALUE)) {
                        ((SampleByPercentileContext) _localctx).percentage = (Token) _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(2278);
                    match(PERCENTLIT);
                }
                break;
                case 2:
                    _localctx = new SampleByRowsContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2279);
                    expression();
                    setState(2280);
                    match(ROWS);
                }
                break;
                case 3:
                    _localctx = new SampleByBucketContext(_localctx);
                    enterOuterAlt(_localctx, 3);
                {
                    setState(2282);
                    ((SampleByBucketContext) _localctx).sampleType = match(BUCKET);
                    setState(2283);
                    ((SampleByBucketContext) _localctx).numerator = match(INTEGER_VALUE);
                    setState(2284);
                    match(OUT);
                    setState(2285);
                    match(OF);
                    setState(2286);
                    ((SampleByBucketContext) _localctx).denominator = match(INTEGER_VALUE);
                    setState(2295);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == ON) {
                        {
                            setState(2287);
                            match(ON);
                            setState(2293);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 292, _ctx)) {
                                case 1: {
                                    setState(2288);
                                    identifier();
                                }
                                break;
                                case 2: {
                                    setState(2289);
                                    qualifiedName();
                                    setState(2290);
                                    match(LEFT_PAREN);
                                    setState(2291);
                                    match(RIGHT_PAREN);
                                }
                                break;
                            }
                        }
                    }

                }
                break;
                case 4:
                    _localctx = new SampleByBytesContext(_localctx);
                    enterOuterAlt(_localctx, 4);
                {
                    setState(2297);
                    ((SampleByBytesContext) _localctx).bytes = expression();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final IdentifierListContext identifierList() throws RecognitionException {
        IdentifierListContext _localctx = new IdentifierListContext(_ctx, getState());
        enterRule(_localctx, 160, RULE_identifierList);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2300);
                match(LEFT_PAREN);
                setState(2301);
                identifierSeq();
                setState(2302);
                match(RIGHT_PAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final IdentifierSeqContext identifierSeq() throws RecognitionException {
        IdentifierSeqContext _localctx = new IdentifierSeqContext(_ctx, getState());
        enterRule(_localctx, 162, RULE_identifierSeq);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2304);
                ((IdentifierSeqContext) _localctx).errorCapturingIdentifier = errorCapturingIdentifier();
                ((IdentifierSeqContext) _localctx).ident.add(((IdentifierSeqContext) _localctx).errorCapturingIdentifier);
                setState(2309);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 295, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(2305);
                                match(COMMA);
                                setState(2306);
                                ((IdentifierSeqContext) _localctx).errorCapturingIdentifier = errorCapturingIdentifier();
                                ((IdentifierSeqContext) _localctx).ident.add(((IdentifierSeqContext) _localctx).errorCapturingIdentifier);
                            }
                        }
                    }
                    setState(2311);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 295, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final OrderedIdentifierListContext orderedIdentifierList() throws RecognitionException {
        OrderedIdentifierListContext _localctx = new OrderedIdentifierListContext(_ctx, getState());
        enterRule(_localctx, 164, RULE_orderedIdentifierList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2312);
                match(LEFT_PAREN);
                setState(2313);
                orderedIdentifier();
                setState(2318);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(2314);
                            match(COMMA);
                            setState(2315);
                            orderedIdentifier();
                        }
                    }
                    setState(2320);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(2321);
                match(RIGHT_PAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final OrderedIdentifierContext orderedIdentifier() throws RecognitionException {
        OrderedIdentifierContext _localctx = new OrderedIdentifierContext(_ctx, getState());
        enterRule(_localctx, 166, RULE_orderedIdentifier);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2323);
                ((OrderedIdentifierContext) _localctx).ident = errorCapturingIdentifier();
                setState(2325);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == ASC || _la == DESC) {
                    {
                        setState(2324);
                        ((OrderedIdentifierContext) _localctx).ordering = _input.LT(1);
                        _la = _input.LA(1);
                        if (!(_la == ASC || _la == DESC)) {
                            ((OrderedIdentifierContext) _localctx).ordering = (Token) _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                    }
                }

            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final IdentifierCommentListContext identifierCommentList() throws RecognitionException {
        IdentifierCommentListContext _localctx = new IdentifierCommentListContext(_ctx, getState());
        enterRule(_localctx, 168, RULE_identifierCommentList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2327);
                match(LEFT_PAREN);
                setState(2328);
                identifierComment();
                setState(2333);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(2329);
                            match(COMMA);
                            setState(2330);
                            identifierComment();
                        }
                    }
                    setState(2335);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(2336);
                match(RIGHT_PAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final IdentifierCommentContext identifierComment() throws RecognitionException {
        IdentifierCommentContext _localctx = new IdentifierCommentContext(_ctx, getState());
        enterRule(_localctx, 170, RULE_identifierComment);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2338);
                identifier();
                setState(2340);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == COMMENT) {
                    {
                        setState(2339);
                        commentSpec();
                    }
                }

            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final RelationPrimaryContext relationPrimary() throws RecognitionException {
        RelationPrimaryContext _localctx = new RelationPrimaryContext(_ctx, getState());
        enterRule(_localctx, 172, RULE_relationPrimary);
        try {
            setState(2369);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 304, _ctx)) {
                case 1:
                    _localctx = new TableNameContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2342);
                    multipartIdentifier();
                    setState(2344);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 300, _ctx)) {
                        case 1: {
                            setState(2343);
                            temporalClause();
                        }
                        break;
                    }
                    setState(2347);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 301, _ctx)) {
                        case 1: {
                            setState(2346);
                            sample();
                        }
                        break;
                    }
                    setState(2349);
                    tableAlias();
                }
                break;
                case 2:
                    _localctx = new AliasedQueryContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2351);
                    match(LEFT_PAREN);
                    setState(2352);
                    query();
                    setState(2353);
                    match(RIGHT_PAREN);
                    setState(2355);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 302, _ctx)) {
                        case 1: {
                            setState(2354);
                            sample();
                        }
                        break;
                    }
                    setState(2357);
                    tableAlias();
                }
                break;
                case 3:
                    _localctx = new AliasedRelationContext(_localctx);
                    enterOuterAlt(_localctx, 3);
                {
                    setState(2359);
                    match(LEFT_PAREN);
                    setState(2360);
                    relation();
                    setState(2361);
                    match(RIGHT_PAREN);
                    setState(2363);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 303, _ctx)) {
                        case 1: {
                            setState(2362);
                            sample();
                        }
                        break;
                    }
                    setState(2365);
                    tableAlias();
                }
                break;
                case 4:
                    _localctx = new InlineTableDefault2Context(_localctx);
                    enterOuterAlt(_localctx, 4);
                {
                    setState(2367);
                    inlineTable();
                }
                break;
                case 5:
                    _localctx = new TableValuedFunctionContext(_localctx);
                    enterOuterAlt(_localctx, 5);
                {
                    setState(2368);
                    functionTable();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final InlineTableContext inlineTable() throws RecognitionException {
        InlineTableContext _localctx = new InlineTableContext(_ctx, getState());
        enterRule(_localctx, 174, RULE_inlineTable);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2371);
                match(VALUES);
                setState(2372);
                expression();
                setState(2377);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 305, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(2373);
                                match(COMMA);
                                setState(2374);
                                expression();
                            }
                        }
                    }
                    setState(2379);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 305, _ctx);
                }
                setState(2380);
                tableAlias();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final FunctionTableContext functionTable() throws RecognitionException {
        FunctionTableContext _localctx = new FunctionTableContext(_ctx, getState());
        enterRule(_localctx, 176, RULE_functionTable);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2382);
                ((FunctionTableContext) _localctx).funcName = functionName();
                setState(2383);
                match(LEFT_PAREN);
                setState(2392);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 307, _ctx)) {
                    case 1: {
                        setState(2384);
                        expression();
                        setState(2389);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        while (_la == COMMA) {
                            {
                                {
                                    setState(2385);
                                    match(COMMA);
                                    setState(2386);
                                    expression();
                                }
                            }
                            setState(2391);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        }
                    }
                    break;
                }
                setState(2394);
                match(RIGHT_PAREN);
                setState(2395);
                tableAlias();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final TableAliasContext tableAlias() throws RecognitionException {
        TableAliasContext _localctx = new TableAliasContext(_ctx, getState());
        enterRule(_localctx, 178, RULE_tableAlias);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2404);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 310, _ctx)) {
                    case 1: {
                        setState(2398);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 308, _ctx)) {
                            case 1: {
                                setState(2397);
                                match(AS);
                            }
                            break;
                        }
                        setState(2400);
                        strictIdentifier();
                        setState(2402);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 309, _ctx)) {
                            case 1: {
                                setState(2401);
                                identifierList();
                            }
                            break;
                        }
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final RowFormatContext rowFormat() throws RecognitionException {
        RowFormatContext _localctx = new RowFormatContext(_ctx, getState());
        enterRule(_localctx, 180, RULE_rowFormat);
        try {
            setState(2455);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 318, _ctx)) {
                case 1:
                    _localctx = new RowFormatSerdeContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2406);
                    match(ROW);
                    setState(2407);
                    match(FORMAT);
                    setState(2408);
                    match(SERDE);
                    setState(2409);
                    ((RowFormatSerdeContext) _localctx).name = match(STRING);
                    setState(2413);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 311, _ctx)) {
                        case 1: {
                            setState(2410);
                            match(WITH);
                            setState(2411);
                            match(SERDEPROPERTIES);
                            setState(2412);
                            ((RowFormatSerdeContext) _localctx).props = propertyList();
                        }
                        break;
                    }
                }
                break;
                case 2:
                    _localctx = new RowFormatDelimitedContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2415);
                    match(ROW);
                    setState(2416);
                    match(FORMAT);
                    setState(2417);
                    match(DELIMITED);
                    setState(2427);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 313, _ctx)) {
                        case 1: {
                            setState(2418);
                            match(FIELDS);
                            setState(2419);
                            match(TERMINATED);
                            setState(2420);
                            match(BY);
                            setState(2421);
                            ((RowFormatDelimitedContext) _localctx).fieldsTerminatedBy = match(STRING);
                            setState(2425);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 312, _ctx)) {
                                case 1: {
                                    setState(2422);
                                    match(ESCAPED);
                                    setState(2423);
                                    match(BY);
                                    setState(2424);
                                    ((RowFormatDelimitedContext) _localctx).escapedBy = match(STRING);
                                }
                                break;
                            }
                        }
                        break;
                    }
                    setState(2434);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 314, _ctx)) {
                        case 1: {
                            setState(2429);
                            match(COLLECTION);
                            setState(2430);
                            match(ITEMS);
                            setState(2431);
                            match(TERMINATED);
                            setState(2432);
                            match(BY);
                            setState(2433);
                            ((RowFormatDelimitedContext) _localctx).collectionItemsTerminatedBy = match(STRING);
                        }
                        break;
                    }
                    setState(2441);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 315, _ctx)) {
                        case 1: {
                            setState(2436);
                            match(MAP);
                            setState(2437);
                            match(KEYS);
                            setState(2438);
                            match(TERMINATED);
                            setState(2439);
                            match(BY);
                            setState(2440);
                            ((RowFormatDelimitedContext) _localctx).keysTerminatedBy = match(STRING);
                        }
                        break;
                    }
                    setState(2447);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 316, _ctx)) {
                        case 1: {
                            setState(2443);
                            match(LINES);
                            setState(2444);
                            match(TERMINATED);
                            setState(2445);
                            match(BY);
                            setState(2446);
                            ((RowFormatDelimitedContext) _localctx).linesSeparatedBy = match(STRING);
                        }
                        break;
                    }
                    setState(2453);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 317, _ctx)) {
                        case 1: {
                            setState(2449);
                            match(NULL);
                            setState(2450);
                            match(DEFINED);
                            setState(2451);
                            match(AS);
                            setState(2452);
                            ((RowFormatDelimitedContext) _localctx).nullDefinedAs = match(STRING);
                        }
                        break;
                    }
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final MultipartIdentifierListContext multipartIdentifierList() throws RecognitionException {
        MultipartIdentifierListContext _localctx = new MultipartIdentifierListContext(_ctx, getState());
        enterRule(_localctx, 182, RULE_multipartIdentifierList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2457);
                multipartIdentifier();
                setState(2462);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(2458);
                            match(COMMA);
                            setState(2459);
                            multipartIdentifier();
                        }
                    }
                    setState(2464);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final MultipartIdentifierContext multipartIdentifier() throws RecognitionException {
        MultipartIdentifierContext _localctx = new MultipartIdentifierContext(_ctx, getState());
        enterRule(_localctx, 184, RULE_multipartIdentifier);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2465);
                ((MultipartIdentifierContext) _localctx).errorCapturingIdentifier = errorCapturingIdentifier();
                ((MultipartIdentifierContext) _localctx).parts.add(((MultipartIdentifierContext) _localctx).errorCapturingIdentifier);
                setState(2470);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 320, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(2466);
                                match(DOT);
                                setState(2467);
                                ((MultipartIdentifierContext) _localctx).errorCapturingIdentifier = errorCapturingIdentifier();
                                ((MultipartIdentifierContext) _localctx).parts.add(((MultipartIdentifierContext) _localctx).errorCapturingIdentifier);
                            }
                        }
                    }
                    setState(2472);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 320, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final MultipartIdentifierPropertyListContext multipartIdentifierPropertyList() throws RecognitionException {
        MultipartIdentifierPropertyListContext _localctx = new MultipartIdentifierPropertyListContext(_ctx, getState());
        enterRule(_localctx, 186, RULE_multipartIdentifierPropertyList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2473);
                multipartIdentifierProperty();
                setState(2478);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(2474);
                            match(COMMA);
                            setState(2475);
                            multipartIdentifierProperty();
                        }
                    }
                    setState(2480);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final MultipartIdentifierPropertyContext multipartIdentifierProperty() throws RecognitionException {
        MultipartIdentifierPropertyContext _localctx = new MultipartIdentifierPropertyContext(_ctx, getState());
        enterRule(_localctx, 188, RULE_multipartIdentifierProperty);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2481);
                multipartIdentifier();
                setState(2484);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == OPTIONS) {
                    {
                        setState(2482);
                        match(OPTIONS);
                        setState(2483);
                        ((MultipartIdentifierPropertyContext) _localctx).options = propertyList();
                    }
                }

            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final TableIdentifierContext tableIdentifier() throws RecognitionException {
        TableIdentifierContext _localctx = new TableIdentifierContext(_ctx, getState());
        enterRule(_localctx, 190, RULE_tableIdentifier);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2489);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 323, _ctx)) {
                    case 1: {
                        setState(2486);
                        ((TableIdentifierContext) _localctx).db = errorCapturingIdentifier();
                        setState(2487);
                        match(DOT);
                    }
                    break;
                }
                setState(2491);
                ((TableIdentifierContext) _localctx).table = errorCapturingIdentifier();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final FunctionIdentifierContext functionIdentifier() throws RecognitionException {
        FunctionIdentifierContext _localctx = new FunctionIdentifierContext(_ctx, getState());
        enterRule(_localctx, 192, RULE_functionIdentifier);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2496);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 324, _ctx)) {
                    case 1: {
                        setState(2493);
                        ((FunctionIdentifierContext) _localctx).db = errorCapturingIdentifier();
                        setState(2494);
                        match(DOT);
                    }
                    break;
                }
                setState(2498);
                ((FunctionIdentifierContext) _localctx).function = errorCapturingIdentifier();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final NamedExpressionContext namedExpression() throws RecognitionException {
        NamedExpressionContext _localctx = new NamedExpressionContext(_ctx, getState());
        enterRule(_localctx, 194, RULE_namedExpression);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2500);
                expression();
                setState(2508);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 327, _ctx)) {
                    case 1: {
                        setState(2502);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 325, _ctx)) {
                            case 1: {
                                setState(2501);
                                match(AS);
                            }
                            break;
                        }
                        setState(2506);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 326, _ctx)) {
                            case 1: {
                                setState(2504);
                                ((NamedExpressionContext) _localctx).name = errorCapturingIdentifier();
                            }
                            break;
                            case 2: {
                                setState(2505);
                                identifierList();
                            }
                            break;
                        }
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final NamedExpressionSeqContext namedExpressionSeq() throws RecognitionException {
        NamedExpressionSeqContext _localctx = new NamedExpressionSeqContext(_ctx, getState());
        enterRule(_localctx, 196, RULE_namedExpressionSeq);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2510);
                namedExpression();
                setState(2515);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 328, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(2511);
                                match(COMMA);
                                setState(2512);
                                namedExpression();
                            }
                        }
                    }
                    setState(2517);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 328, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final PartitionFieldListContext partitionFieldList() throws RecognitionException {
        PartitionFieldListContext _localctx = new PartitionFieldListContext(_ctx, getState());
        enterRule(_localctx, 198, RULE_partitionFieldList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2518);
                match(LEFT_PAREN);
                setState(2519);
                ((PartitionFieldListContext) _localctx).partitionField = partitionField();
                ((PartitionFieldListContext) _localctx).fields.add(((PartitionFieldListContext) _localctx).partitionField);
                setState(2524);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(2520);
                            match(COMMA);
                            setState(2521);
                            ((PartitionFieldListContext) _localctx).partitionField = partitionField();
                            ((PartitionFieldListContext) _localctx).fields.add(((PartitionFieldListContext) _localctx).partitionField);
                        }
                    }
                    setState(2526);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
                setState(2527);
                match(RIGHT_PAREN);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final PartitionFieldContext partitionField() throws RecognitionException {
        PartitionFieldContext _localctx = new PartitionFieldContext(_ctx, getState());
        enterRule(_localctx, 200, RULE_partitionField);
        try {
            setState(2531);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 330, _ctx)) {
                case 1:
                    _localctx = new PartitionTransformContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2529);
                    transform();
                }
                break;
                case 2:
                    _localctx = new PartitionColumnContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2530);
                    colType();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final TransformContext transform() throws RecognitionException {
        TransformContext _localctx = new TransformContext(_ctx, getState());
        enterRule(_localctx, 202, RULE_transform);
        int _la;
        try {
            setState(2546);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 332, _ctx)) {
                case 1:
                    _localctx = new IdentityTransformContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2533);
                    qualifiedName();
                }
                break;
                case 2:
                    _localctx = new ApplyTransformContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2534);
                    ((ApplyTransformContext) _localctx).transformName = identifier();
                    setState(2535);
                    match(LEFT_PAREN);
                    setState(2536);
                    ((ApplyTransformContext) _localctx).transformArgument = transformArgument();
                    ((ApplyTransformContext) _localctx).argument.add(((ApplyTransformContext) _localctx).transformArgument);
                    setState(2541);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la == COMMA) {
                        {
                            {
                                setState(2537);
                                match(COMMA);
                                setState(2538);
                                ((ApplyTransformContext) _localctx).transformArgument = transformArgument();
                                ((ApplyTransformContext) _localctx).argument.add(((ApplyTransformContext) _localctx).transformArgument);
                            }
                        }
                        setState(2543);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                    setState(2544);
                    match(RIGHT_PAREN);
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final TransformArgumentContext transformArgument() throws RecognitionException {
        TransformArgumentContext _localctx = new TransformArgumentContext(_ctx, getState());
        enterRule(_localctx, 204, RULE_transformArgument);
        try {
            setState(2550);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 333, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2548);
                    qualifiedName();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2549);
                    constant();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ExpressionContext expression() throws RecognitionException {
        ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
        enterRule(_localctx, 206, RULE_expression);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2552);
                booleanExpression(0);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ExpressionSeqContext expressionSeq() throws RecognitionException {
        ExpressionSeqContext _localctx = new ExpressionSeqContext(_ctx, getState());
        enterRule(_localctx, 208, RULE_expressionSeq);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2554);
                expression();
                setState(2559);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(2555);
                            match(COMMA);
                            setState(2556);
                            expression();
                        }
                    }
                    setState(2561);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final BooleanExpressionContext booleanExpression() throws RecognitionException {
        return booleanExpression(0);
    }

    private BooleanExpressionContext booleanExpression(int _p) throws RecognitionException {
        ParserRuleContext _parentctx = _ctx;
        int _parentState = getState();
        BooleanExpressionContext _localctx = new BooleanExpressionContext(_ctx, _parentState);
        BooleanExpressionContext _prevctx = _localctx;
        int _startState = 210;
        enterRecursionRule(_localctx, 210, RULE_booleanExpression, _p);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2574);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 336, _ctx)) {
                    case 1: {
                        _localctx = new LogicalNotContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;

                        setState(2563);
                        match(NOT);
                        setState(2564);
                        booleanExpression(5);
                    }
                    break;
                    case 2: {
                        _localctx = new ExistsContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(2565);
                        match(EXISTS);
                        setState(2566);
                        match(LEFT_PAREN);
                        setState(2567);
                        query();
                        setState(2568);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case 3: {
                        _localctx = new PredicatedContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(2570);
                        valueExpression(0);
                        setState(2572);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 335, _ctx)) {
                            case 1: {
                                setState(2571);
                                predicate();
                            }
                            break;
                        }
                    }
                    break;
                }
                _ctx.stop = _input.LT(-1);
                setState(2584);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 338, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        if (_parseListeners != null) triggerExitRuleEvent();
                        _prevctx = _localctx;
                        {
                            setState(2582);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 337, _ctx)) {
                                case 1: {
                                    _localctx = new LogicalBinaryContext(new BooleanExpressionContext(_parentctx, _parentState));
                                    ((LogicalBinaryContext) _localctx).left = _prevctx;
                                    pushNewRecursionContext(_localctx, _startState, RULE_booleanExpression);
                                    setState(2576);
                                    if (!(precpred(_ctx, 2)))
                                        throw new FailedPredicateException(this, "precpred(_ctx, 2)");
                                    setState(2577);
                                    ((LogicalBinaryContext) _localctx).operator = match(AND);
                                    setState(2578);
                                    ((LogicalBinaryContext) _localctx).right = booleanExpression(3);
                                }
                                break;
                                case 2: {
                                    _localctx = new LogicalBinaryContext(new BooleanExpressionContext(_parentctx, _parentState));
                                    ((LogicalBinaryContext) _localctx).left = _prevctx;
                                    pushNewRecursionContext(_localctx, _startState, RULE_booleanExpression);
                                    setState(2579);
                                    if (!(precpred(_ctx, 1)))
                                        throw new FailedPredicateException(this, "precpred(_ctx, 1)");
                                    setState(2580);
                                    ((LogicalBinaryContext) _localctx).operator = match(OR);
                                    setState(2581);
                                    ((LogicalBinaryContext) _localctx).right = booleanExpression(2);
                                }
                                break;
                            }
                        }
                    }
                    setState(2586);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 338, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    }

    public final PredicateContext predicate() throws RecognitionException {
        PredicateContext _localctx = new PredicateContext(_ctx, getState());
        enterRule(_localctx, 212, RULE_predicate);
        int _la;
        try {
            setState(2669);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 352, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2588);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == NOT) {
                        {
                            setState(2587);
                            match(NOT);
                        }
                    }

                    setState(2590);
                    ((PredicateContext) _localctx).kind = match(BETWEEN);
                    setState(2591);
                    ((PredicateContext) _localctx).lower = valueExpression(0);
                    setState(2592);
                    match(AND);
                    setState(2593);
                    ((PredicateContext) _localctx).upper = valueExpression(0);
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2596);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == NOT) {
                        {
                            setState(2595);
                            match(NOT);
                        }
                    }

                    setState(2598);
                    ((PredicateContext) _localctx).kind = match(IN);
                    setState(2599);
                    match(LEFT_PAREN);
                    setState(2600);
                    expression();
                    setState(2605);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    while (_la == COMMA) {
                        {
                            {
                                setState(2601);
                                match(COMMA);
                                setState(2602);
                                expression();
                            }
                        }
                        setState(2607);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                    }
                    setState(2608);
                    match(RIGHT_PAREN);
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(2611);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == NOT) {
                        {
                            setState(2610);
                            match(NOT);
                        }
                    }

                    setState(2613);
                    ((PredicateContext) _localctx).kind = match(IN);
                    setState(2614);
                    match(LEFT_PAREN);
                    setState(2615);
                    query();
                    setState(2616);
                    match(RIGHT_PAREN);
                }
                break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(2619);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == NOT) {
                        {
                            setState(2618);
                            match(NOT);
                        }
                    }

                    setState(2621);
                    ((PredicateContext) _localctx).kind = match(RLIKE);
                    setState(2622);
                    ((PredicateContext) _localctx).pattern = valueExpression(0);
                }
                break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                {
                    setState(2624);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == NOT) {
                        {
                            setState(2623);
                            match(NOT);
                        }
                    }

                    setState(2626);
                    ((PredicateContext) _localctx).kind = _input.LT(1);
                    _la = _input.LA(1);
                    if (!(_la == LIKE || _la == ILIKE)) {
                        ((PredicateContext) _localctx).kind = (Token) _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(2627);
                    ((PredicateContext) _localctx).quantifier = _input.LT(1);
                    _la = _input.LA(1);
                    if (!(_la == ALL || _la == ANY || _la == SOME)) {
                        ((PredicateContext) _localctx).quantifier = (Token) _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(2641);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 346, _ctx)) {
                        case 1: {
                            setState(2628);
                            match(LEFT_PAREN);
                            setState(2629);
                            match(RIGHT_PAREN);
                        }
                        break;
                        case 2: {
                            setState(2630);
                            match(LEFT_PAREN);
                            setState(2631);
                            expression();
                            setState(2636);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            while (_la == COMMA) {
                                {
                                    {
                                        setState(2632);
                                        match(COMMA);
                                        setState(2633);
                                        expression();
                                    }
                                }
                                setState(2638);
                                _errHandler.sync(this);
                                _la = _input.LA(1);
                            }
                            setState(2639);
                            match(RIGHT_PAREN);
                        }
                        break;
                    }
                }
                break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                {
                    setState(2644);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == NOT) {
                        {
                            setState(2643);
                            match(NOT);
                        }
                    }

                    setState(2646);
                    ((PredicateContext) _localctx).kind = _input.LT(1);
                    _la = _input.LA(1);
                    if (!(_la == LIKE || _la == ILIKE)) {
                        ((PredicateContext) _localctx).kind = (Token) _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(2647);
                    ((PredicateContext) _localctx).pattern = valueExpression(0);
                    setState(2650);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 348, _ctx)) {
                        case 1: {
                            setState(2648);
                            match(ESCAPE);
                            setState(2649);
                            ((PredicateContext) _localctx).escapeChar = match(STRING);
                        }
                        break;
                    }
                }
                break;
                case 7:
                    enterOuterAlt(_localctx, 7);
                {
                    setState(2652);
                    match(IS);
                    setState(2654);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == NOT) {
                        {
                            setState(2653);
                            match(NOT);
                        }
                    }

                    setState(2656);
                    ((PredicateContext) _localctx).kind = match(NULL);
                }
                break;
                case 8:
                    enterOuterAlt(_localctx, 8);
                {
                    setState(2657);
                    match(IS);
                    setState(2659);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == NOT) {
                        {
                            setState(2658);
                            match(NOT);
                        }
                    }

                    setState(2661);
                    ((PredicateContext) _localctx).kind = _input.LT(1);
                    _la = _input.LA(1);
                    if (!(_la == FALSE || _la == TRUE || _la == UNKNOWN)) {
                        ((PredicateContext) _localctx).kind = (Token) _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                }
                break;
                case 9:
                    enterOuterAlt(_localctx, 9);
                {
                    setState(2662);
                    match(IS);
                    setState(2664);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == NOT) {
                        {
                            setState(2663);
                            match(NOT);
                        }
                    }

                    setState(2666);
                    ((PredicateContext) _localctx).kind = match(DISTINCT);
                    setState(2667);
                    match(FROM);
                    setState(2668);
                    ((PredicateContext) _localctx).right = valueExpression(0);
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ValueExpressionContext valueExpression() throws RecognitionException {
        return valueExpression(0);
    }

    private ValueExpressionContext valueExpression(int _p) throws RecognitionException {
        ParserRuleContext _parentctx = _ctx;
        int _parentState = getState();
        ValueExpressionContext _localctx = new ValueExpressionContext(_ctx, _parentState);
        ValueExpressionContext _prevctx = _localctx;
        int _startState = 214;
        enterRecursionRule(_localctx, 214, RULE_valueExpression, _p);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2675);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 353, _ctx)) {
                    case 1: {
                        _localctx = new ValueExpressionDefaultContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;

                        setState(2672);
                        primaryExpression(0);
                    }
                    break;
                    case 2: {
                        _localctx = new ArithmeticUnaryContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(2673);
                        ((ArithmeticUnaryContext) _localctx).operator = _input.LT(1);
                        _la = _input.LA(1);
                        if (!(((((_la - 298)) & ~0x3f) == 0 && ((1L << (_la - 298)) & ((1L << (PLUS - 298)) | (1L << (MINUS - 298)) | (1L << (TILDE - 298)))) != 0))) {
                            ((ArithmeticUnaryContext) _localctx).operator = (Token) _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                        setState(2674);
                        valueExpression(7);
                    }
                    break;
                }
                _ctx.stop = _input.LT(-1);
                setState(2698);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 355, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        if (_parseListeners != null) triggerExitRuleEvent();
                        _prevctx = _localctx;
                        {
                            setState(2696);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 354, _ctx)) {
                                case 1: {
                                    _localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
                                    ((ArithmeticBinaryContext) _localctx).left = _prevctx;
                                    pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
                                    setState(2677);
                                    if (!(precpred(_ctx, 6)))
                                        throw new FailedPredicateException(this, "precpred(_ctx, 6)");
                                    setState(2678);
                                    ((ArithmeticBinaryContext) _localctx).operator = _input.LT(1);
                                    _la = _input.LA(1);
                                    if (!(_la == DIV || ((((_la - 300)) & ~0x3f) == 0 && ((1L << (_la - 300)) & ((1L << (ASTERISK - 300)) | (1L << (SLASH - 300)) | (1L << (PERCENT - 300)))) != 0))) {
                                        ((ArithmeticBinaryContext) _localctx).operator = (Token) _errHandler.recoverInline(this);
                                    } else {
                                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                        _errHandler.reportMatch(this);
                                        consume();
                                    }
                                    setState(2679);
                                    ((ArithmeticBinaryContext) _localctx).right = valueExpression(7);
                                }
                                break;
                                case 2: {
                                    _localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
                                    ((ArithmeticBinaryContext) _localctx).left = _prevctx;
                                    pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
                                    setState(2680);
                                    if (!(precpred(_ctx, 5)))
                                        throw new FailedPredicateException(this, "precpred(_ctx, 5)");
                                    setState(2681);
                                    ((ArithmeticBinaryContext) _localctx).operator = _input.LT(1);
                                    _la = _input.LA(1);
                                    if (!(((((_la - 298)) & ~0x3f) == 0 && ((1L << (_la - 298)) & ((1L << (PLUS - 298)) | (1L << (MINUS - 298)) | (1L << (CONCAT_PIPE - 298)))) != 0))) {
                                        ((ArithmeticBinaryContext) _localctx).operator = (Token) _errHandler.recoverInline(this);
                                    } else {
                                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                        _errHandler.reportMatch(this);
                                        consume();
                                    }
                                    setState(2682);
                                    ((ArithmeticBinaryContext) _localctx).right = valueExpression(6);
                                }
                                break;
                                case 3: {
                                    _localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
                                    ((ArithmeticBinaryContext) _localctx).left = _prevctx;
                                    pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
                                    setState(2683);
                                    if (!(precpred(_ctx, 4)))
                                        throw new FailedPredicateException(this, "precpred(_ctx, 4)");
                                    setState(2684);
                                    ((ArithmeticBinaryContext) _localctx).operator = match(AMPERSAND);
                                    setState(2685);
                                    ((ArithmeticBinaryContext) _localctx).right = valueExpression(5);
                                }
                                break;
                                case 4: {
                                    _localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
                                    ((ArithmeticBinaryContext) _localctx).left = _prevctx;
                                    pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
                                    setState(2686);
                                    if (!(precpred(_ctx, 3)))
                                        throw new FailedPredicateException(this, "precpred(_ctx, 3)");
                                    setState(2687);
                                    ((ArithmeticBinaryContext) _localctx).operator = match(HAT);
                                    setState(2688);
                                    ((ArithmeticBinaryContext) _localctx).right = valueExpression(4);
                                }
                                break;
                                case 5: {
                                    _localctx = new ArithmeticBinaryContext(new ValueExpressionContext(_parentctx, _parentState));
                                    ((ArithmeticBinaryContext) _localctx).left = _prevctx;
                                    pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
                                    setState(2689);
                                    if (!(precpred(_ctx, 2)))
                                        throw new FailedPredicateException(this, "precpred(_ctx, 2)");
                                    setState(2690);
                                    ((ArithmeticBinaryContext) _localctx).operator = match(PIPE);
                                    setState(2691);
                                    ((ArithmeticBinaryContext) _localctx).right = valueExpression(3);
                                }
                                break;
                                case 6: {
                                    _localctx = new ComparisonContext(new ValueExpressionContext(_parentctx, _parentState));
                                    ((ComparisonContext) _localctx).left = _prevctx;
                                    pushNewRecursionContext(_localctx, _startState, RULE_valueExpression);
                                    setState(2692);
                                    if (!(precpred(_ctx, 1)))
                                        throw new FailedPredicateException(this, "precpred(_ctx, 1)");
                                    setState(2693);
                                    comparisonOperator();
                                    setState(2694);
                                    ((ComparisonContext) _localctx).right = valueExpression(2);
                                }
                                break;
                            }
                        }
                    }
                    setState(2700);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 355, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    }

    public final DatetimeUnitContext datetimeUnit() throws RecognitionException {
        DatetimeUnitContext _localctx = new DatetimeUnitContext(_ctx, getState());
        enterRule(_localctx, 216, RULE_datetimeUnit);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2701);
                _la = _input.LA(1);
                if (!(_la == DAY || _la == DAYOFYEAR || ((((_la - 113)) & ~0x3f) == 0 && ((1L << (_la - 113)) & ((1L << (HOUR - 113)) | (1L << (MICROSECOND - 113)) | (1L << (MILLISECOND - 113)) | (1L << (MINUTE - 113)) | (1L << (MONTH - 113)))) != 0) || _la == QUARTER || _la == SECOND || _la == WEEK || _la == YEAR)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final PrimaryExpressionContext primaryExpression() throws RecognitionException {
        return primaryExpression(0);
    }

    private PrimaryExpressionContext primaryExpression(int _p) throws RecognitionException {
        ParserRuleContext _parentctx = _ctx;
        int _parentState = getState();
        PrimaryExpressionContext _localctx = new PrimaryExpressionContext(_ctx, _parentState);
        PrimaryExpressionContext _prevctx = _localctx;
        int _startState = 218;
        enterRecursionRule(_localctx, 218, RULE_primaryExpression, _p);
        int _la;
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2941);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 379, _ctx)) {
                    case 1: {
                        _localctx = new CurrentLikeContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;

                        setState(2704);
                        ((CurrentLikeContext) _localctx).name = _input.LT(1);
                        _la = _input.LA(1);
                        if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CURRENT_DATE) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER))) != 0) || _la == USER)) {
                            ((CurrentLikeContext) _localctx).name = (Token) _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                    }
                    break;
                    case 2: {
                        _localctx = new TimestampaddContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(2705);
                        ((TimestampaddContext) _localctx).name = _input.LT(1);
                        _la = _input.LA(1);
                        if (!(_la == DATEADD || _la == TIMESTAMPADD)) {
                            ((TimestampaddContext) _localctx).name = (Token) _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                        setState(2706);
                        match(LEFT_PAREN);
                        setState(2707);
                        ((TimestampaddContext) _localctx).unit = datetimeUnit();
                        setState(2708);
                        match(COMMA);
                        setState(2709);
                        ((TimestampaddContext) _localctx).unitsAmount = valueExpression(0);
                        setState(2710);
                        match(COMMA);
                        setState(2711);
                        ((TimestampaddContext) _localctx).timestamp = valueExpression(0);
                        setState(2712);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case 3: {
                        _localctx = new TimestampdiffContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(2714);
                        ((TimestampdiffContext) _localctx).name = _input.LT(1);
                        _la = _input.LA(1);
                        if (!(_la == DATEDIFF || _la == TIMESTAMPDIFF)) {
                            ((TimestampdiffContext) _localctx).name = (Token) _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                        setState(2715);
                        match(LEFT_PAREN);
                        setState(2716);
                        ((TimestampdiffContext) _localctx).unit = datetimeUnit();
                        setState(2717);
                        match(COMMA);
                        setState(2718);
                        ((TimestampdiffContext) _localctx).startTimestamp = valueExpression(0);
                        setState(2719);
                        match(COMMA);
                        setState(2720);
                        ((TimestampdiffContext) _localctx).endTimestamp = valueExpression(0);
                        setState(2721);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case 4: {
                        _localctx = new SearchedCaseContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(2723);
                        match(CASE);
                        setState(2725);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        do {
                            {
                                {
                                    setState(2724);
                                    whenClause();
                                }
                            }
                            setState(2727);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        } while (_la == WHEN);
                        setState(2731);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == ELSE) {
                            {
                                setState(2729);
                                match(ELSE);
                                setState(2730);
                                ((SearchedCaseContext) _localctx).elseExpression = expression();
                            }
                        }

                        setState(2733);
                        match(END);
                    }
                    break;
                    case 5: {
                        _localctx = new SimpleCaseContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(2735);
                        match(CASE);
                        setState(2736);
                        ((SimpleCaseContext) _localctx).value = expression();
                        setState(2738);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        do {
                            {
                                {
                                    setState(2737);
                                    whenClause();
                                }
                            }
                            setState(2740);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        } while (_la == WHEN);
                        setState(2744);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == ELSE) {
                            {
                                setState(2742);
                                match(ELSE);
                                setState(2743);
                                ((SimpleCaseContext) _localctx).elseExpression = expression();
                            }
                        }

                        setState(2746);
                        match(END);
                    }
                    break;
                    case 6: {
                        _localctx = new CastContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(2748);
                        ((CastContext) _localctx).name = _input.LT(1);
                        _la = _input.LA(1);
                        if (!(_la == CAST || _la == TRY_CAST)) {
                            ((CastContext) _localctx).name = (Token) _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                        setState(2749);
                        match(LEFT_PAREN);
                        setState(2750);
                        expression();
                        setState(2751);
                        match(AS);
                        setState(2752);
                        dataType();
                        setState(2753);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case 7: {
                        _localctx = new StructContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(2755);
                        match(STRUCT);
                        setState(2756);
                        match(LEFT_PAREN);
                        setState(2765);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 361, _ctx)) {
                            case 1: {
                                setState(2757);
                                ((StructContext) _localctx).namedExpression = namedExpression();
                                ((StructContext) _localctx).argument.add(((StructContext) _localctx).namedExpression);
                                setState(2762);
                                _errHandler.sync(this);
                                _la = _input.LA(1);
                                while (_la == COMMA) {
                                    {
                                        {
                                            setState(2758);
                                            match(COMMA);
                                            setState(2759);
                                            ((StructContext) _localctx).namedExpression = namedExpression();
                                            ((StructContext) _localctx).argument.add(((StructContext) _localctx).namedExpression);
                                        }
                                    }
                                    setState(2764);
                                    _errHandler.sync(this);
                                    _la = _input.LA(1);
                                }
                            }
                            break;
                        }
                        setState(2767);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case 8: {
                        _localctx = new FirstContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(2768);
                        match(FIRST);
                        setState(2769);
                        match(LEFT_PAREN);
                        setState(2770);
                        expression();
                        setState(2773);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == IGNORE) {
                            {
                                setState(2771);
                                match(IGNORE);
                                setState(2772);
                                match(NULLS);
                            }
                        }

                        setState(2775);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case 9: {
                        _localctx = new Any_valueContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(2777);
                        match(ANY_VALUE);
                        setState(2778);
                        match(LEFT_PAREN);
                        setState(2779);
                        expression();
                        setState(2782);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == IGNORE) {
                            {
                                setState(2780);
                                match(IGNORE);
                                setState(2781);
                                match(NULLS);
                            }
                        }

                        setState(2784);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case 10: {
                        _localctx = new LastContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(2786);
                        match(LAST);
                        setState(2787);
                        match(LEFT_PAREN);
                        setState(2788);
                        expression();
                        setState(2791);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == IGNORE) {
                            {
                                setState(2789);
                                match(IGNORE);
                                setState(2790);
                                match(NULLS);
                            }
                        }

                        setState(2793);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case 11: {
                        _localctx = new PositionContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(2795);
                        match(POSITION);
                        setState(2796);
                        match(LEFT_PAREN);
                        setState(2797);
                        ((PositionContext) _localctx).substr = valueExpression(0);
                        setState(2798);
                        match(IN);
                        setState(2799);
                        ((PositionContext) _localctx).str = valueExpression(0);
                        setState(2800);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case 12: {
                        _localctx = new ConstantDefaultContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(2802);
                        constant();
                    }
                    break;
                    case 13: {
                        _localctx = new StarContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(2803);
                        match(ASTERISK);
                    }
                    break;
                    case 14: {
                        _localctx = new StarContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(2804);
                        qualifiedName();
                        setState(2805);
                        match(DOT);
                        setState(2806);
                        match(ASTERISK);
                    }
                    break;
                    case 15: {
                        _localctx = new RowConstructorContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(2808);
                        match(LEFT_PAREN);
                        setState(2809);
                        namedExpression();
                        setState(2812);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        do {
                            {
                                {
                                    setState(2810);
                                    match(COMMA);
                                    setState(2811);
                                    namedExpression();
                                }
                            }
                            setState(2814);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        } while (_la == COMMA);
                        setState(2816);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case 16: {
                        _localctx = new SubqueryExpressionContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(2818);
                        match(LEFT_PAREN);
                        setState(2819);
                        query();
                        setState(2820);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case 17: {
                        _localctx = new FunctionCallContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(2822);
                        functionName();
                        setState(2823);
                        match(LEFT_PAREN);
                        setState(2835);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 368, _ctx)) {
                            case 1: {
                                setState(2825);
                                _errHandler.sync(this);
                                switch (getInterpreter().adaptivePredict(_input, 366, _ctx)) {
                                    case 1: {
                                        setState(2824);
                                        setQuantifier();
                                    }
                                    break;
                                }
                                setState(2827);
                                ((FunctionCallContext) _localctx).expression = expression();
                                ((FunctionCallContext) _localctx).argument.add(((FunctionCallContext) _localctx).expression);
                                setState(2832);
                                _errHandler.sync(this);
                                _la = _input.LA(1);
                                while (_la == COMMA) {
                                    {
                                        {
                                            setState(2828);
                                            match(COMMA);
                                            setState(2829);
                                            ((FunctionCallContext) _localctx).expression = expression();
                                            ((FunctionCallContext) _localctx).argument.add(((FunctionCallContext) _localctx).expression);
                                        }
                                    }
                                    setState(2834);
                                    _errHandler.sync(this);
                                    _la = _input.LA(1);
                                }
                            }
                            break;
                        }
                        setState(2837);
                        match(RIGHT_PAREN);
                        setState(2844);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 369, _ctx)) {
                            case 1: {
                                setState(2838);
                                match(FILTER);
                                setState(2839);
                                match(LEFT_PAREN);
                                setState(2840);
                                match(WHERE);
                                setState(2841);
                                ((FunctionCallContext) _localctx).where = booleanExpression(0);
                                setState(2842);
                                match(RIGHT_PAREN);
                            }
                            break;
                        }
                        setState(2848);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 370, _ctx)) {
                            case 1: {
                                setState(2846);
                                ((FunctionCallContext) _localctx).nullsOption = _input.LT(1);
                                _la = _input.LA(1);
                                if (!(_la == IGNORE || _la == RESPECT)) {
                                    ((FunctionCallContext) _localctx).nullsOption = (Token) _errHandler.recoverInline(this);
                                } else {
                                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                    _errHandler.reportMatch(this);
                                    consume();
                                }
                                setState(2847);
                                match(NULLS);
                            }
                            break;
                        }
                        setState(2852);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 371, _ctx)) {
                            case 1: {
                                setState(2850);
                                match(OVER);
                                setState(2851);
                                windowSpec();
                            }
                            break;
                        }
                    }
                    break;
                    case 18: {
                        _localctx = new LambdaContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(2854);
                        identifier();
                        setState(2855);
                        match(ARROW);
                        setState(2856);
                        expression();
                    }
                    break;
                    case 19: {
                        _localctx = new LambdaContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(2858);
                        match(LEFT_PAREN);
                        setState(2859);
                        identifier();
                        setState(2862);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        do {
                            {
                                {
                                    setState(2860);
                                    match(COMMA);
                                    setState(2861);
                                    identifier();
                                }
                            }
                            setState(2864);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                        } while (_la == COMMA);
                        setState(2866);
                        match(RIGHT_PAREN);
                        setState(2867);
                        match(ARROW);
                        setState(2868);
                        expression();
                    }
                    break;
                    case 20: {
                        _localctx = new ColumnReferenceContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(2870);
                        identifier();
                    }
                    break;
                    case 21: {
                        _localctx = new ParenthesizedExpressionContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(2871);
                        match(LEFT_PAREN);
                        setState(2872);
                        expression();
                        setState(2873);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case 22: {
                        _localctx = new ExtractContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(2875);
                        match(EXTRACT);
                        setState(2876);
                        match(LEFT_PAREN);
                        setState(2877);
                        ((ExtractContext) _localctx).field = identifier();
                        setState(2878);
                        match(FROM);
                        setState(2879);
                        ((ExtractContext) _localctx).source = valueExpression(0);
                        setState(2880);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case 23: {
                        _localctx = new SubstringContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(2882);
                        _la = _input.LA(1);
                        if (!(_la == SUBSTR || _la == SUBSTRING)) {
                            _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                        setState(2883);
                        match(LEFT_PAREN);
                        setState(2884);
                        ((SubstringContext) _localctx).str = valueExpression(0);
                        setState(2885);
                        _la = _input.LA(1);
                        if (!(_la == COMMA || _la == FROM)) {
                            _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                        setState(2886);
                        ((SubstringContext) _localctx).pos = valueExpression(0);
                        setState(2889);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == COMMA || _la == FOR) {
                            {
                                setState(2887);
                                _la = _input.LA(1);
                                if (!(_la == COMMA || _la == FOR)) {
                                    _errHandler.recoverInline(this);
                                } else {
                                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                    _errHandler.reportMatch(this);
                                    consume();
                                }
                                setState(2888);
                                ((SubstringContext) _localctx).len = valueExpression(0);
                            }
                        }

                        setState(2891);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case 24: {
                        _localctx = new TrimContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(2893);
                        match(TRIM);
                        setState(2894);
                        match(LEFT_PAREN);
                        setState(2896);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 374, _ctx)) {
                            case 1: {
                                setState(2895);
                                ((TrimContext) _localctx).trimOption = _input.LT(1);
                                _la = _input.LA(1);
                                if (!(_la == BOTH || _la == LEADING || _la == TRAILING)) {
                                    ((TrimContext) _localctx).trimOption = (Token) _errHandler.recoverInline(this);
                                } else {
                                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                    _errHandler.reportMatch(this);
                                    consume();
                                }
                            }
                            break;
                        }
                        setState(2899);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 375, _ctx)) {
                            case 1: {
                                setState(2898);
                                ((TrimContext) _localctx).trimStr = valueExpression(0);
                            }
                            break;
                        }
                        setState(2901);
                        match(FROM);
                        setState(2902);
                        ((TrimContext) _localctx).srcStr = valueExpression(0);
                        setState(2903);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case 25: {
                        _localctx = new OverlayContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(2905);
                        match(OVERLAY);
                        setState(2906);
                        match(LEFT_PAREN);
                        setState(2907);
                        ((OverlayContext) _localctx).input = valueExpression(0);
                        setState(2908);
                        match(PLACING);
                        setState(2909);
                        ((OverlayContext) _localctx).replace = valueExpression(0);
                        setState(2910);
                        match(FROM);
                        setState(2911);
                        ((OverlayContext) _localctx).position = valueExpression(0);
                        setState(2914);
                        _errHandler.sync(this);
                        _la = _input.LA(1);
                        if (_la == FOR) {
                            {
                                setState(2912);
                                match(FOR);
                                setState(2913);
                                ((OverlayContext) _localctx).length = valueExpression(0);
                            }
                        }

                        setState(2916);
                        match(RIGHT_PAREN);
                    }
                    break;
                    case 26: {
                        _localctx = new PercentileContext(_localctx);
                        _ctx = _localctx;
                        _prevctx = _localctx;
                        setState(2918);
                        ((PercentileContext) _localctx).name = _input.LT(1);
                        _la = _input.LA(1);
                        if (!(_la == PERCENTILE_CONT || _la == PERCENTILE_DISC)) {
                            ((PercentileContext) _localctx).name = (Token) _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                        setState(2919);
                        match(LEFT_PAREN);
                        setState(2920);
                        ((PercentileContext) _localctx).percentage = valueExpression(0);
                        setState(2921);
                        match(RIGHT_PAREN);
                        setState(2922);
                        match(WITHIN);
                        setState(2923);
                        match(GROUP);
                        setState(2924);
                        match(LEFT_PAREN);
                        setState(2925);
                        match(ORDER);
                        setState(2926);
                        match(BY);
                        setState(2927);
                        sortItem();
                        setState(2928);
                        match(RIGHT_PAREN);
                        setState(2935);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 377, _ctx)) {
                            case 1: {
                                setState(2929);
                                match(FILTER);
                                setState(2930);
                                match(LEFT_PAREN);
                                setState(2931);
                                match(WHERE);
                                setState(2932);
                                ((PercentileContext) _localctx).where = booleanExpression(0);
                                setState(2933);
                                match(RIGHT_PAREN);
                            }
                            break;
                        }
                        setState(2939);
                        _errHandler.sync(this);
                        switch (getInterpreter().adaptivePredict(_input, 378, _ctx)) {
                            case 1: {
                                setState(2937);
                                match(OVER);
                                setState(2938);
                                windowSpec();
                            }
                            break;
                        }
                    }
                    break;
                }
                _ctx.stop = _input.LT(-1);
                setState(2953);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 381, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        if (_parseListeners != null) triggerExitRuleEvent();
                        _prevctx = _localctx;
                        {
                            setState(2951);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 380, _ctx)) {
                                case 1: {
                                    _localctx = new SubscriptContext(new PrimaryExpressionContext(_parentctx, _parentState));
                                    ((SubscriptContext) _localctx).value = _prevctx;
                                    pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
                                    setState(2943);
                                    if (!(precpred(_ctx, 9)))
                                        throw new FailedPredicateException(this, "precpred(_ctx, 9)");
                                    setState(2944);
                                    match(LEFT_BRACKET);
                                    setState(2945);
                                    ((SubscriptContext) _localctx).index = valueExpression(0);
                                    setState(2946);
                                    match(RIGHT_BRACKET);
                                }
                                break;
                                case 2: {
                                    _localctx = new DereferenceContext(new PrimaryExpressionContext(_parentctx, _parentState));
                                    ((DereferenceContext) _localctx).base = _prevctx;
                                    pushNewRecursionContext(_localctx, _startState, RULE_primaryExpression);
                                    setState(2948);
                                    if (!(precpred(_ctx, 7)))
                                        throw new FailedPredicateException(this, "precpred(_ctx, 7)");
                                    setState(2949);
                                    match(DOT);
                                    setState(2950);
                                    ((DereferenceContext) _localctx).fieldName = identifier();
                                }
                                break;
                            }
                        }
                    }
                    setState(2955);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 381, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            unrollRecursionContexts(_parentctx);
        }
        return _localctx;
    }

    public final ConstantContext constant() throws RecognitionException {
        ConstantContext _localctx = new ConstantContext(_ctx, getState());
        enterRule(_localctx, 220, RULE_constant);
        try {
            int _alt;
            setState(2968);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 383, _ctx)) {
                case 1:
                    _localctx = new NullLiteralContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                {
                    setState(2956);
                    match(NULL);
                }
                break;
                case 2:
                    _localctx = new IntervalLiteralContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                {
                    setState(2957);
                    interval();
                }
                break;
                case 3:
                    _localctx = new TypeConstructorContext(_localctx);
                    enterOuterAlt(_localctx, 3);
                {
                    setState(2958);
                    identifier();
                    setState(2959);
                    match(STRING);
                }
                break;
                case 4:
                    _localctx = new NumericLiteralContext(_localctx);
                    enterOuterAlt(_localctx, 4);
                {
                    setState(2961);
                    number();
                }
                break;
                case 5:
                    _localctx = new BooleanLiteralContext(_localctx);
                    enterOuterAlt(_localctx, 5);
                {
                    setState(2962);
                    booleanValue();
                }
                break;
                case 6:
                    _localctx = new StringLiteralContext(_localctx);
                    enterOuterAlt(_localctx, 6);
                {
                    setState(2964);
                    _errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1: {
                                {
                                    setState(2963);
                                    match(STRING);
                                }
                            }
                            break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        setState(2966);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 382, _ctx);
                    } while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER);
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
        ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
        enterRule(_localctx, 222, RULE_comparisonOperator);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2970);
                _la = _input.LA(1);
                if (!(((((_la - 290)) & ~0x3f) == 0 && ((1L << (_la - 290)) & ((1L << (EQ - 290)) | (1L << (NSEQ - 290)) | (1L << (NEQ - 290)) | (1L << (NEQJ - 290)) | (1L << (LT - 290)) | (1L << (LTE - 290)) | (1L << (GT - 290)) | (1L << (GTE - 290)))) != 0))) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ArithmeticOperatorContext arithmeticOperator() throws RecognitionException {
        ArithmeticOperatorContext _localctx = new ArithmeticOperatorContext(_ctx, getState());
        enterRule(_localctx, 224, RULE_arithmeticOperator);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2972);
                _la = _input.LA(1);
                if (!(_la == DIV || ((((_la - 298)) & ~0x3f) == 0 && ((1L << (_la - 298)) & ((1L << (PLUS - 298)) | (1L << (MINUS - 298)) | (1L << (ASTERISK - 298)) | (1L << (SLASH - 298)) | (1L << (PERCENT - 298)) | (1L << (TILDE - 298)) | (1L << (AMPERSAND - 298)) | (1L << (PIPE - 298)) | (1L << (CONCAT_PIPE - 298)) | (1L << (HAT - 298)))) != 0))) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final PredicateOperatorContext predicateOperator() throws RecognitionException {
        PredicateOperatorContext _localctx = new PredicateOperatorContext(_ctx, getState());
        enterRule(_localctx, 226, RULE_predicateOperator);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2974);
                _la = _input.LA(1);
                if (!(_la == AND || ((((_la - 117)) & ~0x3f) == 0 && ((1L << (_la - 117)) & ((1L << (IN - 117)) | (1L << (NOT - 117)) | (1L << (OR - 117)))) != 0))) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final BooleanValueContext booleanValue() throws RecognitionException {
        BooleanValueContext _localctx = new BooleanValueContext(_ctx, getState());
        enterRule(_localctx, 228, RULE_booleanValue);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2976);
                _la = _input.LA(1);
                if (!(_la == FALSE || _la == TRUE)) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final IntervalContext interval() throws RecognitionException {
        IntervalContext _localctx = new IntervalContext(_ctx, getState());
        enterRule(_localctx, 230, RULE_interval);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2978);
                match(INTERVAL);
                setState(2981);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 384, _ctx)) {
                    case 1: {
                        setState(2979);
                        errorCapturingMultiUnitsInterval();
                    }
                    break;
                    case 2: {
                        setState(2980);
                        errorCapturingUnitToUnitInterval();
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ErrorCapturingMultiUnitsIntervalContext errorCapturingMultiUnitsInterval() throws RecognitionException {
        ErrorCapturingMultiUnitsIntervalContext _localctx = new ErrorCapturingMultiUnitsIntervalContext(_ctx, getState());
        enterRule(_localctx, 232, RULE_errorCapturingMultiUnitsInterval);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2983);
                ((ErrorCapturingMultiUnitsIntervalContext) _localctx).body = multiUnitsInterval();
                setState(2985);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 385, _ctx)) {
                    case 1: {
                        setState(2984);
                        unitToUnitInterval();
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final MultiUnitsIntervalContext multiUnitsInterval() throws RecognitionException {
        MultiUnitsIntervalContext _localctx = new MultiUnitsIntervalContext(_ctx, getState());
        enterRule(_localctx, 234, RULE_multiUnitsInterval);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(2990);
                _errHandler.sync(this);
                _alt = 1;
                do {
                    switch (_alt) {
                        case 1: {
                            {
                                setState(2987);
                                intervalValue();
                                setState(2988);
                                ((MultiUnitsIntervalContext) _localctx).identifier = identifier();
                                ((MultiUnitsIntervalContext) _localctx).unit.add(((MultiUnitsIntervalContext) _localctx).identifier);
                            }
                        }
                        break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    setState(2992);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 386, _ctx);
                } while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ErrorCapturingUnitToUnitIntervalContext errorCapturingUnitToUnitInterval() throws RecognitionException {
        ErrorCapturingUnitToUnitIntervalContext _localctx = new ErrorCapturingUnitToUnitIntervalContext(_ctx, getState());
        enterRule(_localctx, 236, RULE_errorCapturingUnitToUnitInterval);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2994);
                ((ErrorCapturingUnitToUnitIntervalContext) _localctx).body = unitToUnitInterval();
                setState(2997);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 387, _ctx)) {
                    case 1: {
                        setState(2995);
                        ((ErrorCapturingUnitToUnitIntervalContext) _localctx).error1 = multiUnitsInterval();
                    }
                    break;
                    case 2: {
                        setState(2996);
                        ((ErrorCapturingUnitToUnitIntervalContext) _localctx).error2 = unitToUnitInterval();
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final UnitToUnitIntervalContext unitToUnitInterval() throws RecognitionException {
        UnitToUnitIntervalContext _localctx = new UnitToUnitIntervalContext(_ctx, getState());
        enterRule(_localctx, 238, RULE_unitToUnitInterval);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(2999);
                ((UnitToUnitIntervalContext) _localctx).value = intervalValue();
                setState(3000);
                ((UnitToUnitIntervalContext) _localctx).from = identifier();
                setState(3001);
                match(TO);
                setState(3002);
                ((UnitToUnitIntervalContext) _localctx).to = identifier();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final IntervalValueContext intervalValue() throws RecognitionException {
        IntervalValueContext _localctx = new IntervalValueContext(_ctx, getState());
        enterRule(_localctx, 240, RULE_intervalValue);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3005);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == PLUS || _la == MINUS) {
                    {
                        setState(3004);
                        _la = _input.LA(1);
                        if (!(_la == PLUS || _la == MINUS)) {
                            _errHandler.recoverInline(this);
                        } else {
                            if (_input.LA(1) == Token.EOF) matchedEOF = true;
                            _errHandler.reportMatch(this);
                            consume();
                        }
                    }
                }

                setState(3007);
                _la = _input.LA(1);
                if (!(((((_la - 312)) & ~0x3f) == 0 && ((1L << (_la - 312)) & ((1L << (STRING - 312)) | (1L << (INTEGER_VALUE - 312)) | (1L << (DECIMAL_VALUE - 312)))) != 0))) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ColPositionContext colPosition() throws RecognitionException {
        ColPositionContext _localctx = new ColPositionContext(_ctx, getState());
        enterRule(_localctx, 242, RULE_colPosition);
        try {
            setState(3012);
            _errHandler.sync(this);
            switch (_input.LA(1)) {
                case FIRST:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3009);
                    ((ColPositionContext) _localctx).position = match(FIRST);
                }
                break;
                case AFTER:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3010);
                    ((ColPositionContext) _localctx).position = match(AFTER);
                    setState(3011);
                    ((ColPositionContext) _localctx).afterCol = errorCapturingIdentifier();
                }
                break;
                default:
                    throw new NoViableAltException(this);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final DataTypeContext dataType() throws RecognitionException {
        DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
        enterRule(_localctx, 244, RULE_dataType);
        int _la;
        try {
            setState(3060);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 396, _ctx)) {
                case 1:
                    _localctx = new ComplexDataTypeContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3014);
                    ((ComplexDataTypeContext) _localctx).complex = match(ARRAY);
                    setState(3015);
                    match(LT);
                    setState(3016);
                    dataType();
                    setState(3017);
                    match(GT);
                }
                break;
                case 2:
                    _localctx = new ComplexDataTypeContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3019);
                    ((ComplexDataTypeContext) _localctx).complex = match(MAP);
                    setState(3020);
                    match(LT);
                    setState(3021);
                    dataType();
                    setState(3022);
                    match(COMMA);
                    setState(3023);
                    dataType();
                    setState(3024);
                    match(GT);
                }
                break;
                case 3:
                    _localctx = new ComplexDataTypeContext(_localctx);
                    enterOuterAlt(_localctx, 3);
                {
                    setState(3026);
                    ((ComplexDataTypeContext) _localctx).complex = match(STRUCT);
                    setState(3033);
                    _errHandler.sync(this);
                    switch (_input.LA(1)) {
                        case LT: {
                            setState(3027);
                            match(LT);
                            setState(3029);
                            _errHandler.sync(this);
                            switch (getInterpreter().adaptivePredict(_input, 390, _ctx)) {
                                case 1: {
                                    setState(3028);
                                    complexColTypeList();
                                }
                                break;
                            }
                            setState(3031);
                            match(GT);
                        }
                        break;
                        case NEQ: {
                            setState(3032);
                            match(NEQ);
                        }
                        break;
                        default:
                            throw new NoViableAltException(this);
                    }
                }
                break;
                case 4:
                    _localctx = new YearMonthIntervalDataTypeContext(_localctx);
                    enterOuterAlt(_localctx, 4);
                {
                    setState(3035);
                    match(INTERVAL);
                    setState(3036);
                    ((YearMonthIntervalDataTypeContext) _localctx).from = _input.LT(1);
                    _la = _input.LA(1);
                    if (!(_la == MONTH || _la == YEAR)) {
                        ((YearMonthIntervalDataTypeContext) _localctx).from = (Token) _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(3039);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 392, _ctx)) {
                        case 1: {
                            setState(3037);
                            match(TO);
                            setState(3038);
                            ((YearMonthIntervalDataTypeContext) _localctx).to = match(MONTH);
                        }
                        break;
                    }
                }
                break;
                case 5:
                    _localctx = new DayTimeIntervalDataTypeContext(_localctx);
                    enterOuterAlt(_localctx, 5);
                {
                    setState(3041);
                    match(INTERVAL);
                    setState(3042);
                    ((DayTimeIntervalDataTypeContext) _localctx).from = _input.LT(1);
                    _la = _input.LA(1);
                    if (!(_la == DAY || _la == HOUR || _la == MINUTE || _la == SECOND)) {
                        ((DayTimeIntervalDataTypeContext) _localctx).from = (Token) _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(3045);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 393, _ctx)) {
                        case 1: {
                            setState(3043);
                            match(TO);
                            setState(3044);
                            ((DayTimeIntervalDataTypeContext) _localctx).to = _input.LT(1);
                            _la = _input.LA(1);
                            if (!(_la == HOUR || _la == MINUTE || _la == SECOND)) {
                                ((DayTimeIntervalDataTypeContext) _localctx).to = (Token) _errHandler.recoverInline(this);
                            } else {
                                if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                _errHandler.reportMatch(this);
                                consume();
                            }
                        }
                        break;
                    }
                }
                break;
                case 6:
                    _localctx = new PrimitiveDataTypeContext(_localctx);
                    enterOuterAlt(_localctx, 6);
                {
                    setState(3047);
                    identifier();
                    setState(3058);
                    _errHandler.sync(this);
                    switch (getInterpreter().adaptivePredict(_input, 395, _ctx)) {
                        case 1: {
                            setState(3048);
                            match(LEFT_PAREN);
                            setState(3049);
                            match(INTEGER_VALUE);
                            setState(3054);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            while (_la == COMMA) {
                                {
                                    {
                                        setState(3050);
                                        match(COMMA);
                                        setState(3051);
                                        match(INTEGER_VALUE);
                                    }
                                }
                                setState(3056);
                                _errHandler.sync(this);
                                _la = _input.LA(1);
                            }
                            setState(3057);
                            match(RIGHT_PAREN);
                        }
                        break;
                    }
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final QualifiedColTypeWithPositionListContext qualifiedColTypeWithPositionList() throws RecognitionException {
        QualifiedColTypeWithPositionListContext _localctx = new QualifiedColTypeWithPositionListContext(_ctx, getState());
        enterRule(_localctx, 246, RULE_qualifiedColTypeWithPositionList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3062);
                qualifiedColTypeWithPosition();
                setState(3067);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(3063);
                            match(COMMA);
                            setState(3064);
                            qualifiedColTypeWithPosition();
                        }
                    }
                    setState(3069);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final QualifiedColTypeWithPositionContext qualifiedColTypeWithPosition() throws RecognitionException {
        QualifiedColTypeWithPositionContext _localctx = new QualifiedColTypeWithPositionContext(_ctx, getState());
        enterRule(_localctx, 248, RULE_qualifiedColTypeWithPosition);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3070);
                ((QualifiedColTypeWithPositionContext) _localctx).name = multipartIdentifier();
                setState(3071);
                dataType();
                setState(3074);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == NOT) {
                    {
                        setState(3072);
                        match(NOT);
                        setState(3073);
                        match(NULL);
                    }
                }

                setState(3077);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == DEFAULT) {
                    {
                        setState(3076);
                        defaultExpression();
                    }
                }

                setState(3080);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == COMMENT) {
                    {
                        setState(3079);
                        commentSpec();
                    }
                }

                setState(3083);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == AFTER || _la == FIRST) {
                    {
                        setState(3082);
                        colPosition();
                    }
                }

            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final DefaultExpressionContext defaultExpression() throws RecognitionException {
        DefaultExpressionContext _localctx = new DefaultExpressionContext(_ctx, getState());
        enterRule(_localctx, 250, RULE_defaultExpression);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3085);
                match(DEFAULT);
                setState(3086);
                expression();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ColTypeListContext colTypeList() throws RecognitionException {
        ColTypeListContext _localctx = new ColTypeListContext(_ctx, getState());
        enterRule(_localctx, 252, RULE_colTypeList);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(3088);
                colType();
                setState(3093);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 402, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(3089);
                                match(COMMA);
                                setState(3090);
                                colType();
                            }
                        }
                    }
                    setState(3095);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 402, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ColTypeContext colType() throws RecognitionException {
        ColTypeContext _localctx = new ColTypeContext(_ctx, getState());
        enterRule(_localctx, 254, RULE_colType);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3096);
                ((ColTypeContext) _localctx).colName = errorCapturingIdentifier();
                setState(3097);
                dataType();
                setState(3100);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 403, _ctx)) {
                    case 1: {
                        setState(3098);
                        match(NOT);
                        setState(3099);
                        match(NULL);
                    }
                    break;
                }
                setState(3103);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 404, _ctx)) {
                    case 1: {
                        setState(3102);
                        commentSpec();
                    }
                    break;
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final CreateOrReplaceTableColTypeListContext createOrReplaceTableColTypeList() throws RecognitionException {
        CreateOrReplaceTableColTypeListContext _localctx = new CreateOrReplaceTableColTypeListContext(_ctx, getState());
        enterRule(_localctx, 256, RULE_createOrReplaceTableColTypeList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3105);
                createOrReplaceTableColType();
                setState(3110);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(3106);
                            match(COMMA);
                            setState(3107);
                            createOrReplaceTableColType();
                        }
                    }
                    setState(3112);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final CreateOrReplaceTableColTypeContext createOrReplaceTableColType() throws RecognitionException {
        CreateOrReplaceTableColTypeContext _localctx = new CreateOrReplaceTableColTypeContext(_ctx, getState());
        enterRule(_localctx, 258, RULE_createOrReplaceTableColType);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3113);
                ((CreateOrReplaceTableColTypeContext) _localctx).colName = errorCapturingIdentifier();
                setState(3114);
                dataType();
                setState(3117);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == NOT) {
                    {
                        setState(3115);
                        match(NOT);
                        setState(3116);
                        match(NULL);
                    }
                }

                setState(3120);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == DEFAULT) {
                    {
                        setState(3119);
                        defaultExpression();
                    }
                }

                setState(3123);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == COMMENT) {
                    {
                        setState(3122);
                        commentSpec();
                    }
                }

            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ComplexColTypeListContext complexColTypeList() throws RecognitionException {
        ComplexColTypeListContext _localctx = new ComplexColTypeListContext(_ctx, getState());
        enterRule(_localctx, 260, RULE_complexColTypeList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3125);
                complexColType();
                setState(3130);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(3126);
                            match(COMMA);
                            setState(3127);
                            complexColType();
                        }
                    }
                    setState(3132);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ComplexColTypeContext complexColType() throws RecognitionException {
        ComplexColTypeContext _localctx = new ComplexColTypeContext(_ctx, getState());
        enterRule(_localctx, 262, RULE_complexColType);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3133);
                identifier();
                setState(3135);
                _errHandler.sync(this);
                switch (getInterpreter().adaptivePredict(_input, 410, _ctx)) {
                    case 1: {
                        setState(3134);
                        match(COLON);
                    }
                    break;
                }
                setState(3137);
                dataType();
                setState(3140);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == NOT) {
                    {
                        setState(3138);
                        match(NOT);
                        setState(3139);
                        match(NULL);
                    }
                }

                setState(3143);
                _errHandler.sync(this);
                _la = _input.LA(1);
                if (_la == COMMENT) {
                    {
                        setState(3142);
                        commentSpec();
                    }
                }

            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final WhenClauseContext whenClause() throws RecognitionException {
        WhenClauseContext _localctx = new WhenClauseContext(_ctx, getState());
        enterRule(_localctx, 264, RULE_whenClause);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3145);
                match(WHEN);
                setState(3146);
                ((WhenClauseContext) _localctx).condition = expression();
                setState(3147);
                match(THEN);
                setState(3148);
                ((WhenClauseContext) _localctx).result = expression();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final WindowClauseContext windowClause() throws RecognitionException {
        WindowClauseContext _localctx = new WindowClauseContext(_ctx, getState());
        enterRule(_localctx, 266, RULE_windowClause);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(3150);
                match(WINDOW);
                setState(3151);
                namedWindow();
                setState(3156);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 413, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(3152);
                                match(COMMA);
                                setState(3153);
                                namedWindow();
                            }
                        }
                    }
                    setState(3158);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 413, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final NamedWindowContext namedWindow() throws RecognitionException {
        NamedWindowContext _localctx = new NamedWindowContext(_ctx, getState());
        enterRule(_localctx, 268, RULE_namedWindow);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3159);
                ((NamedWindowContext) _localctx).name = errorCapturingIdentifier();
                setState(3160);
                match(AS);
                setState(3161);
                windowSpec();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final WindowSpecContext windowSpec() throws RecognitionException {
        WindowSpecContext _localctx = new WindowSpecContext(_ctx, getState());
        enterRule(_localctx, 270, RULE_windowSpec);
        int _la;
        try {
            setState(3209);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 421, _ctx)) {
                case 1:
                    _localctx = new WindowRefContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3163);
                    ((WindowRefContext) _localctx).name = errorCapturingIdentifier();
                }
                break;
                case 2:
                    _localctx = new WindowRefContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3164);
                    match(LEFT_PAREN);
                    setState(3165);
                    ((WindowRefContext) _localctx).name = errorCapturingIdentifier();
                    setState(3166);
                    match(RIGHT_PAREN);
                }
                break;
                case 3:
                    _localctx = new WindowDefContext(_localctx);
                    enterOuterAlt(_localctx, 3);
                {
                    setState(3168);
                    match(LEFT_PAREN);
                    setState(3203);
                    _errHandler.sync(this);
                    switch (_input.LA(1)) {
                        case CLUSTER: {
                            setState(3169);
                            match(CLUSTER);
                            setState(3170);
                            match(BY);
                            setState(3171);
                            ((WindowDefContext) _localctx).expression = expression();
                            ((WindowDefContext) _localctx).partition.add(((WindowDefContext) _localctx).expression);
                            setState(3176);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            while (_la == COMMA) {
                                {
                                    {
                                        setState(3172);
                                        match(COMMA);
                                        setState(3173);
                                        ((WindowDefContext) _localctx).expression = expression();
                                        ((WindowDefContext) _localctx).partition.add(((WindowDefContext) _localctx).expression);
                                    }
                                }
                                setState(3178);
                                _errHandler.sync(this);
                                _la = _input.LA(1);
                            }
                        }
                        break;
                        case RIGHT_PAREN:
                        case DISTRIBUTE:
                        case ORDER:
                        case PARTITION:
                        case RANGE:
                        case ROWS:
                        case SORT: {
                            setState(3189);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == DISTRIBUTE || _la == PARTITION) {
                                {
                                    setState(3179);
                                    _la = _input.LA(1);
                                    if (!(_la == DISTRIBUTE || _la == PARTITION)) {
                                        _errHandler.recoverInline(this);
                                    } else {
                                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                        _errHandler.reportMatch(this);
                                        consume();
                                    }
                                    setState(3180);
                                    match(BY);
                                    setState(3181);
                                    ((WindowDefContext) _localctx).expression = expression();
                                    ((WindowDefContext) _localctx).partition.add(((WindowDefContext) _localctx).expression);
                                    setState(3186);
                                    _errHandler.sync(this);
                                    _la = _input.LA(1);
                                    while (_la == COMMA) {
                                        {
                                            {
                                                setState(3182);
                                                match(COMMA);
                                                setState(3183);
                                                ((WindowDefContext) _localctx).expression = expression();
                                                ((WindowDefContext) _localctx).partition.add(((WindowDefContext) _localctx).expression);
                                            }
                                        }
                                        setState(3188);
                                        _errHandler.sync(this);
                                        _la = _input.LA(1);
                                    }
                                }
                            }

                            setState(3201);
                            _errHandler.sync(this);
                            _la = _input.LA(1);
                            if (_la == ORDER || _la == SORT) {
                                {
                                    setState(3191);
                                    _la = _input.LA(1);
                                    if (!(_la == ORDER || _la == SORT)) {
                                        _errHandler.recoverInline(this);
                                    } else {
                                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                                        _errHandler.reportMatch(this);
                                        consume();
                                    }
                                    setState(3192);
                                    match(BY);
                                    setState(3193);
                                    sortItem();
                                    setState(3198);
                                    _errHandler.sync(this);
                                    _la = _input.LA(1);
                                    while (_la == COMMA) {
                                        {
                                            {
                                                setState(3194);
                                                match(COMMA);
                                                setState(3195);
                                                sortItem();
                                            }
                                        }
                                        setState(3200);
                                        _errHandler.sync(this);
                                        _la = _input.LA(1);
                                    }
                                }
                            }

                        }
                        break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    setState(3206);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == RANGE || _la == ROWS) {
                        {
                            setState(3205);
                            windowFrame();
                        }
                    }

                    setState(3208);
                    match(RIGHT_PAREN);
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final WindowFrameContext windowFrame() throws RecognitionException {
        WindowFrameContext _localctx = new WindowFrameContext(_ctx, getState());
        enterRule(_localctx, 272, RULE_windowFrame);
        try {
            setState(3227);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 422, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3211);
                    ((WindowFrameContext) _localctx).frameType = match(RANGE);
                    setState(3212);
                    ((WindowFrameContext) _localctx).start = frameBound();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3213);
                    ((WindowFrameContext) _localctx).frameType = match(ROWS);
                    setState(3214);
                    ((WindowFrameContext) _localctx).start = frameBound();
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(3215);
                    ((WindowFrameContext) _localctx).frameType = match(RANGE);
                    setState(3216);
                    match(BETWEEN);
                    setState(3217);
                    ((WindowFrameContext) _localctx).start = frameBound();
                    setState(3218);
                    match(AND);
                    setState(3219);
                    ((WindowFrameContext) _localctx).end = frameBound();
                }
                break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(3221);
                    ((WindowFrameContext) _localctx).frameType = match(ROWS);
                    setState(3222);
                    match(BETWEEN);
                    setState(3223);
                    ((WindowFrameContext) _localctx).start = frameBound();
                    setState(3224);
                    match(AND);
                    setState(3225);
                    ((WindowFrameContext) _localctx).end = frameBound();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final FrameBoundContext frameBound() throws RecognitionException {
        FrameBoundContext _localctx = new FrameBoundContext(_ctx, getState());
        enterRule(_localctx, 274, RULE_frameBound);
        int _la;
        try {
            setState(3236);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 423, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3229);
                    match(UNBOUNDED);
                    setState(3230);
                    ((FrameBoundContext) _localctx).boundType = _input.LT(1);
                    _la = _input.LA(1);
                    if (!(_la == FOLLOWING || _la == PRECEDING)) {
                        ((FrameBoundContext) _localctx).boundType = (Token) _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3231);
                    ((FrameBoundContext) _localctx).boundType = match(CURRENT);
                    setState(3232);
                    match(ROW);
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(3233);
                    expression();
                    setState(3234);
                    ((FrameBoundContext) _localctx).boundType = _input.LT(1);
                    _la = _input.LA(1);
                    if (!(_la == FOLLOWING || _la == PRECEDING)) {
                        ((FrameBoundContext) _localctx).boundType = (Token) _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final QualifiedNameListContext qualifiedNameList() throws RecognitionException {
        QualifiedNameListContext _localctx = new QualifiedNameListContext(_ctx, getState());
        enterRule(_localctx, 276, RULE_qualifiedNameList);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3238);
                qualifiedName();
                setState(3243);
                _errHandler.sync(this);
                _la = _input.LA(1);
                while (_la == COMMA) {
                    {
                        {
                            setState(3239);
                            match(COMMA);
                            setState(3240);
                            qualifiedName();
                        }
                    }
                    setState(3245);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final FunctionNameContext functionName() throws RecognitionException {
        FunctionNameContext _localctx = new FunctionNameContext(_ctx, getState());
        enterRule(_localctx, 278, RULE_functionName);
        try {
            setState(3250);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 425, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3246);
                    qualifiedName();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3247);
                    match(FILTER);
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(3248);
                    match(LEFT);
                }
                break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(3249);
                    match(RIGHT);
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final QualifiedNameContext qualifiedName() throws RecognitionException {
        QualifiedNameContext _localctx = new QualifiedNameContext(_ctx, getState());
        enterRule(_localctx, 280, RULE_qualifiedName);
        try {
            int _alt;
            enterOuterAlt(_localctx, 1);
            {
                setState(3252);
                identifier();
                setState(3257);
                _errHandler.sync(this);
                _alt = getInterpreter().adaptivePredict(_input, 426, _ctx);
                while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER) {
                    if (_alt == 1) {
                        {
                            {
                                setState(3253);
                                match(DOT);
                                setState(3254);
                                identifier();
                            }
                        }
                    }
                    setState(3259);
                    _errHandler.sync(this);
                    _alt = getInterpreter().adaptivePredict(_input, 426, _ctx);
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ErrorCapturingIdentifierContext errorCapturingIdentifier() throws RecognitionException {
        ErrorCapturingIdentifierContext _localctx = new ErrorCapturingIdentifierContext(_ctx, getState());
        enterRule(_localctx, 282, RULE_errorCapturingIdentifier);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3260);
                identifier();
                setState(3261);
                errorCapturingIdentifierExtra();
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final ErrorCapturingIdentifierExtraContext errorCapturingIdentifierExtra() throws RecognitionException {
        ErrorCapturingIdentifierExtraContext _localctx = new ErrorCapturingIdentifierExtraContext(_ctx, getState());
        enterRule(_localctx, 284, RULE_errorCapturingIdentifierExtra);
        try {
            int _alt;
            setState(3270);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 428, _ctx)) {
                case 1:
                    _localctx = new ErrorIdentContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3265);
                    _errHandler.sync(this);
                    _alt = 1;
                    do {
                        switch (_alt) {
                            case 1: {
                                {
                                    setState(3263);
                                    match(MINUS);
                                    setState(3264);
                                    identifier();
                                }
                            }
                            break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        setState(3267);
                        _errHandler.sync(this);
                        _alt = getInterpreter().adaptivePredict(_input, 427, _ctx);
                    } while (_alt != 2 && _alt != org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER);
                }
                break;
                case 2:
                    _localctx = new RealIdentContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                {
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final IdentifierContext identifier() throws RecognitionException {
        IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
        enterRule(_localctx, 286, RULE_identifier);
        try {
            setState(3275);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 429, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3272);
                    strictIdentifier();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3273);
                    if (!(!SQL_standard_keyword_behavior))
                        throw new FailedPredicateException(this, "!SQL_standard_keyword_behavior");
                    setState(3274);
                    strictNonReserved();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final StrictIdentifierContext strictIdentifier() throws RecognitionException {
        StrictIdentifierContext _localctx = new StrictIdentifierContext(_ctx, getState());
        enterRule(_localctx, 288, RULE_strictIdentifier);
        try {
            setState(3283);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 430, _ctx)) {
                case 1:
                    _localctx = new UnquotedIdentifierContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3277);
                    match(IDENTIFIER);
                }
                break;
                case 2:
                    _localctx = new QuotedIdentifierAlternativeContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3278);
                    quotedIdentifier();
                }
                break;
                case 3:
                    _localctx = new UnquotedIdentifierContext(_localctx);
                    enterOuterAlt(_localctx, 3);
                {
                    setState(3279);
                    if (!(SQL_standard_keyword_behavior))
                        throw new FailedPredicateException(this, "SQL_standard_keyword_behavior");
                    setState(3280);
                    ansiNonReserved();
                }
                break;
                case 4:
                    _localctx = new UnquotedIdentifierContext(_localctx);
                    enterOuterAlt(_localctx, 4);
                {
                    setState(3281);
                    if (!(!SQL_standard_keyword_behavior))
                        throw new FailedPredicateException(this, "!SQL_standard_keyword_behavior");
                    setState(3282);
                    nonReserved();
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final QuotedIdentifierContext quotedIdentifier() throws RecognitionException {
        QuotedIdentifierContext _localctx = new QuotedIdentifierContext(_ctx, getState());
        enterRule(_localctx, 290, RULE_quotedIdentifier);
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3285);
                match(BACKQUOTED_IDENTIFIER);
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final NumberContext number() throws RecognitionException {
        NumberContext _localctx = new NumberContext(_ctx, getState());
        enterRule(_localctx, 292, RULE_number);
        int _la;
        try {
            setState(3330);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 441, _ctx)) {
                case 1:
                    _localctx = new ExponentLiteralContext(_localctx);
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3287);
                    if (!(!legacy_exponent_literal_as_decimal_enabled))
                        throw new FailedPredicateException(this, "!legacy_exponent_literal_as_decimal_enabled");
                    setState(3289);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == MINUS) {
                        {
                            setState(3288);
                            match(MINUS);
                        }
                    }

                    setState(3291);
                    match(EXPONENT_VALUE);
                }
                break;
                case 2:
                    _localctx = new DecimalLiteralContext(_localctx);
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3292);
                    if (!(!legacy_exponent_literal_as_decimal_enabled))
                        throw new FailedPredicateException(this, "!legacy_exponent_literal_as_decimal_enabled");
                    setState(3294);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == MINUS) {
                        {
                            setState(3293);
                            match(MINUS);
                        }
                    }

                    setState(3296);
                    match(DECIMAL_VALUE);
                }
                break;
                case 3:
                    _localctx = new LegacyDecimalLiteralContext(_localctx);
                    enterOuterAlt(_localctx, 3);
                {
                    setState(3297);
                    if (!(legacy_exponent_literal_as_decimal_enabled))
                        throw new FailedPredicateException(this, "legacy_exponent_literal_as_decimal_enabled");
                    setState(3299);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == MINUS) {
                        {
                            setState(3298);
                            match(MINUS);
                        }
                    }

                    setState(3301);
                    _la = _input.LA(1);
                    if (!(_la == EXPONENT_VALUE || _la == DECIMAL_VALUE)) {
                        _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                }
                break;
                case 4:
                    _localctx = new IntegerLiteralContext(_localctx);
                    enterOuterAlt(_localctx, 4);
                {
                    setState(3303);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == MINUS) {
                        {
                            setState(3302);
                            match(MINUS);
                        }
                    }

                    setState(3305);
                    match(INTEGER_VALUE);
                }
                break;
                case 5:
                    _localctx = new BigIntLiteralContext(_localctx);
                    enterOuterAlt(_localctx, 5);
                {
                    setState(3307);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == MINUS) {
                        {
                            setState(3306);
                            match(MINUS);
                        }
                    }

                    setState(3309);
                    match(BIGINT_LITERAL);
                }
                break;
                case 6:
                    _localctx = new SmallIntLiteralContext(_localctx);
                    enterOuterAlt(_localctx, 6);
                {
                    setState(3311);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == MINUS) {
                        {
                            setState(3310);
                            match(MINUS);
                        }
                    }

                    setState(3313);
                    match(SMALLINT_LITERAL);
                }
                break;
                case 7:
                    _localctx = new TinyIntLiteralContext(_localctx);
                    enterOuterAlt(_localctx, 7);
                {
                    setState(3315);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == MINUS) {
                        {
                            setState(3314);
                            match(MINUS);
                        }
                    }

                    setState(3317);
                    match(TINYINT_LITERAL);
                }
                break;
                case 8:
                    _localctx = new DoubleLiteralContext(_localctx);
                    enterOuterAlt(_localctx, 8);
                {
                    setState(3319);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == MINUS) {
                        {
                            setState(3318);
                            match(MINUS);
                        }
                    }

                    setState(3321);
                    match(DOUBLE_LITERAL);
                }
                break;
                case 9:
                    _localctx = new FloatLiteralContext(_localctx);
                    enterOuterAlt(_localctx, 9);
                {
                    setState(3323);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == MINUS) {
                        {
                            setState(3322);
                            match(MINUS);
                        }
                    }

                    setState(3325);
                    match(FLOAT_LITERAL);
                }
                break;
                case 10:
                    _localctx = new BigDecimalLiteralContext(_localctx);
                    enterOuterAlt(_localctx, 10);
                {
                    setState(3327);
                    _errHandler.sync(this);
                    _la = _input.LA(1);
                    if (_la == MINUS) {
                        {
                            setState(3326);
                            match(MINUS);
                        }
                    }

                    setState(3329);
                    match(BIGDECIMAL_LITERAL);
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final AlterColumnActionContext alterColumnAction() throws RecognitionException {
        AlterColumnActionContext _localctx = new AlterColumnActionContext(_ctx, getState());
        enterRule(_localctx, 294, RULE_alterColumnAction);
        int _la;
        try {
            setState(3343);
            _errHandler.sync(this);
            switch (getInterpreter().adaptivePredict(_input, 442, _ctx)) {
                case 1:
                    enterOuterAlt(_localctx, 1);
                {
                    setState(3332);
                    match(TYPE);
                    setState(3333);
                    dataType();
                }
                break;
                case 2:
                    enterOuterAlt(_localctx, 2);
                {
                    setState(3334);
                    commentSpec();
                }
                break;
                case 3:
                    enterOuterAlt(_localctx, 3);
                {
                    setState(3335);
                    colPosition();
                }
                break;
                case 4:
                    enterOuterAlt(_localctx, 4);
                {
                    setState(3336);
                    ((AlterColumnActionContext) _localctx).setOrDrop = _input.LT(1);
                    _la = _input.LA(1);
                    if (!(_la == DROP || _la == SET)) {
                        ((AlterColumnActionContext) _localctx).setOrDrop = (Token) _errHandler.recoverInline(this);
                    } else {
                        if (_input.LA(1) == Token.EOF) matchedEOF = true;
                        _errHandler.reportMatch(this);
                        consume();
                    }
                    setState(3337);
                    match(NOT);
                    setState(3338);
                    match(NULL);
                }
                break;
                case 5:
                    enterOuterAlt(_localctx, 5);
                {
                    setState(3339);
                    match(SET);
                    setState(3340);
                    defaultExpression();
                }
                break;
                case 6:
                    enterOuterAlt(_localctx, 6);
                {
                    setState(3341);
                    ((AlterColumnActionContext) _localctx).dropDefault = match(DROP);
                    setState(3342);
                    match(DEFAULT);
                }
                break;
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final AnsiNonReservedContext ansiNonReserved() throws RecognitionException {
        AnsiNonReservedContext _localctx = new AnsiNonReservedContext(_ctx, getState());
        enterRule(_localctx, 296, RULE_ansiNonReserved);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3345);
                _la = _input.LA(1);
                if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << ALTER) | (1L << ANALYZE) | (1L << ANTI) | (1L << ANY_VALUE) | (1L << ARCHIVE) | (1L << ARRAY) | (1L << ASC) | (1L << AT) | (1L << BETWEEN) | (1L << BUCKET) | (1L << BUCKETS) | (1L << BY) | (1L << CACHE) | (1L << CASCADE) | (1L << CATALOG) | (1L << CATALOGS) | (1L << CHANGE) | (1L << CLEAR) | (1L << CLUSTER) | (1L << CLUSTERED) | (1L << CODEGEN) | (1L << COLLECTION) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMPACT) | (1L << COMPACTIONS) | (1L << COMPUTE) | (1L << CONCATENATE) | (1L << COST) | (1L << CUBE) | (1L << CURRENT) | (1L << DAY) | (1L << DAYOFYEAR) | (1L << DATA) | (1L << DATABASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DATABASES - 64)) | (1L << (DATEADD - 64)) | (1L << (DATEDIFF - 64)) | (1L << (DBPROPERTIES - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFINED - 64)) | (1L << (DELETE - 64)) | (1L << (DELIMITED - 64)) | (1L << (DESC - 64)) | (1L << (DESCRIBE - 64)) | (1L << (DFS - 64)) | (1L << (DIRECTORIES - 64)) | (1L << (DIRECTORY - 64)) | (1L << (DISTRIBUTE - 64)) | (1L << (DIV - 64)) | (1L << (DROP - 64)) | (1L << (ESCAPED - 64)) | (1L << (EXCHANGE - 64)) | (1L << (EXISTS - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXPORT - 64)) | (1L << (EXTENDED - 64)) | (1L << (EXTERNAL - 64)) | (1L << (EXTRACT - 64)) | (1L << (FIELDS - 64)) | (1L << (FILEFORMAT - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORMAT - 64)) | (1L << (FORMATTED - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GLOBAL - 64)) | (1L << (GROUPING - 64)) | (1L << (HOUR - 64)) | (1L << (IF - 64)) | (1L << (IGNORE - 64)) | (1L << (IMPORT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INPATH - 64)) | (1L << (INPUTFORMAT - 64)) | (1L << (INSERT - 64)) | (1L << (INTERVAL - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ITEMS - 128)) | (1L << (KEYS - 128)) | (1L << (LAST - 128)) | (1L << (LAZY - 128)) | (1L << (LIKE - 128)) | (1L << (ILIKE - 128)) | (1L << (LIMIT - 128)) | (1L << (LINES - 128)) | (1L << (LIST - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKS - 128)) | (1L << (LOGICAL - 128)) | (1L << (MACRO - 128)) | (1L << (MAP - 128)) | (1L << (MATCHED - 128)) | (1L << (MERGE - 128)) | (1L << (MICROSECOND - 128)) | (1L << (MILLISECOND - 128)) | (1L << (MINUTE - 128)) | (1L << (MONTH - 128)) | (1L << (MSCK - 128)) | (1L << (NAMESPACE - 128)) | (1L << (NAMESPACES - 128)) | (1L << (NO - 128)) | (1L << (NULLS - 128)) | (1L << (OF - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (OUT - 128)) | (1L << (OUTPUTFORMAT - 128)) | (1L << (OVER - 128)) | (1L << (OVERLAY - 128)) | (1L << (OVERWRITE - 128)) | (1L << (PARTITION - 128)) | (1L << (PARTITIONED - 128)) | (1L << (PARTITIONS - 128)) | (1L << (PERCENTLIT - 128)) | (1L << (PIVOT - 128)) | (1L << (PLACING - 128)) | (1L << (POSITION - 128)) | (1L << (PRECEDING - 128)) | (1L << (PRINCIPALS - 128)) | (1L << (PROPERTIES - 128)) | (1L << (PURGE - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (QUARTER - 192)) | (1L << (QUERY - 192)) | (1L << (RANGE - 192)) | (1L << (RECORDREADER - 192)) | (1L << (RECORDWRITER - 192)) | (1L << (RECOVER - 192)) | (1L << (REDUCE - 192)) | (1L << (REFRESH - 192)) | (1L << (RENAME - 192)) | (1L << (REPAIR - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (RESET - 192)) | (1L << (RESPECT - 192)) | (1L << (RESTRICT - 192)) | (1L << (REVOKE - 192)) | (1L << (RLIKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLES - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROW - 192)) | (1L << (ROWS - 192)) | (1L << (SECOND - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SEMI - 192)) | (1L << (SEPARATED - 192)) | (1L << (SERDE - 192)) | (1L << (SERDEPROPERTIES - 192)) | (1L << (SET - 192)) | (1L << (SETMINUS - 192)) | (1L << (SETS - 192)) | (1L << (SHOW - 192)) | (1L << (SKEWED - 192)) | (1L << (SORT - 192)) | (1L << (SORTED - 192)) | (1L << (START - 192)) | (1L << (STATISTICS - 192)) | (1L << (STORED - 192)) | (1L << (STRATIFY - 192)) | (1L << (STRUCT - 192)) | (1L << (SUBSTR - 192)) | (1L << (SUBSTRING - 192)) | (1L << (SYNC - 192)) | (1L << (SYSTEM_TIME - 192)) | (1L << (SYSTEM_VERSION - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESAMPLE - 192)) | (1L << (TBLPROPERTIES - 192)) | (1L << (TEMPORARY - 192)) | (1L << (TERMINATED - 192)) | (1L << (TIMESTAMP - 192)) | (1L << (TIMESTAMPADD - 192)) | (1L << (TIMESTAMPDIFF - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TOUCH - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSACTIONS - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIM - 256)) | (1L << (TRUE - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRY_CAST - 256)) | (1L << (TYPE - 256)) | (1L << (UNARCHIVE - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCACHE - 256)) | (1L << (UNLOCK - 256)) | (1L << (UNSET - 256)) | (1L << (UPDATE - 256)) | (1L << (USE - 256)) | (1L << (VALUES - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (WEEK - 256)) | (1L << (WINDOW - 256)) | (1L << (YEAR - 256)) | (1L << (ZONE - 256)))) != 0))) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final StrictNonReservedContext strictNonReserved() throws RecognitionException {
        StrictNonReservedContext _localctx = new StrictNonReservedContext(_ctx, getState());
        enterRule(_localctx, 298, RULE_strictNonReserved);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3347);
                _la = _input.LA(1);
                if (!(_la == ANTI || _la == CROSS || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (EXCEPT - 85)) | (1L << (FULL - 85)) | (1L << (INNER - 85)) | (1L << (INTERSECT - 85)) | (1L << (JOIN - 85)) | (1L << (LATERAL - 85)) | (1L << (LEFT - 85)))) != 0) || ((((_la - 158)) & ~0x3f) == 0 && ((1L << (_la - 158)) & ((1L << (NATURAL - 158)) | (1L << (ON - 158)) | (1L << (RIGHT - 158)) | (1L << (SEMI - 158)))) != 0) || ((((_la - 227)) & ~0x3f) == 0 && ((1L << (_la - 227)) & ((1L << (SETMINUS - 227)) | (1L << (UNION - 227)) | (1L << (USING - 227)))) != 0))) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public final NonReservedContext nonReserved() throws RecognitionException {
        NonReservedContext _localctx = new NonReservedContext(_ctx, getState());
        enterRule(_localctx, 300, RULE_nonReserved);
        int _la;
        try {
            enterOuterAlt(_localctx, 1);
            {
                setState(3349);
                _la = _input.LA(1);
                if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << AFTER) | (1L << ALL) | (1L << ALTER) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ANY_VALUE) | (1L << ARCHIVE) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << AT) | (1L << AUTHORIZATION) | (1L << BETWEEN) | (1L << BOTH) | (1L << BUCKET) | (1L << BUCKETS) | (1L << BY) | (1L << CACHE) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CATALOG) | (1L << CATALOGS) | (1L << CHANGE) | (1L << CHECK) | (1L << CLEAR) | (1L << CLUSTER) | (1L << CLUSTERED) | (1L << CODEGEN) | (1L << COLLATE) | (1L << COLLECTION) | (1L << COLUMN) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMIT) | (1L << COMPACT) | (1L << COMPACTIONS) | (1L << COMPUTE) | (1L << CONCATENATE) | (1L << CONSTRAINT) | (1L << COST) | (1L << CREATE) | (1L << CUBE) | (1L << CURRENT) | (1L << CURRENT_DATE) | (1L << CURRENT_TIME) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER) | (1L << DAY) | (1L << DAYOFYEAR) | (1L << DATA) | (1L << DATABASE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DATABASES - 64)) | (1L << (DATEADD - 64)) | (1L << (DATEDIFF - 64)) | (1L << (DBPROPERTIES - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFINED - 64)) | (1L << (DELETE - 64)) | (1L << (DELIMITED - 64)) | (1L << (DESC - 64)) | (1L << (DESCRIBE - 64)) | (1L << (DFS - 64)) | (1L << (DIRECTORIES - 64)) | (1L << (DIRECTORY - 64)) | (1L << (DISTINCT - 64)) | (1L << (DISTRIBUTE - 64)) | (1L << (DIV - 64)) | (1L << (DROP - 64)) | (1L << (ELSE - 64)) | (1L << (END - 64)) | (1L << (ESCAPE - 64)) | (1L << (ESCAPED - 64)) | (1L << (EXCHANGE - 64)) | (1L << (EXISTS - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXPORT - 64)) | (1L << (EXTENDED - 64)) | (1L << (EXTERNAL - 64)) | (1L << (EXTRACT - 64)) | (1L << (FALSE - 64)) | (1L << (FETCH - 64)) | (1L << (FIELDS - 64)) | (1L << (FILTER - 64)) | (1L << (FILEFORMAT - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FOR - 64)) | (1L << (FOREIGN - 64)) | (1L << (FORMAT - 64)) | (1L << (FORMATTED - 64)) | (1L << (FROM - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANT - 64)) | (1L << (GROUP - 64)) | (1L << (GROUPING - 64)) | (1L << (HAVING - 64)) | (1L << (HOUR - 64)) | (1L << (IF - 64)) | (1L << (IGNORE - 64)) | (1L << (IMPORT - 64)) | (1L << (IN - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INPATH - 64)) | (1L << (INPUTFORMAT - 64)) | (1L << (INSERT - 64)) | (1L << (INTERVAL - 64)) | (1L << (INTO - 64)) | (1L << (IS - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ITEMS - 128)) | (1L << (KEYS - 128)) | (1L << (LAST - 128)) | (1L << (LAZY - 128)) | (1L << (LEADING - 128)) | (1L << (LIKE - 128)) | (1L << (ILIKE - 128)) | (1L << (LIMIT - 128)) | (1L << (LINES - 128)) | (1L << (LIST - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKS - 128)) | (1L << (LOGICAL - 128)) | (1L << (MACRO - 128)) | (1L << (MAP - 128)) | (1L << (MATCHED - 128)) | (1L << (MERGE - 128)) | (1L << (MICROSECOND - 128)) | (1L << (MILLISECOND - 128)) | (1L << (MINUTE - 128)) | (1L << (MONTH - 128)) | (1L << (MSCK - 128)) | (1L << (NAMESPACE - 128)) | (1L << (NAMESPACES - 128)) | (1L << (NO - 128)) | (1L << (NOT - 128)) | (1L << (NULL - 128)) | (1L << (NULLS - 128)) | (1L << (OF - 128)) | (1L << (OFFSET - 128)) | (1L << (ONLY - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (OR - 128)) | (1L << (ORDER - 128)) | (1L << (OUT - 128)) | (1L << (OUTER - 128)) | (1L << (OUTPUTFORMAT - 128)) | (1L << (OVER - 128)) | (1L << (OVERLAPS - 128)) | (1L << (OVERLAY - 128)) | (1L << (OVERWRITE - 128)) | (1L << (PARTITION - 128)) | (1L << (PARTITIONED - 128)) | (1L << (PARTITIONS - 128)) | (1L << (PERCENTILE_CONT - 128)) | (1L << (PERCENTILE_DISC - 128)) | (1L << (PERCENTLIT - 128)) | (1L << (PIVOT - 128)) | (1L << (PLACING - 128)) | (1L << (POSITION - 128)) | (1L << (PRECEDING - 128)) | (1L << (PRIMARY - 128)) | (1L << (PRINCIPALS - 128)) | (1L << (PROPERTIES - 128)) | (1L << (PURGE - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (QUARTER - 192)) | (1L << (QUERY - 192)) | (1L << (RANGE - 192)) | (1L << (RECORDREADER - 192)) | (1L << (RECORDWRITER - 192)) | (1L << (RECOVER - 192)) | (1L << (REDUCE - 192)) | (1L << (REFERENCES - 192)) | (1L << (REFRESH - 192)) | (1L << (RENAME - 192)) | (1L << (REPAIR - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (RESET - 192)) | (1L << (RESPECT - 192)) | (1L << (RESTRICT - 192)) | (1L << (REVOKE - 192)) | (1L << (RLIKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLES - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROW - 192)) | (1L << (ROWS - 192)) | (1L << (SECOND - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SELECT - 192)) | (1L << (SEPARATED - 192)) | (1L << (SERDE - 192)) | (1L << (SERDEPROPERTIES - 192)) | (1L << (SESSION_USER - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHOW - 192)) | (1L << (SKEWED - 192)) | (1L << (SOME - 192)) | (1L << (SORT - 192)) | (1L << (SORTED - 192)) | (1L << (START - 192)) | (1L << (STATISTICS - 192)) | (1L << (STORED - 192)) | (1L << (STRATIFY - 192)) | (1L << (STRUCT - 192)) | (1L << (SUBSTR - 192)) | (1L << (SUBSTRING - 192)) | (1L << (SYNC - 192)) | (1L << (SYSTEM_TIME - 192)) | (1L << (SYSTEM_VERSION - 192)) | (1L << (TABLE - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESAMPLE - 192)) | (1L << (TBLPROPERTIES - 192)) | (1L << (TEMPORARY - 192)) | (1L << (TERMINATED - 192)) | (1L << (THEN - 192)) | (1L << (TIME - 192)) | (1L << (TIMESTAMP - 192)) | (1L << (TIMESTAMPADD - 192)) | (1L << (TIMESTAMPDIFF - 192)) | (1L << (TO - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TOUCH - 256)) | (1L << (TRAILING - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSACTIONS - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIM - 256)) | (1L << (TRUE - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRY_CAST - 256)) | (1L << (TYPE - 256)) | (1L << (UNARCHIVE - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCACHE - 256)) | (1L << (UNIQUE - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLOCK - 256)) | (1L << (UNSET - 256)) | (1L << (UPDATE - 256)) | (1L << (USE - 256)) | (1L << (USER - 256)) | (1L << (VALUES - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (WEEK - 256)) | (1L << (WHEN - 256)) | (1L << (WHERE - 256)) | (1L << (WINDOW - 256)) | (1L << (WITH - 256)) | (1L << (WITHIN - 256)) | (1L << (YEAR - 256)) | (1L << (ZONE - 256)))) != 0))) {
                    _errHandler.recoverInline(this);
                } else {
                    if (_input.LA(1) == Token.EOF) matchedEOF = true;
                    _errHandler.reportMatch(this);
                    consume();
                }
            }
        } catch (RecognitionException re) {
            _localctx.exception = re;
            _errHandler.reportError(this, re);
            _errHandler.recover(this, re);
        } finally {
            exitRule();
        }
        return _localctx;
    }

    public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
        switch (ruleIndex) {
            case 43:
                return queryTerm_sempred((QueryTermContext) _localctx, predIndex);
            case 105:
                return booleanExpression_sempred((BooleanExpressionContext) _localctx, predIndex);
            case 107:
                return valueExpression_sempred((ValueExpressionContext) _localctx, predIndex);
            case 109:
                return primaryExpression_sempred((PrimaryExpressionContext) _localctx, predIndex);
            case 143:
                return identifier_sempred((IdentifierContext) _localctx, predIndex);
            case 144:
                return strictIdentifier_sempred((StrictIdentifierContext) _localctx, predIndex);
            case 146:
                return number_sempred((NumberContext) _localctx, predIndex);
        }
        return true;
    }

    private boolean queryTerm_sempred(QueryTermContext _localctx, int predIndex) {
        switch (predIndex) {
            case 0:
                return precpred(_ctx, 3);
            case 1:
                return legacy_setops_precedence_enabled;
            case 2:
                return precpred(_ctx, 2);
            case 3:
                return !legacy_setops_precedence_enabled;
            case 4:
                return precpred(_ctx, 1);
            case 5:
                return !legacy_setops_precedence_enabled;
        }
        return true;
    }

    private boolean booleanExpression_sempred(BooleanExpressionContext _localctx, int predIndex) {
        switch (predIndex) {
            case 6:
                return precpred(_ctx, 2);
            case 7:
                return precpred(_ctx, 1);
        }
        return true;
    }

    private boolean valueExpression_sempred(ValueExpressionContext _localctx, int predIndex) {
        switch (predIndex) {
            case 8:
                return precpred(_ctx, 6);
            case 9:
                return precpred(_ctx, 5);
            case 10:
                return precpred(_ctx, 4);
            case 11:
                return precpred(_ctx, 3);
            case 12:
                return precpred(_ctx, 2);
            case 13:
                return precpred(_ctx, 1);
        }
        return true;
    }

    private boolean primaryExpression_sempred(PrimaryExpressionContext _localctx, int predIndex) {
        switch (predIndex) {
            case 14:
                return precpred(_ctx, 9);
            case 15:
                return precpred(_ctx, 7);
        }
        return true;
    }

    private boolean identifier_sempred(IdentifierContext _localctx, int predIndex) {
        switch (predIndex) {
            case 16:
                return !SQL_standard_keyword_behavior;
        }
        return true;
    }

    private boolean strictIdentifier_sempred(StrictIdentifierContext _localctx, int predIndex) {
        switch (predIndex) {
            case 17:
                return SQL_standard_keyword_behavior;
            case 18:
                return !SQL_standard_keyword_behavior;
        }
        return true;
    }

    private boolean number_sempred(NumberContext _localctx, int predIndex) {
        switch (predIndex) {
            case 19:
                return !legacy_exponent_literal_as_decimal_enabled;
            case 20:
                return !legacy_exponent_literal_as_decimal_enabled;
            case 21:
                return legacy_exponent_literal_as_decimal_enabled;
        }
        return true;
    }

    public static class SingleStatementContext extends ParserRuleContext {
        public SingleStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public StatementContext statement() {
            return getRuleContext(StatementContext.class, 0);
        }

        public TerminalNode EOF() {
            return getToken(SqlBaseParser.EOF, 0);
        }

        public List<TerminalNode> SEMICOLON() {
            return getTokens(SqlBaseParser.SEMICOLON);
        }

        public TerminalNode SEMICOLON(int i) {
            return getToken(SqlBaseParser.SEMICOLON, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_singleStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterSingleStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSingleStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSingleStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class SingleExpressionContext extends ParserRuleContext {
        public SingleExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public NamedExpressionContext namedExpression() {
            return getRuleContext(NamedExpressionContext.class, 0);
        }

        public TerminalNode EOF() {
            return getToken(SqlBaseParser.EOF, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_singleExpression;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterSingleExpression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitSingleExpression(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSingleExpression(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class SingleTableIdentifierContext extends ParserRuleContext {
        public SingleTableIdentifierContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TableIdentifierContext tableIdentifier() {
            return getRuleContext(TableIdentifierContext.class, 0);
        }

        public TerminalNode EOF() {
            return getToken(SqlBaseParser.EOF, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_singleTableIdentifier;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterSingleTableIdentifier(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitSingleTableIdentifier(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSingleTableIdentifier(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class SingleMultipartIdentifierContext extends ParserRuleContext {
        public SingleMultipartIdentifierContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode EOF() {
            return getToken(SqlBaseParser.EOF, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_singleMultipartIdentifier;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterSingleMultipartIdentifier(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitSingleMultipartIdentifier(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSingleMultipartIdentifier(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class SingleFunctionIdentifierContext extends ParserRuleContext {
        public SingleFunctionIdentifierContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public FunctionIdentifierContext functionIdentifier() {
            return getRuleContext(FunctionIdentifierContext.class, 0);
        }

        public TerminalNode EOF() {
            return getToken(SqlBaseParser.EOF, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_singleFunctionIdentifier;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterSingleFunctionIdentifier(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitSingleFunctionIdentifier(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSingleFunctionIdentifier(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class SingleDataTypeContext extends ParserRuleContext {
        public SingleDataTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public DataTypeContext dataType() {
            return getRuleContext(DataTypeContext.class, 0);
        }

        public TerminalNode EOF() {
            return getToken(SqlBaseParser.EOF, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_singleDataType;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSingleDataType(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSingleDataType(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSingleDataType(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class SingleTableSchemaContext extends ParserRuleContext {
        public SingleTableSchemaContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public ColTypeListContext colTypeList() {
            return getRuleContext(ColTypeListContext.class, 0);
        }

        public TerminalNode EOF() {
            return getToken(SqlBaseParser.EOF, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_singleTableSchema;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterSingleTableSchema(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitSingleTableSchema(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSingleTableSchema(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class StatementContext extends ParserRuleContext {
        public StatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public StatementContext() {
        }

        @Override
        public int getRuleIndex() {
            return RULE_statement;
        }

        public void copyFrom(StatementContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class ExplainContext extends StatementContext {
        public ExplainContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode EXPLAIN() {
            return getToken(SqlBaseParser.EXPLAIN, 0);
        }

        public StatementContext statement() {
            return getRuleContext(StatementContext.class, 0);
        }

        public TerminalNode LOGICAL() {
            return getToken(SqlBaseParser.LOGICAL, 0);
        }

        public TerminalNode FORMATTED() {
            return getToken(SqlBaseParser.FORMATTED, 0);
        }

        public TerminalNode EXTENDED() {
            return getToken(SqlBaseParser.EXTENDED, 0);
        }

        public TerminalNode CODEGEN() {
            return getToken(SqlBaseParser.CODEGEN, 0);
        }

        public TerminalNode COST() {
            return getToken(SqlBaseParser.COST, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterExplain(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitExplain(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitExplain(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ResetConfigurationContext extends StatementContext {
        public ResetConfigurationContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode RESET() {
            return getToken(SqlBaseParser.RESET, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterResetConfiguration(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitResetConfiguration(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitResetConfiguration(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class AlterViewQueryContext extends StatementContext {
        public AlterViewQueryContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public TerminalNode VIEW() {
            return getToken(SqlBaseParser.VIEW, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public QueryContext query() {
            return getRuleContext(QueryContext.class, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterAlterViewQuery(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitAlterViewQuery(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitAlterViewQuery(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class UseContext extends StatementContext {
        public UseContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode USE() {
            return getToken(SqlBaseParser.USE, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterUse(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitUse(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitUse(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class DropNamespaceContext extends StatementContext {
        public DropNamespaceContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode DROP() {
            return getToken(SqlBaseParser.DROP, 0);
        }

        public NamespaceContext namespace() {
            return getRuleContext(NamespaceContext.class, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        public TerminalNode RESTRICT() {
            return getToken(SqlBaseParser.RESTRICT, 0);
        }

        public TerminalNode CASCADE() {
            return getToken(SqlBaseParser.CASCADE, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterDropNamespace(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitDropNamespace(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDropNamespace(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class CreateTempViewUsingContext extends StatementContext {
        public CreateTempViewUsingContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode CREATE() {
            return getToken(SqlBaseParser.CREATE, 0);
        }

        public TerminalNode TEMPORARY() {
            return getToken(SqlBaseParser.TEMPORARY, 0);
        }

        public TerminalNode VIEW() {
            return getToken(SqlBaseParser.VIEW, 0);
        }

        public TableIdentifierContext tableIdentifier() {
            return getRuleContext(TableIdentifierContext.class, 0);
        }

        public TableProviderContext tableProvider() {
            return getRuleContext(TableProviderContext.class, 0);
        }

        public TerminalNode OR() {
            return getToken(SqlBaseParser.OR, 0);
        }

        public TerminalNode REPLACE() {
            return getToken(SqlBaseParser.REPLACE, 0);
        }

        public TerminalNode GLOBAL() {
            return getToken(SqlBaseParser.GLOBAL, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public ColTypeListContext colTypeList() {
            return getRuleContext(ColTypeListContext.class, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public TerminalNode OPTIONS() {
            return getToken(SqlBaseParser.OPTIONS, 0);
        }

        public PropertyListContext propertyList() {
            return getRuleContext(PropertyListContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterCreateTempViewUsing(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitCreateTempViewUsing(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCreateTempViewUsing(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class RenameTableContext extends StatementContext {
        public MultipartIdentifierContext from;
        public MultipartIdentifierContext to;

        public RenameTableContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public TerminalNode RENAME() {
            return getToken(SqlBaseParser.RENAME, 0);
        }

        public TerminalNode TO() {
            return getToken(SqlBaseParser.TO, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public TerminalNode VIEW() {
            return getToken(SqlBaseParser.VIEW, 0);
        }

        public List<MultipartIdentifierContext> multipartIdentifier() {
            return getRuleContexts(MultipartIdentifierContext.class);
        }

        public MultipartIdentifierContext multipartIdentifier(int i) {
            return getRuleContext(MultipartIdentifierContext.class, i);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterRenameTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitRenameTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitRenameTable(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class FailNativeCommandContext extends StatementContext {
        public FailNativeCommandContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode SET() {
            return getToken(SqlBaseParser.SET, 0);
        }

        public TerminalNode ROLE() {
            return getToken(SqlBaseParser.ROLE, 0);
        }

        public UnsupportedHiveNativeCommandsContext unsupportedHiveNativeCommands() {
            return getRuleContext(UnsupportedHiveNativeCommandsContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterFailNativeCommand(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitFailNativeCommand(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitFailNativeCommand(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class SetCatalogContext extends StatementContext {
        public SetCatalogContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode SET() {
            return getToken(SqlBaseParser.SET, 0);
        }

        public TerminalNode CATALOG() {
            return getToken(SqlBaseParser.CATALOG, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode STRING() {
            return getToken(SqlBaseParser.STRING, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSetCatalog(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSetCatalog(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSetCatalog(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ClearCacheContext extends StatementContext {
        public ClearCacheContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode CLEAR() {
            return getToken(SqlBaseParser.CLEAR, 0);
        }

        public TerminalNode CACHE() {
            return getToken(SqlBaseParser.CACHE, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterClearCache(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitClearCache(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitClearCache(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class DropViewContext extends StatementContext {
        public DropViewContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode DROP() {
            return getToken(SqlBaseParser.DROP, 0);
        }

        public TerminalNode VIEW() {
            return getToken(SqlBaseParser.VIEW, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterDropView(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitDropView(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDropView(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ShowTablesContext extends StatementContext {
        public Token pattern;

        public ShowTablesContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode SHOW() {
            return getToken(SqlBaseParser.SHOW, 0);
        }

        public TerminalNode TABLES() {
            return getToken(SqlBaseParser.TABLES, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode FROM() {
            return getToken(SqlBaseParser.FROM, 0);
        }

        public TerminalNode IN() {
            return getToken(SqlBaseParser.IN, 0);
        }

        public TerminalNode STRING() {
            return getToken(SqlBaseParser.STRING, 0);
        }

        public TerminalNode LIKE() {
            return getToken(SqlBaseParser.LIKE, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterShowTables(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitShowTables(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitShowTables(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class RecoverPartitionsContext extends StatementContext {
        public RecoverPartitionsContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode RECOVER() {
            return getToken(SqlBaseParser.RECOVER, 0);
        }

        public TerminalNode PARTITIONS() {
            return getToken(SqlBaseParser.PARTITIONS, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterRecoverPartitions(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitRecoverPartitions(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitRecoverPartitions(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class DropIndexContext extends StatementContext {
        public DropIndexContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode DROP() {
            return getToken(SqlBaseParser.DROP, 0);
        }

        public TerminalNode INDEX() {
            return getToken(SqlBaseParser.INDEX, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode ON() {
            return getToken(SqlBaseParser.ON, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterDropIndex(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitDropIndex(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDropIndex(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ShowCatalogsContext extends StatementContext {
        public Token pattern;

        public ShowCatalogsContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode SHOW() {
            return getToken(SqlBaseParser.SHOW, 0);
        }

        public TerminalNode CATALOGS() {
            return getToken(SqlBaseParser.CATALOGS, 0);
        }

        public TerminalNode STRING() {
            return getToken(SqlBaseParser.STRING, 0);
        }

        public TerminalNode LIKE() {
            return getToken(SqlBaseParser.LIKE, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterShowCatalogs(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitShowCatalogs(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitShowCatalogs(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ShowCurrentNamespaceContext extends StatementContext {
        public ShowCurrentNamespaceContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode SHOW() {
            return getToken(SqlBaseParser.SHOW, 0);
        }

        public TerminalNode CURRENT() {
            return getToken(SqlBaseParser.CURRENT, 0);
        }

        public NamespaceContext namespace() {
            return getRuleContext(NamespaceContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterShowCurrentNamespace(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitShowCurrentNamespace(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitShowCurrentNamespace(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class RenameTablePartitionContext extends StatementContext {
        public PartitionSpecContext from;
        public PartitionSpecContext to;

        public RenameTablePartitionContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode RENAME() {
            return getToken(SqlBaseParser.RENAME, 0);
        }

        public TerminalNode TO() {
            return getToken(SqlBaseParser.TO, 0);
        }

        public List<PartitionSpecContext> partitionSpec() {
            return getRuleContexts(PartitionSpecContext.class);
        }

        public PartitionSpecContext partitionSpec(int i) {
            return getRuleContext(PartitionSpecContext.class, i);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterRenameTablePartition(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitRenameTablePartition(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitRenameTablePartition(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class RepairTableContext extends StatementContext {
        public Token option;

        public RepairTableContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode MSCK() {
            return getToken(SqlBaseParser.MSCK, 0);
        }

        public TerminalNode REPAIR() {
            return getToken(SqlBaseParser.REPAIR, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode PARTITIONS() {
            return getToken(SqlBaseParser.PARTITIONS, 0);
        }

        public TerminalNode ADD() {
            return getToken(SqlBaseParser.ADD, 0);
        }

        public TerminalNode DROP() {
            return getToken(SqlBaseParser.DROP, 0);
        }

        public TerminalNode SYNC() {
            return getToken(SqlBaseParser.SYNC, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterRepairTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitRepairTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitRepairTable(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class RefreshResourceContext extends StatementContext {
        public RefreshResourceContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode REFRESH() {
            return getToken(SqlBaseParser.REFRESH, 0);
        }

        public TerminalNode STRING() {
            return getToken(SqlBaseParser.STRING, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterRefreshResource(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitRefreshResource(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitRefreshResource(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ShowCreateTableContext extends StatementContext {
        public ShowCreateTableContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode SHOW() {
            return getToken(SqlBaseParser.SHOW, 0);
        }

        public TerminalNode CREATE() {
            return getToken(SqlBaseParser.CREATE, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public TerminalNode SERDE() {
            return getToken(SqlBaseParser.SERDE, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterShowCreateTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitShowCreateTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitShowCreateTable(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ShowNamespacesContext extends StatementContext {
        public Token pattern;

        public ShowNamespacesContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode SHOW() {
            return getToken(SqlBaseParser.SHOW, 0);
        }

        public NamespacesContext namespaces() {
            return getRuleContext(NamespacesContext.class, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode FROM() {
            return getToken(SqlBaseParser.FROM, 0);
        }

        public TerminalNode IN() {
            return getToken(SqlBaseParser.IN, 0);
        }

        public TerminalNode STRING() {
            return getToken(SqlBaseParser.STRING, 0);
        }

        public TerminalNode LIKE() {
            return getToken(SqlBaseParser.LIKE, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterShowNamespaces(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitShowNamespaces(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitShowNamespaces(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ShowColumnsContext extends StatementContext {
        public MultipartIdentifierContext table;
        public MultipartIdentifierContext ns;

        public ShowColumnsContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode SHOW() {
            return getToken(SqlBaseParser.SHOW, 0);
        }

        public TerminalNode COLUMNS() {
            return getToken(SqlBaseParser.COLUMNS, 0);
        }

        public List<TerminalNode> FROM() {
            return getTokens(SqlBaseParser.FROM);
        }

        public TerminalNode FROM(int i) {
            return getToken(SqlBaseParser.FROM, i);
        }

        public List<TerminalNode> IN() {
            return getTokens(SqlBaseParser.IN);
        }

        public TerminalNode IN(int i) {
            return getToken(SqlBaseParser.IN, i);
        }

        public List<MultipartIdentifierContext> multipartIdentifier() {
            return getRuleContexts(MultipartIdentifierContext.class);
        }

        public MultipartIdentifierContext multipartIdentifier(int i) {
            return getRuleContext(MultipartIdentifierContext.class, i);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterShowColumns(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitShowColumns(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitShowColumns(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ReplaceTableContext extends StatementContext {
        public ReplaceTableContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public ReplaceTableHeaderContext replaceTableHeader() {
            return getRuleContext(ReplaceTableHeaderContext.class, 0);
        }

        public CreateTableClausesContext createTableClauses() {
            return getRuleContext(CreateTableClausesContext.class, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public CreateOrReplaceTableColTypeListContext createOrReplaceTableColTypeList() {
            return getRuleContext(CreateOrReplaceTableColTypeListContext.class, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public TableProviderContext tableProvider() {
            return getRuleContext(TableProviderContext.class, 0);
        }

        public QueryContext query() {
            return getRuleContext(QueryContext.class, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterReplaceTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitReplaceTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitReplaceTable(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class AnalyzeTablesContext extends StatementContext {
        public AnalyzeTablesContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode ANALYZE() {
            return getToken(SqlBaseParser.ANALYZE, 0);
        }

        public TerminalNode TABLES() {
            return getToken(SqlBaseParser.TABLES, 0);
        }

        public TerminalNode COMPUTE() {
            return getToken(SqlBaseParser.COMPUTE, 0);
        }

        public TerminalNode STATISTICS() {
            return getToken(SqlBaseParser.STATISTICS, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode FROM() {
            return getToken(SqlBaseParser.FROM, 0);
        }

        public TerminalNode IN() {
            return getToken(SqlBaseParser.IN, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterAnalyzeTables(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitAnalyzeTables(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitAnalyzeTables(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class AddTablePartitionContext extends StatementContext {
        public AddTablePartitionContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode ADD() {
            return getToken(SqlBaseParser.ADD, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public TerminalNode VIEW() {
            return getToken(SqlBaseParser.VIEW, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        public List<PartitionSpecLocationContext> partitionSpecLocation() {
            return getRuleContexts(PartitionSpecLocationContext.class);
        }

        public PartitionSpecLocationContext partitionSpecLocation(int i) {
            return getRuleContext(PartitionSpecLocationContext.class, i);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterAddTablePartition(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitAddTablePartition(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitAddTablePartition(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class SetNamespaceLocationContext extends StatementContext {
        public SetNamespaceLocationContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public NamespaceContext namespace() {
            return getRuleContext(NamespaceContext.class, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode SET() {
            return getToken(SqlBaseParser.SET, 0);
        }

        public LocationSpecContext locationSpec() {
            return getRuleContext(LocationSpecContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterSetNamespaceLocation(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitSetNamespaceLocation(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSetNamespaceLocation(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class RefreshTableContext extends StatementContext {
        public RefreshTableContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode REFRESH() {
            return getToken(SqlBaseParser.REFRESH, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterRefreshTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitRefreshTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitRefreshTable(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class SetNamespacePropertiesContext extends StatementContext {
        public SetNamespacePropertiesContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public NamespaceContext namespace() {
            return getRuleContext(NamespaceContext.class, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode SET() {
            return getToken(SqlBaseParser.SET, 0);
        }

        public PropertyListContext propertyList() {
            return getRuleContext(PropertyListContext.class, 0);
        }

        public TerminalNode DBPROPERTIES() {
            return getToken(SqlBaseParser.DBPROPERTIES, 0);
        }

        public TerminalNode PROPERTIES() {
            return getToken(SqlBaseParser.PROPERTIES, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterSetNamespaceProperties(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitSetNamespaceProperties(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSetNamespaceProperties(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ManageResourceContext extends StatementContext {
        public Token op;

        public ManageResourceContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode ADD() {
            return getToken(SqlBaseParser.ADD, 0);
        }

        public TerminalNode LIST() {
            return getToken(SqlBaseParser.LIST, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterManageResource(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitManageResource(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitManageResource(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class SetQuotedConfigurationContext extends StatementContext {
        public SetQuotedConfigurationContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode SET() {
            return getToken(SqlBaseParser.SET, 0);
        }

        public ConfigKeyContext configKey() {
            return getRuleContext(ConfigKeyContext.class, 0);
        }

        public TerminalNode EQ() {
            return getToken(SqlBaseParser.EQ, 0);
        }

        public ConfigValueContext configValue() {
            return getRuleContext(ConfigValueContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterSetQuotedConfiguration(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitSetQuotedConfiguration(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSetQuotedConfiguration(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class AnalyzeContext extends StatementContext {
        public AnalyzeContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode ANALYZE() {
            return getToken(SqlBaseParser.ANALYZE, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode COMPUTE() {
            return getToken(SqlBaseParser.COMPUTE, 0);
        }

        public TerminalNode STATISTICS() {
            return getToken(SqlBaseParser.STATISTICS, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode FOR() {
            return getToken(SqlBaseParser.FOR, 0);
        }

        public TerminalNode COLUMNS() {
            return getToken(SqlBaseParser.COLUMNS, 0);
        }

        public IdentifierSeqContext identifierSeq() {
            return getRuleContext(IdentifierSeqContext.class, 0);
        }

        public TerminalNode ALL() {
            return getToken(SqlBaseParser.ALL, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterAnalyze(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitAnalyze(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitAnalyze(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class CreateFunctionContext extends StatementContext {
        public Token className;

        public CreateFunctionContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode CREATE() {
            return getToken(SqlBaseParser.CREATE, 0);
        }

        public TerminalNode FUNCTION() {
            return getToken(SqlBaseParser.FUNCTION, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public TerminalNode STRING() {
            return getToken(SqlBaseParser.STRING, 0);
        }

        public TerminalNode OR() {
            return getToken(SqlBaseParser.OR, 0);
        }

        public TerminalNode REPLACE() {
            return getToken(SqlBaseParser.REPLACE, 0);
        }

        public TerminalNode TEMPORARY() {
            return getToken(SqlBaseParser.TEMPORARY, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        public TerminalNode USING() {
            return getToken(SqlBaseParser.USING, 0);
        }

        public List<ResourceContext> resource() {
            return getRuleContexts(ResourceContext.class);
        }

        public ResourceContext resource(int i) {
            return getRuleContext(ResourceContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterCreateFunction(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitCreateFunction(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCreateFunction(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class HiveReplaceColumnsContext extends StatementContext {
        public MultipartIdentifierContext table;
        public QualifiedColTypeWithPositionListContext columns;

        public HiveReplaceColumnsContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public TerminalNode REPLACE() {
            return getToken(SqlBaseParser.REPLACE, 0);
        }

        public TerminalNode COLUMNS() {
            return getToken(SqlBaseParser.COLUMNS, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public QualifiedColTypeWithPositionListContext qualifiedColTypeWithPositionList() {
            return getRuleContext(QualifiedColTypeWithPositionListContext.class, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterHiveReplaceColumns(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitHiveReplaceColumns(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitHiveReplaceColumns(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class CommentNamespaceContext extends StatementContext {
        public Token comment;

        public CommentNamespaceContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode COMMENT() {
            return getToken(SqlBaseParser.COMMENT, 0);
        }

        public TerminalNode ON() {
            return getToken(SqlBaseParser.ON, 0);
        }

        public NamespaceContext namespace() {
            return getRuleContext(NamespaceContext.class, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode IS() {
            return getToken(SqlBaseParser.IS, 0);
        }

        public TerminalNode STRING() {
            return getToken(SqlBaseParser.STRING, 0);
        }

        public TerminalNode NULL() {
            return getToken(SqlBaseParser.NULL, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterCommentNamespace(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitCommentNamespace(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCommentNamespace(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ResetQuotedConfigurationContext extends StatementContext {
        public ResetQuotedConfigurationContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode RESET() {
            return getToken(SqlBaseParser.RESET, 0);
        }

        public ConfigKeyContext configKey() {
            return getRuleContext(ConfigKeyContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterResetQuotedConfiguration(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitResetQuotedConfiguration(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitResetQuotedConfiguration(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class CreateTableContext extends StatementContext {
        public CreateTableContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public CreateTableHeaderContext createTableHeader() {
            return getRuleContext(CreateTableHeaderContext.class, 0);
        }

        public CreateTableClausesContext createTableClauses() {
            return getRuleContext(CreateTableClausesContext.class, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public CreateOrReplaceTableColTypeListContext createOrReplaceTableColTypeList() {
            return getRuleContext(CreateOrReplaceTableColTypeListContext.class, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public TableProviderContext tableProvider() {
            return getRuleContext(TableProviderContext.class, 0);
        }

        public QueryContext query() {
            return getRuleContext(QueryContext.class, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterCreateTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitCreateTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCreateTable(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class DmlStatementContext extends StatementContext {
        public DmlStatementContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public DmlStatementNoWithContext dmlStatementNoWith() {
            return getRuleContext(DmlStatementNoWithContext.class, 0);
        }

        public CtesContext ctes() {
            return getRuleContext(CtesContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterDmlStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitDmlStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDmlStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class CreateTableLikeContext extends StatementContext {
        public TableIdentifierContext target;
        public TableIdentifierContext source;
        public PropertyListContext tableProps;

        public CreateTableLikeContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode CREATE() {
            return getToken(SqlBaseParser.CREATE, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public TerminalNode LIKE() {
            return getToken(SqlBaseParser.LIKE, 0);
        }

        public List<TableIdentifierContext> tableIdentifier() {
            return getRuleContexts(TableIdentifierContext.class);
        }

        public TableIdentifierContext tableIdentifier(int i) {
            return getRuleContext(TableIdentifierContext.class, i);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        public List<TableProviderContext> tableProvider() {
            return getRuleContexts(TableProviderContext.class);
        }

        public TableProviderContext tableProvider(int i) {
            return getRuleContext(TableProviderContext.class, i);
        }

        public List<RowFormatContext> rowFormat() {
            return getRuleContexts(RowFormatContext.class);
        }

        public RowFormatContext rowFormat(int i) {
            return getRuleContext(RowFormatContext.class, i);
        }

        public List<CreateFileFormatContext> createFileFormat() {
            return getRuleContexts(CreateFileFormatContext.class);
        }

        public CreateFileFormatContext createFileFormat(int i) {
            return getRuleContext(CreateFileFormatContext.class, i);
        }

        public List<LocationSpecContext> locationSpec() {
            return getRuleContexts(LocationSpecContext.class);
        }

        public LocationSpecContext locationSpec(int i) {
            return getRuleContext(LocationSpecContext.class, i);
        }

        public List<TerminalNode> TBLPROPERTIES() {
            return getTokens(SqlBaseParser.TBLPROPERTIES);
        }

        public TerminalNode TBLPROPERTIES(int i) {
            return getToken(SqlBaseParser.TBLPROPERTIES, i);
        }

        public List<PropertyListContext> propertyList() {
            return getRuleContexts(PropertyListContext.class);
        }

        public PropertyListContext propertyList(int i) {
            return getRuleContext(PropertyListContext.class, i);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterCreateTableLike(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitCreateTableLike(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCreateTableLike(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class UncacheTableContext extends StatementContext {
        public UncacheTableContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode UNCACHE() {
            return getToken(SqlBaseParser.UNCACHE, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterUncacheTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitUncacheTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitUncacheTable(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class DropFunctionContext extends StatementContext {
        public DropFunctionContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode DROP() {
            return getToken(SqlBaseParser.DROP, 0);
        }

        public TerminalNode FUNCTION() {
            return getToken(SqlBaseParser.FUNCTION, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode TEMPORARY() {
            return getToken(SqlBaseParser.TEMPORARY, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterDropFunction(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitDropFunction(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDropFunction(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class DescribeRelationContext extends StatementContext {
        public Token option;

        public DescribeRelationContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode DESC() {
            return getToken(SqlBaseParser.DESC, 0);
        }

        public TerminalNode DESCRIBE() {
            return getToken(SqlBaseParser.DESCRIBE, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public DescribeColNameContext describeColName() {
            return getRuleContext(DescribeColNameContext.class, 0);
        }

        public TerminalNode EXTENDED() {
            return getToken(SqlBaseParser.EXTENDED, 0);
        }

        public TerminalNode FORMATTED() {
            return getToken(SqlBaseParser.FORMATTED, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterDescribeRelation(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitDescribeRelation(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDescribeRelation(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class LoadDataContext extends StatementContext {
        public Token path;

        public LoadDataContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode LOAD() {
            return getToken(SqlBaseParser.LOAD, 0);
        }

        public TerminalNode DATA() {
            return getToken(SqlBaseParser.DATA, 0);
        }

        public TerminalNode INPATH() {
            return getToken(SqlBaseParser.INPATH, 0);
        }

        public TerminalNode INTO() {
            return getToken(SqlBaseParser.INTO, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode STRING() {
            return getToken(SqlBaseParser.STRING, 0);
        }

        public TerminalNode LOCAL() {
            return getToken(SqlBaseParser.LOCAL, 0);
        }

        public TerminalNode OVERWRITE() {
            return getToken(SqlBaseParser.OVERWRITE, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterLoadData(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitLoadData(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitLoadData(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ShowPartitionsContext extends StatementContext {
        public ShowPartitionsContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode SHOW() {
            return getToken(SqlBaseParser.SHOW, 0);
        }

        public TerminalNode PARTITIONS() {
            return getToken(SqlBaseParser.PARTITIONS, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterShowPartitions(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitShowPartitions(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitShowPartitions(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class DescribeFunctionContext extends StatementContext {
        public DescribeFunctionContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode FUNCTION() {
            return getToken(SqlBaseParser.FUNCTION, 0);
        }

        public DescribeFuncNameContext describeFuncName() {
            return getRuleContext(DescribeFuncNameContext.class, 0);
        }

        public TerminalNode DESC() {
            return getToken(SqlBaseParser.DESC, 0);
        }

        public TerminalNode DESCRIBE() {
            return getToken(SqlBaseParser.DESCRIBE, 0);
        }

        public TerminalNode EXTENDED() {
            return getToken(SqlBaseParser.EXTENDED, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterDescribeFunction(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitDescribeFunction(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDescribeFunction(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class RenameTableColumnContext extends StatementContext {
        public MultipartIdentifierContext table;
        public MultipartIdentifierContext from;
        public ErrorCapturingIdentifierContext to;

        public RenameTableColumnContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public TerminalNode RENAME() {
            return getToken(SqlBaseParser.RENAME, 0);
        }

        public TerminalNode COLUMN() {
            return getToken(SqlBaseParser.COLUMN, 0);
        }

        public TerminalNode TO() {
            return getToken(SqlBaseParser.TO, 0);
        }

        public List<MultipartIdentifierContext> multipartIdentifier() {
            return getRuleContexts(MultipartIdentifierContext.class);
        }

        public MultipartIdentifierContext multipartIdentifier(int i) {
            return getRuleContext(MultipartIdentifierContext.class, i);
        }

        public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
            return getRuleContext(ErrorCapturingIdentifierContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterRenameTableColumn(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitRenameTableColumn(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitRenameTableColumn(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class StatementDefaultContext extends StatementContext {
        public StatementDefaultContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public QueryContext query() {
            return getRuleContext(QueryContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterStatementDefault(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitStatementDefault(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitStatementDefault(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class HiveChangeColumnContext extends StatementContext {
        public MultipartIdentifierContext table;
        public MultipartIdentifierContext colName;

        public HiveChangeColumnContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public TerminalNode CHANGE() {
            return getToken(SqlBaseParser.CHANGE, 0);
        }

        public ColTypeContext colType() {
            return getRuleContext(ColTypeContext.class, 0);
        }

        public List<MultipartIdentifierContext> multipartIdentifier() {
            return getRuleContexts(MultipartIdentifierContext.class);
        }

        public MultipartIdentifierContext multipartIdentifier(int i) {
            return getRuleContext(MultipartIdentifierContext.class, i);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public TerminalNode COLUMN() {
            return getToken(SqlBaseParser.COLUMN, 0);
        }

        public ColPositionContext colPosition() {
            return getRuleContext(ColPositionContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterHiveChangeColumn(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitHiveChangeColumn(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitHiveChangeColumn(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class SetTimeZoneContext extends StatementContext {
        public Token timezone;

        public SetTimeZoneContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode SET() {
            return getToken(SqlBaseParser.SET, 0);
        }

        public TerminalNode TIME() {
            return getToken(SqlBaseParser.TIME, 0);
        }

        public TerminalNode ZONE() {
            return getToken(SqlBaseParser.ZONE, 0);
        }

        public IntervalContext interval() {
            return getRuleContext(IntervalContext.class, 0);
        }

        public TerminalNode STRING() {
            return getToken(SqlBaseParser.STRING, 0);
        }

        public TerminalNode LOCAL() {
            return getToken(SqlBaseParser.LOCAL, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSetTimeZone(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSetTimeZone(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSetTimeZone(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class DescribeQueryContext extends StatementContext {
        public DescribeQueryContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public QueryContext query() {
            return getRuleContext(QueryContext.class, 0);
        }

        public TerminalNode DESC() {
            return getToken(SqlBaseParser.DESC, 0);
        }

        public TerminalNode DESCRIBE() {
            return getToken(SqlBaseParser.DESCRIBE, 0);
        }

        public TerminalNode QUERY() {
            return getToken(SqlBaseParser.QUERY, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterDescribeQuery(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitDescribeQuery(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDescribeQuery(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class TruncateTableContext extends StatementContext {
        public TruncateTableContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode TRUNCATE() {
            return getToken(SqlBaseParser.TRUNCATE, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterTruncateTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitTruncateTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitTruncateTable(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class SetTableSerDeContext extends StatementContext {
        public SetTableSerDeContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode SET() {
            return getToken(SqlBaseParser.SET, 0);
        }

        public TerminalNode SERDE() {
            return getToken(SqlBaseParser.SERDE, 0);
        }

        public TerminalNode STRING() {
            return getToken(SqlBaseParser.STRING, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public TerminalNode WITH() {
            return getToken(SqlBaseParser.WITH, 0);
        }

        public TerminalNode SERDEPROPERTIES() {
            return getToken(SqlBaseParser.SERDEPROPERTIES, 0);
        }

        public PropertyListContext propertyList() {
            return getRuleContext(PropertyListContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSetTableSerDe(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSetTableSerDe(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSetTableSerDe(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class CreateViewContext extends StatementContext {
        public CreateViewContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode CREATE() {
            return getToken(SqlBaseParser.CREATE, 0);
        }

        public TerminalNode VIEW() {
            return getToken(SqlBaseParser.VIEW, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public QueryContext query() {
            return getRuleContext(QueryContext.class, 0);
        }

        public TerminalNode OR() {
            return getToken(SqlBaseParser.OR, 0);
        }

        public TerminalNode REPLACE() {
            return getToken(SqlBaseParser.REPLACE, 0);
        }

        public TerminalNode TEMPORARY() {
            return getToken(SqlBaseParser.TEMPORARY, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        public IdentifierCommentListContext identifierCommentList() {
            return getRuleContext(IdentifierCommentListContext.class, 0);
        }

        public List<CommentSpecContext> commentSpec() {
            return getRuleContexts(CommentSpecContext.class);
        }

        public CommentSpecContext commentSpec(int i) {
            return getRuleContext(CommentSpecContext.class, i);
        }

        public List<TerminalNode> PARTITIONED() {
            return getTokens(SqlBaseParser.PARTITIONED);
        }

        public TerminalNode PARTITIONED(int i) {
            return getToken(SqlBaseParser.PARTITIONED, i);
        }

        public List<TerminalNode> ON() {
            return getTokens(SqlBaseParser.ON);
        }

        public TerminalNode ON(int i) {
            return getToken(SqlBaseParser.ON, i);
        }

        public List<IdentifierListContext> identifierList() {
            return getRuleContexts(IdentifierListContext.class);
        }

        public IdentifierListContext identifierList(int i) {
            return getRuleContext(IdentifierListContext.class, i);
        }

        public List<TerminalNode> TBLPROPERTIES() {
            return getTokens(SqlBaseParser.TBLPROPERTIES);
        }

        public TerminalNode TBLPROPERTIES(int i) {
            return getToken(SqlBaseParser.TBLPROPERTIES, i);
        }

        public List<PropertyListContext> propertyList() {
            return getRuleContexts(PropertyListContext.class);
        }

        public PropertyListContext propertyList(int i) {
            return getRuleContext(PropertyListContext.class, i);
        }

        public TerminalNode GLOBAL() {
            return getToken(SqlBaseParser.GLOBAL, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterCreateView(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitCreateView(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCreateView(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class DropTablePartitionsContext extends StatementContext {
        public DropTablePartitionsContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode DROP() {
            return getToken(SqlBaseParser.DROP, 0);
        }

        public List<PartitionSpecContext> partitionSpec() {
            return getRuleContexts(PartitionSpecContext.class);
        }

        public PartitionSpecContext partitionSpec(int i) {
            return getRuleContext(PartitionSpecContext.class, i);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public TerminalNode VIEW() {
            return getToken(SqlBaseParser.VIEW, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public TerminalNode PURGE() {
            return getToken(SqlBaseParser.PURGE, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterDropTablePartitions(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitDropTablePartitions(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDropTablePartitions(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class SetConfigurationContext extends StatementContext {
        public SetConfigurationContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode SET() {
            return getToken(SqlBaseParser.SET, 0);
        }

        public ConfigKeyContext configKey() {
            return getRuleContext(ConfigKeyContext.class, 0);
        }

        public TerminalNode EQ() {
            return getToken(SqlBaseParser.EQ, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterSetConfiguration(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitSetConfiguration(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSetConfiguration(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class DropTableContext extends StatementContext {
        public DropTableContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode DROP() {
            return getToken(SqlBaseParser.DROP, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        public TerminalNode PURGE() {
            return getToken(SqlBaseParser.PURGE, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterDropTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitDropTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDropTable(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ShowTableExtendedContext extends StatementContext {
        public MultipartIdentifierContext ns;
        public Token pattern;

        public ShowTableExtendedContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode SHOW() {
            return getToken(SqlBaseParser.SHOW, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public TerminalNode EXTENDED() {
            return getToken(SqlBaseParser.EXTENDED, 0);
        }

        public TerminalNode LIKE() {
            return getToken(SqlBaseParser.LIKE, 0);
        }

        public TerminalNode STRING() {
            return getToken(SqlBaseParser.STRING, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public TerminalNode FROM() {
            return getToken(SqlBaseParser.FROM, 0);
        }

        public TerminalNode IN() {
            return getToken(SqlBaseParser.IN, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterShowTableExtended(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitShowTableExtended(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitShowTableExtended(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class DescribeNamespaceContext extends StatementContext {
        public DescribeNamespaceContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public NamespaceContext namespace() {
            return getRuleContext(NamespaceContext.class, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode DESC() {
            return getToken(SqlBaseParser.DESC, 0);
        }

        public TerminalNode DESCRIBE() {
            return getToken(SqlBaseParser.DESCRIBE, 0);
        }

        public TerminalNode EXTENDED() {
            return getToken(SqlBaseParser.EXTENDED, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterDescribeNamespace(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitDescribeNamespace(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDescribeNamespace(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class AlterTableAlterColumnContext extends StatementContext {
        public MultipartIdentifierContext table;
        public MultipartIdentifierContext column;

        public AlterTableAlterColumnContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public List<TerminalNode> ALTER() {
            return getTokens(SqlBaseParser.ALTER);
        }

        public TerminalNode ALTER(int i) {
            return getToken(SqlBaseParser.ALTER, i);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public List<MultipartIdentifierContext> multipartIdentifier() {
            return getRuleContexts(MultipartIdentifierContext.class);
        }

        public MultipartIdentifierContext multipartIdentifier(int i) {
            return getRuleContext(MultipartIdentifierContext.class, i);
        }

        public TerminalNode CHANGE() {
            return getToken(SqlBaseParser.CHANGE, 0);
        }

        public TerminalNode COLUMN() {
            return getToken(SqlBaseParser.COLUMN, 0);
        }

        public AlterColumnActionContext alterColumnAction() {
            return getRuleContext(AlterColumnActionContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterAlterTableAlterColumn(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitAlterTableAlterColumn(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitAlterTableAlterColumn(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class RefreshFunctionContext extends StatementContext {
        public RefreshFunctionContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode REFRESH() {
            return getToken(SqlBaseParser.REFRESH, 0);
        }

        public TerminalNode FUNCTION() {
            return getToken(SqlBaseParser.FUNCTION, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterRefreshFunction(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitRefreshFunction(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitRefreshFunction(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class CommentTableContext extends StatementContext {
        public Token comment;

        public CommentTableContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode COMMENT() {
            return getToken(SqlBaseParser.COMMENT, 0);
        }

        public TerminalNode ON() {
            return getToken(SqlBaseParser.ON, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode IS() {
            return getToken(SqlBaseParser.IS, 0);
        }

        public TerminalNode STRING() {
            return getToken(SqlBaseParser.STRING, 0);
        }

        public TerminalNode NULL() {
            return getToken(SqlBaseParser.NULL, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterCommentTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitCommentTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCommentTable(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class CreateIndexContext extends StatementContext {
        public IdentifierContext indexType;
        public MultipartIdentifierPropertyListContext columns;
        public PropertyListContext options;

        public CreateIndexContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode CREATE() {
            return getToken(SqlBaseParser.CREATE, 0);
        }

        public TerminalNode INDEX() {
            return getToken(SqlBaseParser.INDEX, 0);
        }

        public List<IdentifierContext> identifier() {
            return getRuleContexts(IdentifierContext.class);
        }

        public IdentifierContext identifier(int i) {
            return getRuleContext(IdentifierContext.class, i);
        }

        public TerminalNode ON() {
            return getToken(SqlBaseParser.ON, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public MultipartIdentifierPropertyListContext multipartIdentifierPropertyList() {
            return getRuleContext(MultipartIdentifierPropertyListContext.class, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public TerminalNode USING() {
            return getToken(SqlBaseParser.USING, 0);
        }

        public TerminalNode OPTIONS() {
            return getToken(SqlBaseParser.OPTIONS, 0);
        }

        public PropertyListContext propertyList() {
            return getRuleContext(PropertyListContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterCreateIndex(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitCreateIndex(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCreateIndex(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class UseNamespaceContext extends StatementContext {
        public UseNamespaceContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode USE() {
            return getToken(SqlBaseParser.USE, 0);
        }

        public NamespaceContext namespace() {
            return getRuleContext(NamespaceContext.class, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterUseNamespace(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitUseNamespace(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitUseNamespace(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class CreateNamespaceContext extends StatementContext {
        public CreateNamespaceContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode CREATE() {
            return getToken(SqlBaseParser.CREATE, 0);
        }

        public NamespaceContext namespace() {
            return getRuleContext(NamespaceContext.class, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        public List<CommentSpecContext> commentSpec() {
            return getRuleContexts(CommentSpecContext.class);
        }

        public CommentSpecContext commentSpec(int i) {
            return getRuleContext(CommentSpecContext.class, i);
        }

        public List<LocationSpecContext> locationSpec() {
            return getRuleContexts(LocationSpecContext.class);
        }

        public LocationSpecContext locationSpec(int i) {
            return getRuleContext(LocationSpecContext.class, i);
        }

        public List<TerminalNode> WITH() {
            return getTokens(SqlBaseParser.WITH);
        }

        public TerminalNode WITH(int i) {
            return getToken(SqlBaseParser.WITH, i);
        }

        public List<PropertyListContext> propertyList() {
            return getRuleContexts(PropertyListContext.class);
        }

        public PropertyListContext propertyList(int i) {
            return getRuleContext(PropertyListContext.class, i);
        }

        public List<TerminalNode> DBPROPERTIES() {
            return getTokens(SqlBaseParser.DBPROPERTIES);
        }

        public TerminalNode DBPROPERTIES(int i) {
            return getToken(SqlBaseParser.DBPROPERTIES, i);
        }

        public List<TerminalNode> PROPERTIES() {
            return getTokens(SqlBaseParser.PROPERTIES);
        }

        public TerminalNode PROPERTIES(int i) {
            return getToken(SqlBaseParser.PROPERTIES, i);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterCreateNamespace(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitCreateNamespace(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCreateNamespace(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ShowTblPropertiesContext extends StatementContext {
        public MultipartIdentifierContext table;
        public PropertyKeyContext key;

        public ShowTblPropertiesContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode SHOW() {
            return getToken(SqlBaseParser.SHOW, 0);
        }

        public TerminalNode TBLPROPERTIES() {
            return getToken(SqlBaseParser.TBLPROPERTIES, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public PropertyKeyContext propertyKey() {
            return getRuleContext(PropertyKeyContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterShowTblProperties(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitShowTblProperties(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitShowTblProperties(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class UnsetTablePropertiesContext extends StatementContext {
        public UnsetTablePropertiesContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode UNSET() {
            return getToken(SqlBaseParser.UNSET, 0);
        }

        public TerminalNode TBLPROPERTIES() {
            return getToken(SqlBaseParser.TBLPROPERTIES, 0);
        }

        public PropertyListContext propertyList() {
            return getRuleContext(PropertyListContext.class, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public TerminalNode VIEW() {
            return getToken(SqlBaseParser.VIEW, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterUnsetTableProperties(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitUnsetTableProperties(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitUnsetTableProperties(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class SetTableLocationContext extends StatementContext {
        public SetTableLocationContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode SET() {
            return getToken(SqlBaseParser.SET, 0);
        }

        public LocationSpecContext locationSpec() {
            return getRuleContext(LocationSpecContext.class, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterSetTableLocation(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitSetTableLocation(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSetTableLocation(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class DropTableColumnsContext extends StatementContext {
        public MultipartIdentifierListContext columns;

        public DropTableColumnsContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode DROP() {
            return getToken(SqlBaseParser.DROP, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public TerminalNode COLUMN() {
            return getToken(SqlBaseParser.COLUMN, 0);
        }

        public TerminalNode COLUMNS() {
            return getToken(SqlBaseParser.COLUMNS, 0);
        }

        public MultipartIdentifierListContext multipartIdentifierList() {
            return getRuleContext(MultipartIdentifierListContext.class, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterDropTableColumns(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitDropTableColumns(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDropTableColumns(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ShowViewsContext extends StatementContext {
        public Token pattern;

        public ShowViewsContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode SHOW() {
            return getToken(SqlBaseParser.SHOW, 0);
        }

        public TerminalNode VIEWS() {
            return getToken(SqlBaseParser.VIEWS, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode FROM() {
            return getToken(SqlBaseParser.FROM, 0);
        }

        public TerminalNode IN() {
            return getToken(SqlBaseParser.IN, 0);
        }

        public TerminalNode STRING() {
            return getToken(SqlBaseParser.STRING, 0);
        }

        public TerminalNode LIKE() {
            return getToken(SqlBaseParser.LIKE, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterShowViews(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitShowViews(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitShowViews(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ShowFunctionsContext extends StatementContext {
        public MultipartIdentifierContext ns;
        public MultipartIdentifierContext legacy;
        public Token pattern;

        public ShowFunctionsContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode SHOW() {
            return getToken(SqlBaseParser.SHOW, 0);
        }

        public TerminalNode FUNCTIONS() {
            return getToken(SqlBaseParser.FUNCTIONS, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode FROM() {
            return getToken(SqlBaseParser.FROM, 0);
        }

        public TerminalNode IN() {
            return getToken(SqlBaseParser.IN, 0);
        }

        public List<MultipartIdentifierContext> multipartIdentifier() {
            return getRuleContexts(MultipartIdentifierContext.class);
        }

        public MultipartIdentifierContext multipartIdentifier(int i) {
            return getRuleContext(MultipartIdentifierContext.class, i);
        }

        public TerminalNode LIKE() {
            return getToken(SqlBaseParser.LIKE, 0);
        }

        public TerminalNode STRING() {
            return getToken(SqlBaseParser.STRING, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterShowFunctions(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitShowFunctions(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitShowFunctions(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class CacheTableContext extends StatementContext {
        public PropertyListContext options;

        public CacheTableContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode CACHE() {
            return getToken(SqlBaseParser.CACHE, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode LAZY() {
            return getToken(SqlBaseParser.LAZY, 0);
        }

        public TerminalNode OPTIONS() {
            return getToken(SqlBaseParser.OPTIONS, 0);
        }

        public QueryContext query() {
            return getRuleContext(QueryContext.class, 0);
        }

        public PropertyListContext propertyList() {
            return getRuleContext(PropertyListContext.class, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterCacheTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitCacheTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCacheTable(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class AddTableColumnsContext extends StatementContext {
        public QualifiedColTypeWithPositionListContext columns;

        public AddTableColumnsContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode ADD() {
            return getToken(SqlBaseParser.ADD, 0);
        }

        public TerminalNode COLUMN() {
            return getToken(SqlBaseParser.COLUMN, 0);
        }

        public TerminalNode COLUMNS() {
            return getToken(SqlBaseParser.COLUMNS, 0);
        }

        public QualifiedColTypeWithPositionListContext qualifiedColTypeWithPositionList() {
            return getRuleContext(QualifiedColTypeWithPositionListContext.class, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterAddTableColumns(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitAddTableColumns(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitAddTableColumns(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class SetTablePropertiesContext extends StatementContext {
        public SetTablePropertiesContext(StatementContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode SET() {
            return getToken(SqlBaseParser.SET, 0);
        }

        public TerminalNode TBLPROPERTIES() {
            return getToken(SqlBaseParser.TBLPROPERTIES, 0);
        }

        public PropertyListContext propertyList() {
            return getRuleContext(PropertyListContext.class, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public TerminalNode VIEW() {
            return getToken(SqlBaseParser.VIEW, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterSetTableProperties(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitSetTableProperties(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSetTableProperties(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ConfigKeyContext extends ParserRuleContext {
        public ConfigKeyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public QuotedIdentifierContext quotedIdentifier() {
            return getRuleContext(QuotedIdentifierContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_configKey;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterConfigKey(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitConfigKey(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitConfigKey(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ConfigValueContext extends ParserRuleContext {
        public ConfigValueContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public QuotedIdentifierContext quotedIdentifier() {
            return getRuleContext(QuotedIdentifierContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_configValue;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterConfigValue(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitConfigValue(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitConfigValue(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class UnsupportedHiveNativeCommandsContext extends ParserRuleContext {
        public Token kw1;
        public Token kw2;
        public Token kw3;
        public Token kw4;
        public Token kw5;
        public Token kw6;

        public UnsupportedHiveNativeCommandsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode CREATE() {
            return getToken(SqlBaseParser.CREATE, 0);
        }

        public TerminalNode ROLE() {
            return getToken(SqlBaseParser.ROLE, 0);
        }

        public TerminalNode DROP() {
            return getToken(SqlBaseParser.DROP, 0);
        }

        public TerminalNode GRANT() {
            return getToken(SqlBaseParser.GRANT, 0);
        }

        public TerminalNode REVOKE() {
            return getToken(SqlBaseParser.REVOKE, 0);
        }

        public TerminalNode SHOW() {
            return getToken(SqlBaseParser.SHOW, 0);
        }

        public TerminalNode PRINCIPALS() {
            return getToken(SqlBaseParser.PRINCIPALS, 0);
        }

        public TerminalNode ROLES() {
            return getToken(SqlBaseParser.ROLES, 0);
        }

        public TerminalNode CURRENT() {
            return getToken(SqlBaseParser.CURRENT, 0);
        }

        public TerminalNode EXPORT() {
            return getToken(SqlBaseParser.EXPORT, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public TerminalNode IMPORT() {
            return getToken(SqlBaseParser.IMPORT, 0);
        }

        public TerminalNode COMPACTIONS() {
            return getToken(SqlBaseParser.COMPACTIONS, 0);
        }

        public TerminalNode TRANSACTIONS() {
            return getToken(SqlBaseParser.TRANSACTIONS, 0);
        }

        public TerminalNode INDEXES() {
            return getToken(SqlBaseParser.INDEXES, 0);
        }

        public TerminalNode LOCKS() {
            return getToken(SqlBaseParser.LOCKS, 0);
        }

        public TerminalNode INDEX() {
            return getToken(SqlBaseParser.INDEX, 0);
        }

        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public TerminalNode LOCK() {
            return getToken(SqlBaseParser.LOCK, 0);
        }

        public TerminalNode DATABASE() {
            return getToken(SqlBaseParser.DATABASE, 0);
        }

        public TerminalNode UNLOCK() {
            return getToken(SqlBaseParser.UNLOCK, 0);
        }

        public TerminalNode TEMPORARY() {
            return getToken(SqlBaseParser.TEMPORARY, 0);
        }

        public TerminalNode MACRO() {
            return getToken(SqlBaseParser.MACRO, 0);
        }

        public TableIdentifierContext tableIdentifier() {
            return getRuleContext(TableIdentifierContext.class, 0);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode CLUSTERED() {
            return getToken(SqlBaseParser.CLUSTERED, 0);
        }

        public TerminalNode BY() {
            return getToken(SqlBaseParser.BY, 0);
        }

        public TerminalNode SORTED() {
            return getToken(SqlBaseParser.SORTED, 0);
        }

        public TerminalNode SKEWED() {
            return getToken(SqlBaseParser.SKEWED, 0);
        }

        public TerminalNode STORED() {
            return getToken(SqlBaseParser.STORED, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public TerminalNode DIRECTORIES() {
            return getToken(SqlBaseParser.DIRECTORIES, 0);
        }

        public TerminalNode SET() {
            return getToken(SqlBaseParser.SET, 0);
        }

        public TerminalNode LOCATION() {
            return getToken(SqlBaseParser.LOCATION, 0);
        }

        public TerminalNode EXCHANGE() {
            return getToken(SqlBaseParser.EXCHANGE, 0);
        }

        public TerminalNode PARTITION() {
            return getToken(SqlBaseParser.PARTITION, 0);
        }

        public TerminalNode ARCHIVE() {
            return getToken(SqlBaseParser.ARCHIVE, 0);
        }

        public TerminalNode UNARCHIVE() {
            return getToken(SqlBaseParser.UNARCHIVE, 0);
        }

        public TerminalNode TOUCH() {
            return getToken(SqlBaseParser.TOUCH, 0);
        }

        public TerminalNode COMPACT() {
            return getToken(SqlBaseParser.COMPACT, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public TerminalNode CONCATENATE() {
            return getToken(SqlBaseParser.CONCATENATE, 0);
        }

        public TerminalNode FILEFORMAT() {
            return getToken(SqlBaseParser.FILEFORMAT, 0);
        }

        public TerminalNode REPLACE() {
            return getToken(SqlBaseParser.REPLACE, 0);
        }

        public TerminalNode COLUMNS() {
            return getToken(SqlBaseParser.COLUMNS, 0);
        }

        public TerminalNode START() {
            return getToken(SqlBaseParser.START, 0);
        }

        public TerminalNode TRANSACTION() {
            return getToken(SqlBaseParser.TRANSACTION, 0);
        }

        public TerminalNode COMMIT() {
            return getToken(SqlBaseParser.COMMIT, 0);
        }

        public TerminalNode ROLLBACK() {
            return getToken(SqlBaseParser.ROLLBACK, 0);
        }

        public TerminalNode DFS() {
            return getToken(SqlBaseParser.DFS, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_unsupportedHiveNativeCommands;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterUnsupportedHiveNativeCommands(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitUnsupportedHiveNativeCommands(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitUnsupportedHiveNativeCommands(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class CreateTableHeaderContext extends ParserRuleContext {
        public CreateTableHeaderContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode CREATE() {
            return getToken(SqlBaseParser.CREATE, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode TEMPORARY() {
            return getToken(SqlBaseParser.TEMPORARY, 0);
        }

        public TerminalNode EXTERNAL() {
            return getToken(SqlBaseParser.EXTERNAL, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_createTableHeader;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterCreateTableHeader(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitCreateTableHeader(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCreateTableHeader(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ReplaceTableHeaderContext extends ParserRuleContext {
        public ReplaceTableHeaderContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode REPLACE() {
            return getToken(SqlBaseParser.REPLACE, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode CREATE() {
            return getToken(SqlBaseParser.CREATE, 0);
        }

        public TerminalNode OR() {
            return getToken(SqlBaseParser.OR, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_replaceTableHeader;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterReplaceTableHeader(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitReplaceTableHeader(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitReplaceTableHeader(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class BucketSpecContext extends ParserRuleContext {
        public BucketSpecContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode CLUSTERED() {
            return getToken(SqlBaseParser.CLUSTERED, 0);
        }

        public List<TerminalNode> BY() {
            return getTokens(SqlBaseParser.BY);
        }

        public TerminalNode BY(int i) {
            return getToken(SqlBaseParser.BY, i);
        }

        public IdentifierListContext identifierList() {
            return getRuleContext(IdentifierListContext.class, 0);
        }

        public TerminalNode INTO() {
            return getToken(SqlBaseParser.INTO, 0);
        }

        public TerminalNode INTEGER_VALUE() {
            return getToken(SqlBaseParser.INTEGER_VALUE, 0);
        }

        public TerminalNode BUCKETS() {
            return getToken(SqlBaseParser.BUCKETS, 0);
        }

        public TerminalNode SORTED() {
            return getToken(SqlBaseParser.SORTED, 0);
        }

        public OrderedIdentifierListContext orderedIdentifierList() {
            return getRuleContext(OrderedIdentifierListContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_bucketSpec;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterBucketSpec(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitBucketSpec(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitBucketSpec(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class SkewSpecContext extends ParserRuleContext {
        public SkewSpecContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode SKEWED() {
            return getToken(SqlBaseParser.SKEWED, 0);
        }

        public TerminalNode BY() {
            return getToken(SqlBaseParser.BY, 0);
        }

        public IdentifierListContext identifierList() {
            return getRuleContext(IdentifierListContext.class, 0);
        }

        public TerminalNode ON() {
            return getToken(SqlBaseParser.ON, 0);
        }

        public ConstantListContext constantList() {
            return getRuleContext(ConstantListContext.class, 0);
        }

        public NestedConstantListContext nestedConstantList() {
            return getRuleContext(NestedConstantListContext.class, 0);
        }

        public TerminalNode STORED() {
            return getToken(SqlBaseParser.STORED, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public TerminalNode DIRECTORIES() {
            return getToken(SqlBaseParser.DIRECTORIES, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_skewSpec;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSkewSpec(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSkewSpec(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSkewSpec(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class LocationSpecContext extends ParserRuleContext {
        public LocationSpecContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode LOCATION() {
            return getToken(SqlBaseParser.LOCATION, 0);
        }

        public TerminalNode STRING() {
            return getToken(SqlBaseParser.STRING, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_locationSpec;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterLocationSpec(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitLocationSpec(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitLocationSpec(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class CommentSpecContext extends ParserRuleContext {
        public CommentSpecContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode COMMENT() {
            return getToken(SqlBaseParser.COMMENT, 0);
        }

        public TerminalNode STRING() {
            return getToken(SqlBaseParser.STRING, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_commentSpec;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterCommentSpec(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitCommentSpec(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCommentSpec(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class QueryContext extends ParserRuleContext {
        public QueryContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public QueryTermContext queryTerm() {
            return getRuleContext(QueryTermContext.class, 0);
        }

        public QueryOrganizationContext queryOrganization() {
            return getRuleContext(QueryOrganizationContext.class, 0);
        }

        public CtesContext ctes() {
            return getRuleContext(CtesContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_query;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterQuery(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitQuery(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitQuery(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class InsertIntoContext extends ParserRuleContext {
        public InsertIntoContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public InsertIntoContext() {
        }

        @Override
        public int getRuleIndex() {
            return RULE_insertInto;
        }

        public void copyFrom(InsertIntoContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class InsertOverwriteHiveDirContext extends InsertIntoContext {
        public Token path;

        public InsertOverwriteHiveDirContext(InsertIntoContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode INSERT() {
            return getToken(SqlBaseParser.INSERT, 0);
        }

        public TerminalNode OVERWRITE() {
            return getToken(SqlBaseParser.OVERWRITE, 0);
        }

        public TerminalNode DIRECTORY() {
            return getToken(SqlBaseParser.DIRECTORY, 0);
        }

        public TerminalNode STRING() {
            return getToken(SqlBaseParser.STRING, 0);
        }

        public TerminalNode LOCAL() {
            return getToken(SqlBaseParser.LOCAL, 0);
        }

        public RowFormatContext rowFormat() {
            return getRuleContext(RowFormatContext.class, 0);
        }

        public CreateFileFormatContext createFileFormat() {
            return getRuleContext(CreateFileFormatContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterInsertOverwriteHiveDir(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitInsertOverwriteHiveDir(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitInsertOverwriteHiveDir(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class InsertOverwriteDirContext extends InsertIntoContext {
        public Token path;
        public PropertyListContext options;

        public InsertOverwriteDirContext(InsertIntoContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode INSERT() {
            return getToken(SqlBaseParser.INSERT, 0);
        }

        public TerminalNode OVERWRITE() {
            return getToken(SqlBaseParser.OVERWRITE, 0);
        }

        public TerminalNode DIRECTORY() {
            return getToken(SqlBaseParser.DIRECTORY, 0);
        }

        public TableProviderContext tableProvider() {
            return getRuleContext(TableProviderContext.class, 0);
        }

        public TerminalNode LOCAL() {
            return getToken(SqlBaseParser.LOCAL, 0);
        }

        public TerminalNode OPTIONS() {
            return getToken(SqlBaseParser.OPTIONS, 0);
        }

        public TerminalNode STRING() {
            return getToken(SqlBaseParser.STRING, 0);
        }

        public PropertyListContext propertyList() {
            return getRuleContext(PropertyListContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterInsertOverwriteDir(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitInsertOverwriteDir(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitInsertOverwriteDir(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class InsertOverwriteTableContext extends InsertIntoContext {
        public InsertOverwriteTableContext(InsertIntoContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode INSERT() {
            return getToken(SqlBaseParser.INSERT, 0);
        }

        public TerminalNode OVERWRITE() {
            return getToken(SqlBaseParser.OVERWRITE, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public IdentifierListContext identifierList() {
            return getRuleContext(IdentifierListContext.class, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterInsertOverwriteTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitInsertOverwriteTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitInsertOverwriteTable(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class InsertIntoTableContext extends InsertIntoContext {
        public InsertIntoTableContext(InsertIntoContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode INSERT() {
            return getToken(SqlBaseParser.INSERT, 0);
        }

        public TerminalNode INTO() {
            return getToken(SqlBaseParser.INTO, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        public IdentifierListContext identifierList() {
            return getRuleContext(IdentifierListContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterInsertIntoTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitInsertIntoTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitInsertIntoTable(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class PartitionSpecLocationContext extends ParserRuleContext {
        public PartitionSpecLocationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public PartitionSpecContext partitionSpec() {
            return getRuleContext(PartitionSpecContext.class, 0);
        }

        public LocationSpecContext locationSpec() {
            return getRuleContext(LocationSpecContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_partitionSpecLocation;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterPartitionSpecLocation(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitPartitionSpecLocation(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitPartitionSpecLocation(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class PartitionSpecContext extends ParserRuleContext {
        public PartitionSpecContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode PARTITION() {
            return getToken(SqlBaseParser.PARTITION, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public List<PartitionValContext> partitionVal() {
            return getRuleContexts(PartitionValContext.class);
        }

        public PartitionValContext partitionVal(int i) {
            return getRuleContext(PartitionValContext.class, i);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_partitionSpec;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterPartitionSpec(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitPartitionSpec(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitPartitionSpec(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class PartitionValContext extends ParserRuleContext {
        public PartitionValContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode EQ() {
            return getToken(SqlBaseParser.EQ, 0);
        }

        public ConstantContext constant() {
            return getRuleContext(ConstantContext.class, 0);
        }

        public TerminalNode DEFAULT() {
            return getToken(SqlBaseParser.DEFAULT, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_partitionVal;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterPartitionVal(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitPartitionVal(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitPartitionVal(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class NamespaceContext extends ParserRuleContext {
        public NamespaceContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode NAMESPACE() {
            return getToken(SqlBaseParser.NAMESPACE, 0);
        }

        public TerminalNode DATABASE() {
            return getToken(SqlBaseParser.DATABASE, 0);
        }

        public TerminalNode SCHEMA() {
            return getToken(SqlBaseParser.SCHEMA, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_namespace;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterNamespace(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitNamespace(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitNamespace(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class NamespacesContext extends ParserRuleContext {
        public NamespacesContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode NAMESPACES() {
            return getToken(SqlBaseParser.NAMESPACES, 0);
        }

        public TerminalNode DATABASES() {
            return getToken(SqlBaseParser.DATABASES, 0);
        }

        public TerminalNode SCHEMAS() {
            return getToken(SqlBaseParser.SCHEMAS, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_namespaces;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterNamespaces(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitNamespaces(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitNamespaces(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class DescribeFuncNameContext extends ParserRuleContext {
        public DescribeFuncNameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public QualifiedNameContext qualifiedName() {
            return getRuleContext(QualifiedNameContext.class, 0);
        }

        public TerminalNode STRING() {
            return getToken(SqlBaseParser.STRING, 0);
        }

        public ComparisonOperatorContext comparisonOperator() {
            return getRuleContext(ComparisonOperatorContext.class, 0);
        }

        public ArithmeticOperatorContext arithmeticOperator() {
            return getRuleContext(ArithmeticOperatorContext.class, 0);
        }

        public PredicateOperatorContext predicateOperator() {
            return getRuleContext(PredicateOperatorContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_describeFuncName;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterDescribeFuncName(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitDescribeFuncName(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDescribeFuncName(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class DescribeColNameContext extends ParserRuleContext {
        public IdentifierContext identifier;
        public List<IdentifierContext> nameParts = new ArrayList<IdentifierContext>();

        public DescribeColNameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<IdentifierContext> identifier() {
            return getRuleContexts(IdentifierContext.class);
        }

        public IdentifierContext identifier(int i) {
            return getRuleContext(IdentifierContext.class, i);
        }

        public List<TerminalNode> DOT() {
            return getTokens(SqlBaseParser.DOT);
        }

        public TerminalNode DOT(int i) {
            return getToken(SqlBaseParser.DOT, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_describeColName;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterDescribeColName(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitDescribeColName(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDescribeColName(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class CtesContext extends ParserRuleContext {
        public CtesContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode WITH() {
            return getToken(SqlBaseParser.WITH, 0);
        }

        public List<NamedQueryContext> namedQuery() {
            return getRuleContexts(NamedQueryContext.class);
        }

        public NamedQueryContext namedQuery(int i) {
            return getRuleContext(NamedQueryContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_ctes;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterCtes(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitCtes(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCtes(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class NamedQueryContext extends ParserRuleContext {
        public ErrorCapturingIdentifierContext name;
        public IdentifierListContext columnAliases;

        public NamedQueryContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public QueryContext query() {
            return getRuleContext(QueryContext.class, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
            return getRuleContext(ErrorCapturingIdentifierContext.class, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public IdentifierListContext identifierList() {
            return getRuleContext(IdentifierListContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_namedQuery;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterNamedQuery(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitNamedQuery(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitNamedQuery(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class TableProviderContext extends ParserRuleContext {
        public TableProviderContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode USING() {
            return getToken(SqlBaseParser.USING, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_tableProvider;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterTableProvider(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitTableProvider(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitTableProvider(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class CreateTableClausesContext extends ParserRuleContext {
        public PropertyListContext options;
        public PartitionFieldListContext partitioning;
        public PropertyListContext tableProps;

        public CreateTableClausesContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<SkewSpecContext> skewSpec() {
            return getRuleContexts(SkewSpecContext.class);
        }

        public SkewSpecContext skewSpec(int i) {
            return getRuleContext(SkewSpecContext.class, i);
        }

        public List<BucketSpecContext> bucketSpec() {
            return getRuleContexts(BucketSpecContext.class);
        }

        public BucketSpecContext bucketSpec(int i) {
            return getRuleContext(BucketSpecContext.class, i);
        }

        public List<RowFormatContext> rowFormat() {
            return getRuleContexts(RowFormatContext.class);
        }

        public RowFormatContext rowFormat(int i) {
            return getRuleContext(RowFormatContext.class, i);
        }

        public List<CreateFileFormatContext> createFileFormat() {
            return getRuleContexts(CreateFileFormatContext.class);
        }

        public CreateFileFormatContext createFileFormat(int i) {
            return getRuleContext(CreateFileFormatContext.class, i);
        }

        public List<LocationSpecContext> locationSpec() {
            return getRuleContexts(LocationSpecContext.class);
        }

        public LocationSpecContext locationSpec(int i) {
            return getRuleContext(LocationSpecContext.class, i);
        }

        public List<CommentSpecContext> commentSpec() {
            return getRuleContexts(CommentSpecContext.class);
        }

        public CommentSpecContext commentSpec(int i) {
            return getRuleContext(CommentSpecContext.class, i);
        }

        public List<TerminalNode> OPTIONS() {
            return getTokens(SqlBaseParser.OPTIONS);
        }

        public TerminalNode OPTIONS(int i) {
            return getToken(SqlBaseParser.OPTIONS, i);
        }

        public List<TerminalNode> PARTITIONED() {
            return getTokens(SqlBaseParser.PARTITIONED);
        }

        public TerminalNode PARTITIONED(int i) {
            return getToken(SqlBaseParser.PARTITIONED, i);
        }

        public List<TerminalNode> BY() {
            return getTokens(SqlBaseParser.BY);
        }

        public TerminalNode BY(int i) {
            return getToken(SqlBaseParser.BY, i);
        }

        public List<TerminalNode> TBLPROPERTIES() {
            return getTokens(SqlBaseParser.TBLPROPERTIES);
        }

        public TerminalNode TBLPROPERTIES(int i) {
            return getToken(SqlBaseParser.TBLPROPERTIES, i);
        }

        public List<PropertyListContext> propertyList() {
            return getRuleContexts(PropertyListContext.class);
        }

        public PropertyListContext propertyList(int i) {
            return getRuleContext(PropertyListContext.class, i);
        }

        public List<PartitionFieldListContext> partitionFieldList() {
            return getRuleContexts(PartitionFieldListContext.class);
        }

        public PartitionFieldListContext partitionFieldList(int i) {
            return getRuleContext(PartitionFieldListContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_createTableClauses;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterCreateTableClauses(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitCreateTableClauses(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCreateTableClauses(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class PropertyListContext extends ParserRuleContext {
        public PropertyListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public List<PropertyContext> property() {
            return getRuleContexts(PropertyContext.class);
        }

        public PropertyContext property(int i) {
            return getRuleContext(PropertyContext.class, i);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_propertyList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterPropertyList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitPropertyList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitPropertyList(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class PropertyContext extends ParserRuleContext {
        public PropertyKeyContext key;
        public PropertyValueContext value;

        public PropertyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public PropertyKeyContext propertyKey() {
            return getRuleContext(PropertyKeyContext.class, 0);
        }

        public PropertyValueContext propertyValue() {
            return getRuleContext(PropertyValueContext.class, 0);
        }

        public TerminalNode EQ() {
            return getToken(SqlBaseParser.EQ, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_property;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterProperty(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitProperty(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitProperty(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class PropertyKeyContext extends ParserRuleContext {
        public PropertyKeyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<IdentifierContext> identifier() {
            return getRuleContexts(IdentifierContext.class);
        }

        public IdentifierContext identifier(int i) {
            return getRuleContext(IdentifierContext.class, i);
        }

        public List<TerminalNode> DOT() {
            return getTokens(SqlBaseParser.DOT);
        }

        public TerminalNode DOT(int i) {
            return getToken(SqlBaseParser.DOT, i);
        }

        public TerminalNode STRING() {
            return getToken(SqlBaseParser.STRING, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_propertyKey;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterPropertyKey(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitPropertyKey(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitPropertyKey(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class PropertyValueContext extends ParserRuleContext {
        public PropertyValueContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode INTEGER_VALUE() {
            return getToken(SqlBaseParser.INTEGER_VALUE, 0);
        }

        public TerminalNode DECIMAL_VALUE() {
            return getToken(SqlBaseParser.DECIMAL_VALUE, 0);
        }

        public BooleanValueContext booleanValue() {
            return getRuleContext(BooleanValueContext.class, 0);
        }

        public TerminalNode STRING() {
            return getToken(SqlBaseParser.STRING, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_propertyValue;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterPropertyValue(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitPropertyValue(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitPropertyValue(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ConstantListContext extends ParserRuleContext {
        public ConstantListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public List<ConstantContext> constant() {
            return getRuleContexts(ConstantContext.class);
        }

        public ConstantContext constant(int i) {
            return getRuleContext(ConstantContext.class, i);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_constantList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterConstantList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitConstantList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitConstantList(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class NestedConstantListContext extends ParserRuleContext {
        public NestedConstantListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public List<ConstantListContext> constantList() {
            return getRuleContexts(ConstantListContext.class);
        }

        public ConstantListContext constantList(int i) {
            return getRuleContext(ConstantListContext.class, i);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_nestedConstantList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterNestedConstantList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitNestedConstantList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitNestedConstantList(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class CreateFileFormatContext extends ParserRuleContext {
        public CreateFileFormatContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode STORED() {
            return getToken(SqlBaseParser.STORED, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public FileFormatContext fileFormat() {
            return getRuleContext(FileFormatContext.class, 0);
        }

        public TerminalNode BY() {
            return getToken(SqlBaseParser.BY, 0);
        }

        public StorageHandlerContext storageHandler() {
            return getRuleContext(StorageHandlerContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_createFileFormat;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterCreateFileFormat(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitCreateFileFormat(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCreateFileFormat(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class FileFormatContext extends ParserRuleContext {
        public FileFormatContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public FileFormatContext() {
        }

        @Override
        public int getRuleIndex() {
            return RULE_fileFormat;
        }

        public void copyFrom(FileFormatContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class TableFileFormatContext extends FileFormatContext {
        public Token inFmt;
        public Token outFmt;

        public TableFileFormatContext(FileFormatContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode INPUTFORMAT() {
            return getToken(SqlBaseParser.INPUTFORMAT, 0);
        }

        public TerminalNode OUTPUTFORMAT() {
            return getToken(SqlBaseParser.OUTPUTFORMAT, 0);
        }

        public List<TerminalNode> STRING() {
            return getTokens(SqlBaseParser.STRING);
        }

        public TerminalNode STRING(int i) {
            return getToken(SqlBaseParser.STRING, i);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterTableFileFormat(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitTableFileFormat(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitTableFileFormat(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class GenericFileFormatContext extends FileFormatContext {
        public GenericFileFormatContext(FileFormatContext ctx) {
            copyFrom(ctx);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterGenericFileFormat(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitGenericFileFormat(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitGenericFileFormat(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class StorageHandlerContext extends ParserRuleContext {
        public StorageHandlerContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode STRING() {
            return getToken(SqlBaseParser.STRING, 0);
        }

        public TerminalNode WITH() {
            return getToken(SqlBaseParser.WITH, 0);
        }

        public TerminalNode SERDEPROPERTIES() {
            return getToken(SqlBaseParser.SERDEPROPERTIES, 0);
        }

        public PropertyListContext propertyList() {
            return getRuleContext(PropertyListContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_storageHandler;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterStorageHandler(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitStorageHandler(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitStorageHandler(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ResourceContext extends ParserRuleContext {
        public ResourceContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode STRING() {
            return getToken(SqlBaseParser.STRING, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_resource;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterResource(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitResource(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitResource(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class DmlStatementNoWithContext extends ParserRuleContext {
        public DmlStatementNoWithContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public DmlStatementNoWithContext() {
        }

        @Override
        public int getRuleIndex() {
            return RULE_dmlStatementNoWith;
        }

        public void copyFrom(DmlStatementNoWithContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class DeleteFromTableContext extends DmlStatementNoWithContext {
        public DeleteFromTableContext(DmlStatementNoWithContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode DELETE() {
            return getToken(SqlBaseParser.DELETE, 0);
        }

        public TerminalNode FROM() {
            return getToken(SqlBaseParser.FROM, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TableAliasContext tableAlias() {
            return getRuleContext(TableAliasContext.class, 0);
        }

        public WhereClauseContext whereClause() {
            return getRuleContext(WhereClauseContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterDeleteFromTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitDeleteFromTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDeleteFromTable(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class SingleInsertQueryContext extends DmlStatementNoWithContext {
        public SingleInsertQueryContext(DmlStatementNoWithContext ctx) {
            copyFrom(ctx);
        }

        public InsertIntoContext insertInto() {
            return getRuleContext(InsertIntoContext.class, 0);
        }

        public QueryContext query() {
            return getRuleContext(QueryContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterSingleInsertQuery(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitSingleInsertQuery(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSingleInsertQuery(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class MultiInsertQueryContext extends DmlStatementNoWithContext {
        public MultiInsertQueryContext(DmlStatementNoWithContext ctx) {
            copyFrom(ctx);
        }

        public FromClauseContext fromClause() {
            return getRuleContext(FromClauseContext.class, 0);
        }

        public List<MultiInsertQueryBodyContext> multiInsertQueryBody() {
            return getRuleContexts(MultiInsertQueryBodyContext.class);
        }

        public MultiInsertQueryBodyContext multiInsertQueryBody(int i) {
            return getRuleContext(MultiInsertQueryBodyContext.class, i);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterMultiInsertQuery(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitMultiInsertQuery(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitMultiInsertQuery(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class UpdateTableContext extends DmlStatementNoWithContext {
        public UpdateTableContext(DmlStatementNoWithContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode UPDATE() {
            return getToken(SqlBaseParser.UPDATE, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TableAliasContext tableAlias() {
            return getRuleContext(TableAliasContext.class, 0);
        }

        public SetClauseContext setClause() {
            return getRuleContext(SetClauseContext.class, 0);
        }

        public WhereClauseContext whereClause() {
            return getRuleContext(WhereClauseContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterUpdateTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitUpdateTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitUpdateTable(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class MergeIntoTableContext extends DmlStatementNoWithContext {
        public MultipartIdentifierContext target;
        public TableAliasContext targetAlias;
        public MultipartIdentifierContext source;
        public QueryContext sourceQuery;
        public TableAliasContext sourceAlias;
        public BooleanExpressionContext mergeCondition;

        public MergeIntoTableContext(DmlStatementNoWithContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode MERGE() {
            return getToken(SqlBaseParser.MERGE, 0);
        }

        public TerminalNode INTO() {
            return getToken(SqlBaseParser.INTO, 0);
        }

        public TerminalNode USING() {
            return getToken(SqlBaseParser.USING, 0);
        }

        public TerminalNode ON() {
            return getToken(SqlBaseParser.ON, 0);
        }

        public List<MultipartIdentifierContext> multipartIdentifier() {
            return getRuleContexts(MultipartIdentifierContext.class);
        }

        public MultipartIdentifierContext multipartIdentifier(int i) {
            return getRuleContext(MultipartIdentifierContext.class, i);
        }

        public List<TableAliasContext> tableAlias() {
            return getRuleContexts(TableAliasContext.class);
        }

        public TableAliasContext tableAlias(int i) {
            return getRuleContext(TableAliasContext.class, i);
        }

        public BooleanExpressionContext booleanExpression() {
            return getRuleContext(BooleanExpressionContext.class, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public QueryContext query() {
            return getRuleContext(QueryContext.class, 0);
        }

        public List<MatchedClauseContext> matchedClause() {
            return getRuleContexts(MatchedClauseContext.class);
        }

        public MatchedClauseContext matchedClause(int i) {
            return getRuleContext(MatchedClauseContext.class, i);
        }

        public List<NotMatchedClauseContext> notMatchedClause() {
            return getRuleContexts(NotMatchedClauseContext.class);
        }

        public NotMatchedClauseContext notMatchedClause(int i) {
            return getRuleContext(NotMatchedClauseContext.class, i);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterMergeIntoTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitMergeIntoTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitMergeIntoTable(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class QueryOrganizationContext extends ParserRuleContext {
        public SortItemContext sortItem;
        public List<SortItemContext> order = new ArrayList<SortItemContext>();
        public ExpressionContext expression;
        public List<ExpressionContext> clusterBy = new ArrayList<ExpressionContext>();
        public List<ExpressionContext> distributeBy = new ArrayList<ExpressionContext>();
        public List<SortItemContext> sort = new ArrayList<SortItemContext>();
        public ExpressionContext limit;
        public ExpressionContext offset;

        public QueryOrganizationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode ORDER() {
            return getToken(SqlBaseParser.ORDER, 0);
        }

        public List<TerminalNode> BY() {
            return getTokens(SqlBaseParser.BY);
        }

        public TerminalNode BY(int i) {
            return getToken(SqlBaseParser.BY, i);
        }

        public TerminalNode CLUSTER() {
            return getToken(SqlBaseParser.CLUSTER, 0);
        }

        public TerminalNode DISTRIBUTE() {
            return getToken(SqlBaseParser.DISTRIBUTE, 0);
        }

        public TerminalNode SORT() {
            return getToken(SqlBaseParser.SORT, 0);
        }

        public WindowClauseContext windowClause() {
            return getRuleContext(WindowClauseContext.class, 0);
        }

        public TerminalNode LIMIT() {
            return getToken(SqlBaseParser.LIMIT, 0);
        }

        public TerminalNode OFFSET() {
            return getToken(SqlBaseParser.OFFSET, 0);
        }

        public List<SortItemContext> sortItem() {
            return getRuleContexts(SortItemContext.class);
        }

        public SortItemContext sortItem(int i) {
            return getRuleContext(SortItemContext.class, i);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public TerminalNode ALL() {
            return getToken(SqlBaseParser.ALL, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_queryOrganization;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterQueryOrganization(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitQueryOrganization(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitQueryOrganization(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class MultiInsertQueryBodyContext extends ParserRuleContext {
        public MultiInsertQueryBodyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public InsertIntoContext insertInto() {
            return getRuleContext(InsertIntoContext.class, 0);
        }

        public FromStatementBodyContext fromStatementBody() {
            return getRuleContext(FromStatementBodyContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_multiInsertQueryBody;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterMultiInsertQueryBody(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitMultiInsertQueryBody(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitMultiInsertQueryBody(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class QueryTermContext extends ParserRuleContext {
        public QueryTermContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public QueryTermContext() {
        }

        @Override
        public int getRuleIndex() {
            return RULE_queryTerm;
        }

        public void copyFrom(QueryTermContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class QueryTermDefaultContext extends QueryTermContext {
        public QueryTermDefaultContext(QueryTermContext ctx) {
            copyFrom(ctx);
        }

        public QueryPrimaryContext queryPrimary() {
            return getRuleContext(QueryPrimaryContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterQueryTermDefault(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitQueryTermDefault(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitQueryTermDefault(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class SetOperationContext extends QueryTermContext {
        public QueryTermContext left;
        public Token operator;
        public QueryTermContext right;

        public SetOperationContext(QueryTermContext ctx) {
            copyFrom(ctx);
        }

        public List<QueryTermContext> queryTerm() {
            return getRuleContexts(QueryTermContext.class);
        }

        public QueryTermContext queryTerm(int i) {
            return getRuleContext(QueryTermContext.class, i);
        }

        public TerminalNode INTERSECT() {
            return getToken(SqlBaseParser.INTERSECT, 0);
        }

        public TerminalNode UNION() {
            return getToken(SqlBaseParser.UNION, 0);
        }

        public TerminalNode EXCEPT() {
            return getToken(SqlBaseParser.EXCEPT, 0);
        }

        public TerminalNode SETMINUS() {
            return getToken(SqlBaseParser.SETMINUS, 0);
        }

        public SetQuantifierContext setQuantifier() {
            return getRuleContext(SetQuantifierContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSetOperation(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSetOperation(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSetOperation(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class QueryPrimaryContext extends ParserRuleContext {
        public QueryPrimaryContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public QueryPrimaryContext() {
        }

        @Override
        public int getRuleIndex() {
            return RULE_queryPrimary;
        }

        public void copyFrom(QueryPrimaryContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class SubqueryContext extends QueryPrimaryContext {
        public SubqueryContext(QueryPrimaryContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public QueryContext query() {
            return getRuleContext(QueryContext.class, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSubquery(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSubquery(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSubquery(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class QueryPrimaryDefaultContext extends QueryPrimaryContext {
        public QueryPrimaryDefaultContext(QueryPrimaryContext ctx) {
            copyFrom(ctx);
        }

        public QuerySpecificationContext querySpecification() {
            return getRuleContext(QuerySpecificationContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterQueryPrimaryDefault(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitQueryPrimaryDefault(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitQueryPrimaryDefault(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class InlineTableDefault1Context extends QueryPrimaryContext {
        public InlineTableDefault1Context(QueryPrimaryContext ctx) {
            copyFrom(ctx);
        }

        public InlineTableContext inlineTable() {
            return getRuleContext(InlineTableContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterInlineTableDefault1(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitInlineTableDefault1(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitInlineTableDefault1(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class FromStmtContext extends QueryPrimaryContext {
        public FromStmtContext(QueryPrimaryContext ctx) {
            copyFrom(ctx);
        }

        public FromStatementContext fromStatement() {
            return getRuleContext(FromStatementContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterFromStmt(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitFromStmt(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitFromStmt(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class TableContext extends QueryPrimaryContext {
        public TableContext(QueryPrimaryContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitTable(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class SortItemContext extends ParserRuleContext {
        public Token ordering;
        public Token nullOrder;

        public SortItemContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode NULLS() {
            return getToken(SqlBaseParser.NULLS, 0);
        }

        public TerminalNode ASC() {
            return getToken(SqlBaseParser.ASC, 0);
        }

        public TerminalNode DESC() {
            return getToken(SqlBaseParser.DESC, 0);
        }

        public TerminalNode LAST() {
            return getToken(SqlBaseParser.LAST, 0);
        }

        public TerminalNode FIRST() {
            return getToken(SqlBaseParser.FIRST, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_sortItem;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSortItem(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSortItem(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSortItem(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class FromStatementContext extends ParserRuleContext {
        public FromStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public FromClauseContext fromClause() {
            return getRuleContext(FromClauseContext.class, 0);
        }

        public List<FromStatementBodyContext> fromStatementBody() {
            return getRuleContexts(FromStatementBodyContext.class);
        }

        public FromStatementBodyContext fromStatementBody(int i) {
            return getRuleContext(FromStatementBodyContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_fromStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterFromStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitFromStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitFromStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class FromStatementBodyContext extends ParserRuleContext {
        public FromStatementBodyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TransformClauseContext transformClause() {
            return getRuleContext(TransformClauseContext.class, 0);
        }

        public QueryOrganizationContext queryOrganization() {
            return getRuleContext(QueryOrganizationContext.class, 0);
        }

        public WhereClauseContext whereClause() {
            return getRuleContext(WhereClauseContext.class, 0);
        }

        public SelectClauseContext selectClause() {
            return getRuleContext(SelectClauseContext.class, 0);
        }

        public List<LateralViewContext> lateralView() {
            return getRuleContexts(LateralViewContext.class);
        }

        public LateralViewContext lateralView(int i) {
            return getRuleContext(LateralViewContext.class, i);
        }

        public AggregationClauseContext aggregationClause() {
            return getRuleContext(AggregationClauseContext.class, 0);
        }

        public HavingClauseContext havingClause() {
            return getRuleContext(HavingClauseContext.class, 0);
        }

        public WindowClauseContext windowClause() {
            return getRuleContext(WindowClauseContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_fromStatementBody;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterFromStatementBody(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitFromStatementBody(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitFromStatementBody(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class QuerySpecificationContext extends ParserRuleContext {
        public QuerySpecificationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public QuerySpecificationContext() {
        }

        @Override
        public int getRuleIndex() {
            return RULE_querySpecification;
        }

        public void copyFrom(QuerySpecificationContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class RegularQuerySpecificationContext extends QuerySpecificationContext {
        public RegularQuerySpecificationContext(QuerySpecificationContext ctx) {
            copyFrom(ctx);
        }

        public SelectClauseContext selectClause() {
            return getRuleContext(SelectClauseContext.class, 0);
        }

        public FromClauseContext fromClause() {
            return getRuleContext(FromClauseContext.class, 0);
        }

        public List<LateralViewContext> lateralView() {
            return getRuleContexts(LateralViewContext.class);
        }

        public LateralViewContext lateralView(int i) {
            return getRuleContext(LateralViewContext.class, i);
        }

        public WhereClauseContext whereClause() {
            return getRuleContext(WhereClauseContext.class, 0);
        }

        public AggregationClauseContext aggregationClause() {
            return getRuleContext(AggregationClauseContext.class, 0);
        }

        public HavingClauseContext havingClause() {
            return getRuleContext(HavingClauseContext.class, 0);
        }

        public WindowClauseContext windowClause() {
            return getRuleContext(WindowClauseContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterRegularQuerySpecification(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitRegularQuerySpecification(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitRegularQuerySpecification(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class TransformQuerySpecificationContext extends QuerySpecificationContext {
        public TransformQuerySpecificationContext(QuerySpecificationContext ctx) {
            copyFrom(ctx);
        }

        public TransformClauseContext transformClause() {
            return getRuleContext(TransformClauseContext.class, 0);
        }

        public FromClauseContext fromClause() {
            return getRuleContext(FromClauseContext.class, 0);
        }

        public List<LateralViewContext> lateralView() {
            return getRuleContexts(LateralViewContext.class);
        }

        public LateralViewContext lateralView(int i) {
            return getRuleContext(LateralViewContext.class, i);
        }

        public WhereClauseContext whereClause() {
            return getRuleContext(WhereClauseContext.class, 0);
        }

        public AggregationClauseContext aggregationClause() {
            return getRuleContext(AggregationClauseContext.class, 0);
        }

        public HavingClauseContext havingClause() {
            return getRuleContext(HavingClauseContext.class, 0);
        }

        public WindowClauseContext windowClause() {
            return getRuleContext(WindowClauseContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterTransformQuerySpecification(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitTransformQuerySpecification(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitTransformQuerySpecification(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class TransformClauseContext extends ParserRuleContext {
        public Token kind;
        public RowFormatContext inRowFormat;
        public Token recordWriter;
        public Token script;
        public RowFormatContext outRowFormat;
        public Token recordReader;

        public TransformClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode USING() {
            return getToken(SqlBaseParser.USING, 0);
        }

        public List<TerminalNode> STRING() {
            return getTokens(SqlBaseParser.STRING);
        }

        public TerminalNode STRING(int i) {
            return getToken(SqlBaseParser.STRING, i);
        }

        public TerminalNode SELECT() {
            return getToken(SqlBaseParser.SELECT, 0);
        }

        public List<TerminalNode> LEFT_PAREN() {
            return getTokens(SqlBaseParser.LEFT_PAREN);
        }

        public TerminalNode LEFT_PAREN(int i) {
            return getToken(SqlBaseParser.LEFT_PAREN, i);
        }

        public ExpressionSeqContext expressionSeq() {
            return getRuleContext(ExpressionSeqContext.class, 0);
        }

        public List<TerminalNode> RIGHT_PAREN() {
            return getTokens(SqlBaseParser.RIGHT_PAREN);
        }

        public TerminalNode RIGHT_PAREN(int i) {
            return getToken(SqlBaseParser.RIGHT_PAREN, i);
        }

        public TerminalNode TRANSFORM() {
            return getToken(SqlBaseParser.TRANSFORM, 0);
        }

        public TerminalNode MAP() {
            return getToken(SqlBaseParser.MAP, 0);
        }

        public TerminalNode REDUCE() {
            return getToken(SqlBaseParser.REDUCE, 0);
        }

        public TerminalNode RECORDWRITER() {
            return getToken(SqlBaseParser.RECORDWRITER, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public TerminalNode RECORDREADER() {
            return getToken(SqlBaseParser.RECORDREADER, 0);
        }

        public List<RowFormatContext> rowFormat() {
            return getRuleContexts(RowFormatContext.class);
        }

        public RowFormatContext rowFormat(int i) {
            return getRuleContext(RowFormatContext.class, i);
        }

        public SetQuantifierContext setQuantifier() {
            return getRuleContext(SetQuantifierContext.class, 0);
        }

        public IdentifierSeqContext identifierSeq() {
            return getRuleContext(IdentifierSeqContext.class, 0);
        }

        public ColTypeListContext colTypeList() {
            return getRuleContext(ColTypeListContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_transformClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterTransformClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitTransformClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitTransformClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class SelectClauseContext extends ParserRuleContext {
        public HintContext hint;
        public List<HintContext> hints = new ArrayList<HintContext>();

        public SelectClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode SELECT() {
            return getToken(SqlBaseParser.SELECT, 0);
        }

        public NamedExpressionSeqContext namedExpressionSeq() {
            return getRuleContext(NamedExpressionSeqContext.class, 0);
        }

        public SetQuantifierContext setQuantifier() {
            return getRuleContext(SetQuantifierContext.class, 0);
        }

        public List<HintContext> hint() {
            return getRuleContexts(HintContext.class);
        }

        public HintContext hint(int i) {
            return getRuleContext(HintContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_selectClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSelectClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSelectClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSelectClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class SetClauseContext extends ParserRuleContext {
        public SetClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode SET() {
            return getToken(SqlBaseParser.SET, 0);
        }

        public AssignmentListContext assignmentList() {
            return getRuleContext(AssignmentListContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_setClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSetClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSetClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSetClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class MatchedClauseContext extends ParserRuleContext {
        public BooleanExpressionContext matchedCond;

        public MatchedClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode WHEN() {
            return getToken(SqlBaseParser.WHEN, 0);
        }

        public TerminalNode MATCHED() {
            return getToken(SqlBaseParser.MATCHED, 0);
        }

        public TerminalNode THEN() {
            return getToken(SqlBaseParser.THEN, 0);
        }

        public MatchedActionContext matchedAction() {
            return getRuleContext(MatchedActionContext.class, 0);
        }

        public TerminalNode AND() {
            return getToken(SqlBaseParser.AND, 0);
        }

        public BooleanExpressionContext booleanExpression() {
            return getRuleContext(BooleanExpressionContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_matchedClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterMatchedClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitMatchedClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitMatchedClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class NotMatchedClauseContext extends ParserRuleContext {
        public BooleanExpressionContext notMatchedCond;

        public NotMatchedClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode WHEN() {
            return getToken(SqlBaseParser.WHEN, 0);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode MATCHED() {
            return getToken(SqlBaseParser.MATCHED, 0);
        }

        public TerminalNode THEN() {
            return getToken(SqlBaseParser.THEN, 0);
        }

        public NotMatchedActionContext notMatchedAction() {
            return getRuleContext(NotMatchedActionContext.class, 0);
        }

        public TerminalNode AND() {
            return getToken(SqlBaseParser.AND, 0);
        }

        public BooleanExpressionContext booleanExpression() {
            return getRuleContext(BooleanExpressionContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_notMatchedClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterNotMatchedClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitNotMatchedClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitNotMatchedClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class MatchedActionContext extends ParserRuleContext {
        public MatchedActionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode DELETE() {
            return getToken(SqlBaseParser.DELETE, 0);
        }

        public TerminalNode UPDATE() {
            return getToken(SqlBaseParser.UPDATE, 0);
        }

        public TerminalNode SET() {
            return getToken(SqlBaseParser.SET, 0);
        }

        public TerminalNode ASTERISK() {
            return getToken(SqlBaseParser.ASTERISK, 0);
        }

        public AssignmentListContext assignmentList() {
            return getRuleContext(AssignmentListContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_matchedAction;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterMatchedAction(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitMatchedAction(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitMatchedAction(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class NotMatchedActionContext extends ParserRuleContext {
        public MultipartIdentifierListContext columns;

        public NotMatchedActionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode INSERT() {
            return getToken(SqlBaseParser.INSERT, 0);
        }

        public TerminalNode ASTERISK() {
            return getToken(SqlBaseParser.ASTERISK, 0);
        }

        public List<TerminalNode> LEFT_PAREN() {
            return getTokens(SqlBaseParser.LEFT_PAREN);
        }

        public TerminalNode LEFT_PAREN(int i) {
            return getToken(SqlBaseParser.LEFT_PAREN, i);
        }

        public List<TerminalNode> RIGHT_PAREN() {
            return getTokens(SqlBaseParser.RIGHT_PAREN);
        }

        public TerminalNode RIGHT_PAREN(int i) {
            return getToken(SqlBaseParser.RIGHT_PAREN, i);
        }

        public TerminalNode VALUES() {
            return getToken(SqlBaseParser.VALUES, 0);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public MultipartIdentifierListContext multipartIdentifierList() {
            return getRuleContext(MultipartIdentifierListContext.class, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_notMatchedAction;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterNotMatchedAction(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitNotMatchedAction(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitNotMatchedAction(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class AssignmentListContext extends ParserRuleContext {
        public AssignmentListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<AssignmentContext> assignment() {
            return getRuleContexts(AssignmentContext.class);
        }

        public AssignmentContext assignment(int i) {
            return getRuleContext(AssignmentContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_assignmentList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterAssignmentList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitAssignmentList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitAssignmentList(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class AssignmentContext extends ParserRuleContext {
        public MultipartIdentifierContext key;
        public ExpressionContext value;

        public AssignmentContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode EQ() {
            return getToken(SqlBaseParser.EQ, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_assignment;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterAssignment(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitAssignment(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitAssignment(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class WhereClauseContext extends ParserRuleContext {
        public WhereClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode WHERE() {
            return getToken(SqlBaseParser.WHERE, 0);
        }

        public BooleanExpressionContext booleanExpression() {
            return getRuleContext(BooleanExpressionContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_whereClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterWhereClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitWhereClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitWhereClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class HavingClauseContext extends ParserRuleContext {
        public HavingClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode HAVING() {
            return getToken(SqlBaseParser.HAVING, 0);
        }

        public BooleanExpressionContext booleanExpression() {
            return getRuleContext(BooleanExpressionContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_havingClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterHavingClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitHavingClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitHavingClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class HintContext extends ParserRuleContext {
        public HintStatementContext hintStatement;
        public List<HintStatementContext> hintStatements = new ArrayList<HintStatementContext>();

        public HintContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode HENT_START() {
            return getToken(SqlBaseParser.HENT_START, 0);
        }

        public TerminalNode HENT_END() {
            return getToken(SqlBaseParser.HENT_END, 0);
        }

        public List<HintStatementContext> hintStatement() {
            return getRuleContexts(HintStatementContext.class);
        }

        public HintStatementContext hintStatement(int i) {
            return getRuleContext(HintStatementContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_hint;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterHint(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitHint(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitHint(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class HintStatementContext extends ParserRuleContext {
        public IdentifierContext hintName;
        public PrimaryExpressionContext primaryExpression;
        public List<PrimaryExpressionContext> parameters = new ArrayList<PrimaryExpressionContext>();

        public HintStatementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<PrimaryExpressionContext> primaryExpression() {
            return getRuleContexts(PrimaryExpressionContext.class);
        }

        public PrimaryExpressionContext primaryExpression(int i) {
            return getRuleContext(PrimaryExpressionContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_hintStatement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterHintStatement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitHintStatement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitHintStatement(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class FromClauseContext extends ParserRuleContext {
        public FromClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode FROM() {
            return getToken(SqlBaseParser.FROM, 0);
        }

        public List<RelationContext> relation() {
            return getRuleContexts(RelationContext.class);
        }

        public RelationContext relation(int i) {
            return getRuleContext(RelationContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public List<LateralViewContext> lateralView() {
            return getRuleContexts(LateralViewContext.class);
        }

        public LateralViewContext lateralView(int i) {
            return getRuleContext(LateralViewContext.class, i);
        }

        public PivotClauseContext pivotClause() {
            return getRuleContext(PivotClauseContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_fromClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterFromClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitFromClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitFromClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class TemporalClauseContext extends ParserRuleContext {
        public Token version;
        public ValueExpressionContext timestamp;

        public TemporalClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public TerminalNode OF() {
            return getToken(SqlBaseParser.OF, 0);
        }

        public TerminalNode SYSTEM_VERSION() {
            return getToken(SqlBaseParser.SYSTEM_VERSION, 0);
        }

        public TerminalNode VERSION() {
            return getToken(SqlBaseParser.VERSION, 0);
        }

        public TerminalNode INTEGER_VALUE() {
            return getToken(SqlBaseParser.INTEGER_VALUE, 0);
        }

        public TerminalNode STRING() {
            return getToken(SqlBaseParser.STRING, 0);
        }

        public TerminalNode FOR() {
            return getToken(SqlBaseParser.FOR, 0);
        }

        public TerminalNode SYSTEM_TIME() {
            return getToken(SqlBaseParser.SYSTEM_TIME, 0);
        }

        public TerminalNode TIMESTAMP() {
            return getToken(SqlBaseParser.TIMESTAMP, 0);
        }

        public ValueExpressionContext valueExpression() {
            return getRuleContext(ValueExpressionContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_temporalClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterTemporalClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitTemporalClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitTemporalClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class AggregationClauseContext extends ParserRuleContext {
        public GroupByClauseContext groupByClause;
        public List<GroupByClauseContext> groupingExpressionsWithGroupingAnalytics = new ArrayList<GroupByClauseContext>();
        public ExpressionContext expression;
        public List<ExpressionContext> groupingExpressions = new ArrayList<ExpressionContext>();
        public Token kind;

        public AggregationClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode GROUP() {
            return getToken(SqlBaseParser.GROUP, 0);
        }

        public TerminalNode BY() {
            return getToken(SqlBaseParser.BY, 0);
        }

        public List<GroupByClauseContext> groupByClause() {
            return getRuleContexts(GroupByClauseContext.class);
        }

        public GroupByClauseContext groupByClause(int i) {
            return getRuleContext(GroupByClauseContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public TerminalNode WITH() {
            return getToken(SqlBaseParser.WITH, 0);
        }

        public TerminalNode SETS() {
            return getToken(SqlBaseParser.SETS, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public List<GroupingSetContext> groupingSet() {
            return getRuleContexts(GroupingSetContext.class);
        }

        public GroupingSetContext groupingSet(int i) {
            return getRuleContext(GroupingSetContext.class, i);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public TerminalNode ROLLUP() {
            return getToken(SqlBaseParser.ROLLUP, 0);
        }

        public TerminalNode CUBE() {
            return getToken(SqlBaseParser.CUBE, 0);
        }

        public TerminalNode GROUPING() {
            return getToken(SqlBaseParser.GROUPING, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_aggregationClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterAggregationClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitAggregationClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitAggregationClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class GroupByClauseContext extends ParserRuleContext {
        public GroupByClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public GroupingAnalyticsContext groupingAnalytics() {
            return getRuleContext(GroupingAnalyticsContext.class, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_groupByClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterGroupByClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitGroupByClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitGroupByClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class GroupingAnalyticsContext extends ParserRuleContext {
        public GroupingAnalyticsContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public List<GroupingSetContext> groupingSet() {
            return getRuleContexts(GroupingSetContext.class);
        }

        public GroupingSetContext groupingSet(int i) {
            return getRuleContext(GroupingSetContext.class, i);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public TerminalNode ROLLUP() {
            return getToken(SqlBaseParser.ROLLUP, 0);
        }

        public TerminalNode CUBE() {
            return getToken(SqlBaseParser.CUBE, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public TerminalNode GROUPING() {
            return getToken(SqlBaseParser.GROUPING, 0);
        }

        public TerminalNode SETS() {
            return getToken(SqlBaseParser.SETS, 0);
        }

        public List<GroupingElementContext> groupingElement() {
            return getRuleContexts(GroupingElementContext.class);
        }

        public GroupingElementContext groupingElement(int i) {
            return getRuleContext(GroupingElementContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_groupingAnalytics;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterGroupingAnalytics(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitGroupingAnalytics(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitGroupingAnalytics(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class GroupingElementContext extends ParserRuleContext {
        public GroupingElementContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public GroupingAnalyticsContext groupingAnalytics() {
            return getRuleContext(GroupingAnalyticsContext.class, 0);
        }

        public GroupingSetContext groupingSet() {
            return getRuleContext(GroupingSetContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_groupingElement;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterGroupingElement(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitGroupingElement(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitGroupingElement(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class GroupingSetContext extends ParserRuleContext {
        public GroupingSetContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_groupingSet;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterGroupingSet(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitGroupingSet(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitGroupingSet(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class PivotClauseContext extends ParserRuleContext {
        public NamedExpressionSeqContext aggregates;
        public PivotValueContext pivotValue;
        public List<PivotValueContext> pivotValues = new ArrayList<PivotValueContext>();

        public PivotClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode PIVOT() {
            return getToken(SqlBaseParser.PIVOT, 0);
        }

        public List<TerminalNode> LEFT_PAREN() {
            return getTokens(SqlBaseParser.LEFT_PAREN);
        }

        public TerminalNode LEFT_PAREN(int i) {
            return getToken(SqlBaseParser.LEFT_PAREN, i);
        }

        public TerminalNode FOR() {
            return getToken(SqlBaseParser.FOR, 0);
        }

        public PivotColumnContext pivotColumn() {
            return getRuleContext(PivotColumnContext.class, 0);
        }

        public TerminalNode IN() {
            return getToken(SqlBaseParser.IN, 0);
        }

        public List<TerminalNode> RIGHT_PAREN() {
            return getTokens(SqlBaseParser.RIGHT_PAREN);
        }

        public TerminalNode RIGHT_PAREN(int i) {
            return getToken(SqlBaseParser.RIGHT_PAREN, i);
        }

        public NamedExpressionSeqContext namedExpressionSeq() {
            return getRuleContext(NamedExpressionSeqContext.class, 0);
        }

        public List<PivotValueContext> pivotValue() {
            return getRuleContexts(PivotValueContext.class);
        }

        public PivotValueContext pivotValue(int i) {
            return getRuleContext(PivotValueContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_pivotClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterPivotClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitPivotClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitPivotClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class PivotColumnContext extends ParserRuleContext {
        public IdentifierContext identifier;
        public List<IdentifierContext> identifiers = new ArrayList<IdentifierContext>();

        public PivotColumnContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<IdentifierContext> identifier() {
            return getRuleContexts(IdentifierContext.class);
        }

        public IdentifierContext identifier(int i) {
            return getRuleContext(IdentifierContext.class, i);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_pivotColumn;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterPivotColumn(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitPivotColumn(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitPivotColumn(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class PivotValueContext extends ParserRuleContext {
        public PivotValueContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_pivotValue;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterPivotValue(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitPivotValue(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitPivotValue(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class LateralViewContext extends ParserRuleContext {
        public IdentifierContext tblName;
        public IdentifierContext identifier;
        public List<IdentifierContext> colName = new ArrayList<IdentifierContext>();

        public LateralViewContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode LATERAL() {
            return getToken(SqlBaseParser.LATERAL, 0);
        }

        public TerminalNode VIEW() {
            return getToken(SqlBaseParser.VIEW, 0);
        }

        public QualifiedNameContext qualifiedName() {
            return getRuleContext(QualifiedNameContext.class, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<IdentifierContext> identifier() {
            return getRuleContexts(IdentifierContext.class);
        }

        public IdentifierContext identifier(int i) {
            return getRuleContext(IdentifierContext.class, i);
        }

        public TerminalNode OUTER() {
            return getToken(SqlBaseParser.OUTER, 0);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_lateralView;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterLateralView(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitLateralView(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitLateralView(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class SetQuantifierContext extends ParserRuleContext {
        public SetQuantifierContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode DISTINCT() {
            return getToken(SqlBaseParser.DISTINCT, 0);
        }

        public TerminalNode ALL() {
            return getToken(SqlBaseParser.ALL, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_setQuantifier;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSetQuantifier(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSetQuantifier(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSetQuantifier(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class RelationContext extends ParserRuleContext {
        public RelationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public RelationPrimaryContext relationPrimary() {
            return getRuleContext(RelationPrimaryContext.class, 0);
        }

        public TerminalNode LATERAL() {
            return getToken(SqlBaseParser.LATERAL, 0);
        }

        public List<JoinRelationContext> joinRelation() {
            return getRuleContexts(JoinRelationContext.class);
        }

        public JoinRelationContext joinRelation(int i) {
            return getRuleContext(JoinRelationContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_relation;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterRelation(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitRelation(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitRelation(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class JoinRelationContext extends ParserRuleContext {
        public RelationPrimaryContext right;

        public JoinRelationContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode JOIN() {
            return getToken(SqlBaseParser.JOIN, 0);
        }

        public RelationPrimaryContext relationPrimary() {
            return getRuleContext(RelationPrimaryContext.class, 0);
        }

        public JoinTypeContext joinType() {
            return getRuleContext(JoinTypeContext.class, 0);
        }

        public TerminalNode LATERAL() {
            return getToken(SqlBaseParser.LATERAL, 0);
        }

        public JoinCriteriaContext joinCriteria() {
            return getRuleContext(JoinCriteriaContext.class, 0);
        }

        public TerminalNode NATURAL() {
            return getToken(SqlBaseParser.NATURAL, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_joinRelation;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterJoinRelation(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitJoinRelation(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitJoinRelation(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class JoinTypeContext extends ParserRuleContext {
        public JoinTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode INNER() {
            return getToken(SqlBaseParser.INNER, 0);
        }

        public TerminalNode CROSS() {
            return getToken(SqlBaseParser.CROSS, 0);
        }

        public TerminalNode LEFT() {
            return getToken(SqlBaseParser.LEFT, 0);
        }

        public TerminalNode OUTER() {
            return getToken(SqlBaseParser.OUTER, 0);
        }

        public TerminalNode SEMI() {
            return getToken(SqlBaseParser.SEMI, 0);
        }

        public TerminalNode RIGHT() {
            return getToken(SqlBaseParser.RIGHT, 0);
        }

        public TerminalNode FULL() {
            return getToken(SqlBaseParser.FULL, 0);
        }

        public TerminalNode ANTI() {
            return getToken(SqlBaseParser.ANTI, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_joinType;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterJoinType(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitJoinType(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitJoinType(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class JoinCriteriaContext extends ParserRuleContext {
        public JoinCriteriaContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode ON() {
            return getToken(SqlBaseParser.ON, 0);
        }

        public BooleanExpressionContext booleanExpression() {
            return getRuleContext(BooleanExpressionContext.class, 0);
        }

        public TerminalNode USING() {
            return getToken(SqlBaseParser.USING, 0);
        }

        public IdentifierListContext identifierList() {
            return getRuleContext(IdentifierListContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_joinCriteria;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterJoinCriteria(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitJoinCriteria(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitJoinCriteria(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class SampleContext extends ParserRuleContext {
        public Token seed;

        public SampleContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode TABLESAMPLE() {
            return getToken(SqlBaseParser.TABLESAMPLE, 0);
        }

        public List<TerminalNode> LEFT_PAREN() {
            return getTokens(SqlBaseParser.LEFT_PAREN);
        }

        public TerminalNode LEFT_PAREN(int i) {
            return getToken(SqlBaseParser.LEFT_PAREN, i);
        }

        public List<TerminalNode> RIGHT_PAREN() {
            return getTokens(SqlBaseParser.RIGHT_PAREN);
        }

        public TerminalNode RIGHT_PAREN(int i) {
            return getToken(SqlBaseParser.RIGHT_PAREN, i);
        }

        public SampleMethodContext sampleMethod() {
            return getRuleContext(SampleMethodContext.class, 0);
        }

        public TerminalNode REPEATABLE() {
            return getToken(SqlBaseParser.REPEATABLE, 0);
        }

        public TerminalNode INTEGER_VALUE() {
            return getToken(SqlBaseParser.INTEGER_VALUE, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_sample;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSample(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSample(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSample(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class SampleMethodContext extends ParserRuleContext {
        public SampleMethodContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public SampleMethodContext() {
        }

        @Override
        public int getRuleIndex() {
            return RULE_sampleMethod;
        }

        public void copyFrom(SampleMethodContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class SampleByRowsContext extends SampleMethodContext {
        public SampleByRowsContext(SampleMethodContext ctx) {
            copyFrom(ctx);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode ROWS() {
            return getToken(SqlBaseParser.ROWS, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSampleByRows(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSampleByRows(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSampleByRows(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class SampleByPercentileContext extends SampleMethodContext {
        public Token negativeSign;
        public Token percentage;

        public SampleByPercentileContext(SampleMethodContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode PERCENTLIT() {
            return getToken(SqlBaseParser.PERCENTLIT, 0);
        }

        public TerminalNode INTEGER_VALUE() {
            return getToken(SqlBaseParser.INTEGER_VALUE, 0);
        }

        public TerminalNode DECIMAL_VALUE() {
            return getToken(SqlBaseParser.DECIMAL_VALUE, 0);
        }

        public TerminalNode MINUS() {
            return getToken(SqlBaseParser.MINUS, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterSampleByPercentile(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitSampleByPercentile(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSampleByPercentile(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class SampleByBucketContext extends SampleMethodContext {
        public Token sampleType;
        public Token numerator;
        public Token denominator;

        public SampleByBucketContext(SampleMethodContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode OUT() {
            return getToken(SqlBaseParser.OUT, 0);
        }

        public TerminalNode OF() {
            return getToken(SqlBaseParser.OF, 0);
        }

        public TerminalNode BUCKET() {
            return getToken(SqlBaseParser.BUCKET, 0);
        }

        public List<TerminalNode> INTEGER_VALUE() {
            return getTokens(SqlBaseParser.INTEGER_VALUE);
        }

        public TerminalNode INTEGER_VALUE(int i) {
            return getToken(SqlBaseParser.INTEGER_VALUE, i);
        }

        public TerminalNode ON() {
            return getToken(SqlBaseParser.ON, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public QualifiedNameContext qualifiedName() {
            return getRuleContext(QualifiedNameContext.class, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSampleByBucket(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSampleByBucket(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSampleByBucket(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class SampleByBytesContext extends SampleMethodContext {
        public ExpressionContext bytes;

        public SampleByBytesContext(SampleMethodContext ctx) {
            copyFrom(ctx);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSampleByBytes(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSampleByBytes(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSampleByBytes(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class IdentifierListContext extends ParserRuleContext {
        public IdentifierListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public IdentifierSeqContext identifierSeq() {
            return getRuleContext(IdentifierSeqContext.class, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_identifierList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterIdentifierList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitIdentifierList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitIdentifierList(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class IdentifierSeqContext extends ParserRuleContext {
        public ErrorCapturingIdentifierContext errorCapturingIdentifier;
        public List<ErrorCapturingIdentifierContext> ident = new ArrayList<ErrorCapturingIdentifierContext>();

        public IdentifierSeqContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<ErrorCapturingIdentifierContext> errorCapturingIdentifier() {
            return getRuleContexts(ErrorCapturingIdentifierContext.class);
        }

        public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
            return getRuleContext(ErrorCapturingIdentifierContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_identifierSeq;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterIdentifierSeq(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitIdentifierSeq(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitIdentifierSeq(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class OrderedIdentifierListContext extends ParserRuleContext {
        public OrderedIdentifierListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public List<OrderedIdentifierContext> orderedIdentifier() {
            return getRuleContexts(OrderedIdentifierContext.class);
        }

        public OrderedIdentifierContext orderedIdentifier(int i) {
            return getRuleContext(OrderedIdentifierContext.class, i);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_orderedIdentifierList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterOrderedIdentifierList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitOrderedIdentifierList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitOrderedIdentifierList(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class OrderedIdentifierContext extends ParserRuleContext {
        public ErrorCapturingIdentifierContext ident;
        public Token ordering;

        public OrderedIdentifierContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
            return getRuleContext(ErrorCapturingIdentifierContext.class, 0);
        }

        public TerminalNode ASC() {
            return getToken(SqlBaseParser.ASC, 0);
        }

        public TerminalNode DESC() {
            return getToken(SqlBaseParser.DESC, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_orderedIdentifier;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterOrderedIdentifier(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitOrderedIdentifier(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitOrderedIdentifier(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class IdentifierCommentListContext extends ParserRuleContext {
        public IdentifierCommentListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public List<IdentifierCommentContext> identifierComment() {
            return getRuleContexts(IdentifierCommentContext.class);
        }

        public IdentifierCommentContext identifierComment(int i) {
            return getRuleContext(IdentifierCommentContext.class, i);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_identifierCommentList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterIdentifierCommentList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitIdentifierCommentList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitIdentifierCommentList(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class IdentifierCommentContext extends ParserRuleContext {
        public IdentifierCommentContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public CommentSpecContext commentSpec() {
            return getRuleContext(CommentSpecContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_identifierComment;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterIdentifierComment(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitIdentifierComment(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitIdentifierComment(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class RelationPrimaryContext extends ParserRuleContext {
        public RelationPrimaryContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public RelationPrimaryContext() {
        }

        @Override
        public int getRuleIndex() {
            return RULE_relationPrimary;
        }

        public void copyFrom(RelationPrimaryContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class TableValuedFunctionContext extends RelationPrimaryContext {
        public TableValuedFunctionContext(RelationPrimaryContext ctx) {
            copyFrom(ctx);
        }

        public FunctionTableContext functionTable() {
            return getRuleContext(FunctionTableContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterTableValuedFunction(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitTableValuedFunction(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitTableValuedFunction(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class InlineTableDefault2Context extends RelationPrimaryContext {
        public InlineTableDefault2Context(RelationPrimaryContext ctx) {
            copyFrom(ctx);
        }

        public InlineTableContext inlineTable() {
            return getRuleContext(InlineTableContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterInlineTableDefault2(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitInlineTableDefault2(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitInlineTableDefault2(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class AliasedRelationContext extends RelationPrimaryContext {
        public AliasedRelationContext(RelationPrimaryContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public RelationContext relation() {
            return getRuleContext(RelationContext.class, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public TableAliasContext tableAlias() {
            return getRuleContext(TableAliasContext.class, 0);
        }

        public SampleContext sample() {
            return getRuleContext(SampleContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterAliasedRelation(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitAliasedRelation(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitAliasedRelation(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class AliasedQueryContext extends RelationPrimaryContext {
        public AliasedQueryContext(RelationPrimaryContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public QueryContext query() {
            return getRuleContext(QueryContext.class, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public TableAliasContext tableAlias() {
            return getRuleContext(TableAliasContext.class, 0);
        }

        public SampleContext sample() {
            return getRuleContext(SampleContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterAliasedQuery(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitAliasedQuery(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitAliasedQuery(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class TableNameContext extends RelationPrimaryContext {
        public TableNameContext(RelationPrimaryContext ctx) {
            copyFrom(ctx);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TableAliasContext tableAlias() {
            return getRuleContext(TableAliasContext.class, 0);
        }

        public TemporalClauseContext temporalClause() {
            return getRuleContext(TemporalClauseContext.class, 0);
        }

        public SampleContext sample() {
            return getRuleContext(SampleContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterTableName(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitTableName(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitTableName(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class InlineTableContext extends ParserRuleContext {
        public InlineTableContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode VALUES() {
            return getToken(SqlBaseParser.VALUES, 0);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public TableAliasContext tableAlias() {
            return getRuleContext(TableAliasContext.class, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_inlineTable;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterInlineTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitInlineTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitInlineTable(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class FunctionTableContext extends ParserRuleContext {
        public FunctionNameContext funcName;

        public FunctionTableContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public TableAliasContext tableAlias() {
            return getRuleContext(TableAliasContext.class, 0);
        }

        public FunctionNameContext functionName() {
            return getRuleContext(FunctionNameContext.class, 0);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_functionTable;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterFunctionTable(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitFunctionTable(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitFunctionTable(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class TableAliasContext extends ParserRuleContext {
        public TableAliasContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public StrictIdentifierContext strictIdentifier() {
            return getRuleContext(StrictIdentifierContext.class, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public IdentifierListContext identifierList() {
            return getRuleContext(IdentifierListContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_tableAlias;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterTableAlias(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitTableAlias(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitTableAlias(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class RowFormatContext extends ParserRuleContext {
        public RowFormatContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public RowFormatContext() {
        }

        @Override
        public int getRuleIndex() {
            return RULE_rowFormat;
        }

        public void copyFrom(RowFormatContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class RowFormatSerdeContext extends RowFormatContext {
        public Token name;
        public PropertyListContext props;

        public RowFormatSerdeContext(RowFormatContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode ROW() {
            return getToken(SqlBaseParser.ROW, 0);
        }

        public TerminalNode FORMAT() {
            return getToken(SqlBaseParser.FORMAT, 0);
        }

        public TerminalNode SERDE() {
            return getToken(SqlBaseParser.SERDE, 0);
        }

        public TerminalNode STRING() {
            return getToken(SqlBaseParser.STRING, 0);
        }

        public TerminalNode WITH() {
            return getToken(SqlBaseParser.WITH, 0);
        }

        public TerminalNode SERDEPROPERTIES() {
            return getToken(SqlBaseParser.SERDEPROPERTIES, 0);
        }

        public PropertyListContext propertyList() {
            return getRuleContext(PropertyListContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterRowFormatSerde(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitRowFormatSerde(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitRowFormatSerde(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class RowFormatDelimitedContext extends RowFormatContext {
        public Token fieldsTerminatedBy;
        public Token escapedBy;
        public Token collectionItemsTerminatedBy;
        public Token keysTerminatedBy;
        public Token linesSeparatedBy;
        public Token nullDefinedAs;

        public RowFormatDelimitedContext(RowFormatContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode ROW() {
            return getToken(SqlBaseParser.ROW, 0);
        }

        public TerminalNode FORMAT() {
            return getToken(SqlBaseParser.FORMAT, 0);
        }

        public TerminalNode DELIMITED() {
            return getToken(SqlBaseParser.DELIMITED, 0);
        }

        public TerminalNode FIELDS() {
            return getToken(SqlBaseParser.FIELDS, 0);
        }

        public List<TerminalNode> TERMINATED() {
            return getTokens(SqlBaseParser.TERMINATED);
        }

        public TerminalNode TERMINATED(int i) {
            return getToken(SqlBaseParser.TERMINATED, i);
        }

        public List<TerminalNode> BY() {
            return getTokens(SqlBaseParser.BY);
        }

        public TerminalNode BY(int i) {
            return getToken(SqlBaseParser.BY, i);
        }

        public TerminalNode COLLECTION() {
            return getToken(SqlBaseParser.COLLECTION, 0);
        }

        public TerminalNode ITEMS() {
            return getToken(SqlBaseParser.ITEMS, 0);
        }

        public TerminalNode MAP() {
            return getToken(SqlBaseParser.MAP, 0);
        }

        public TerminalNode KEYS() {
            return getToken(SqlBaseParser.KEYS, 0);
        }

        public TerminalNode LINES() {
            return getToken(SqlBaseParser.LINES, 0);
        }

        public TerminalNode NULL() {
            return getToken(SqlBaseParser.NULL, 0);
        }

        public TerminalNode DEFINED() {
            return getToken(SqlBaseParser.DEFINED, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public List<TerminalNode> STRING() {
            return getTokens(SqlBaseParser.STRING);
        }

        public TerminalNode STRING(int i) {
            return getToken(SqlBaseParser.STRING, i);
        }

        public TerminalNode ESCAPED() {
            return getToken(SqlBaseParser.ESCAPED, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterRowFormatDelimited(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitRowFormatDelimited(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitRowFormatDelimited(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class MultipartIdentifierListContext extends ParserRuleContext {
        public MultipartIdentifierListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<MultipartIdentifierContext> multipartIdentifier() {
            return getRuleContexts(MultipartIdentifierContext.class);
        }

        public MultipartIdentifierContext multipartIdentifier(int i) {
            return getRuleContext(MultipartIdentifierContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_multipartIdentifierList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterMultipartIdentifierList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitMultipartIdentifierList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitMultipartIdentifierList(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class MultipartIdentifierContext extends ParserRuleContext {
        public ErrorCapturingIdentifierContext errorCapturingIdentifier;
        public List<ErrorCapturingIdentifierContext> parts = new ArrayList<ErrorCapturingIdentifierContext>();

        public MultipartIdentifierContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<ErrorCapturingIdentifierContext> errorCapturingIdentifier() {
            return getRuleContexts(ErrorCapturingIdentifierContext.class);
        }

        public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
            return getRuleContext(ErrorCapturingIdentifierContext.class, i);
        }

        public List<TerminalNode> DOT() {
            return getTokens(SqlBaseParser.DOT);
        }

        public TerminalNode DOT(int i) {
            return getToken(SqlBaseParser.DOT, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_multipartIdentifier;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterMultipartIdentifier(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitMultipartIdentifier(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitMultipartIdentifier(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class MultipartIdentifierPropertyListContext extends ParserRuleContext {
        public MultipartIdentifierPropertyListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<MultipartIdentifierPropertyContext> multipartIdentifierProperty() {
            return getRuleContexts(MultipartIdentifierPropertyContext.class);
        }

        public MultipartIdentifierPropertyContext multipartIdentifierProperty(int i) {
            return getRuleContext(MultipartIdentifierPropertyContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_multipartIdentifierPropertyList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterMultipartIdentifierPropertyList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitMultipartIdentifierPropertyList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitMultipartIdentifierPropertyList(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class MultipartIdentifierPropertyContext extends ParserRuleContext {
        public PropertyListContext options;

        public MultipartIdentifierPropertyContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode OPTIONS() {
            return getToken(SqlBaseParser.OPTIONS, 0);
        }

        public PropertyListContext propertyList() {
            return getRuleContext(PropertyListContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_multipartIdentifierProperty;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterMultipartIdentifierProperty(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitMultipartIdentifierProperty(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitMultipartIdentifierProperty(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class TableIdentifierContext extends ParserRuleContext {
        public ErrorCapturingIdentifierContext db;
        public ErrorCapturingIdentifierContext table;

        public TableIdentifierContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<ErrorCapturingIdentifierContext> errorCapturingIdentifier() {
            return getRuleContexts(ErrorCapturingIdentifierContext.class);
        }

        public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
            return getRuleContext(ErrorCapturingIdentifierContext.class, i);
        }

        public TerminalNode DOT() {
            return getToken(SqlBaseParser.DOT, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_tableIdentifier;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterTableIdentifier(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitTableIdentifier(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitTableIdentifier(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class FunctionIdentifierContext extends ParserRuleContext {
        public ErrorCapturingIdentifierContext db;
        public ErrorCapturingIdentifierContext function;

        public FunctionIdentifierContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<ErrorCapturingIdentifierContext> errorCapturingIdentifier() {
            return getRuleContexts(ErrorCapturingIdentifierContext.class);
        }

        public ErrorCapturingIdentifierContext errorCapturingIdentifier(int i) {
            return getRuleContext(ErrorCapturingIdentifierContext.class, i);
        }

        public TerminalNode DOT() {
            return getToken(SqlBaseParser.DOT, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_functionIdentifier;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterFunctionIdentifier(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitFunctionIdentifier(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitFunctionIdentifier(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class NamedExpressionContext extends ParserRuleContext {
        public ErrorCapturingIdentifierContext name;

        public NamedExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public IdentifierListContext identifierList() {
            return getRuleContext(IdentifierListContext.class, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
            return getRuleContext(ErrorCapturingIdentifierContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_namedExpression;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterNamedExpression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitNamedExpression(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitNamedExpression(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class NamedExpressionSeqContext extends ParserRuleContext {
        public NamedExpressionSeqContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<NamedExpressionContext> namedExpression() {
            return getRuleContexts(NamedExpressionContext.class);
        }

        public NamedExpressionContext namedExpression(int i) {
            return getRuleContext(NamedExpressionContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_namedExpressionSeq;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterNamedExpressionSeq(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitNamedExpressionSeq(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitNamedExpressionSeq(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class PartitionFieldListContext extends ParserRuleContext {
        public PartitionFieldContext partitionField;
        public List<PartitionFieldContext> fields = new ArrayList<PartitionFieldContext>();

        public PartitionFieldListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<PartitionFieldContext> partitionField() {
            return getRuleContexts(PartitionFieldContext.class);
        }

        public PartitionFieldContext partitionField(int i) {
            return getRuleContext(PartitionFieldContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_partitionFieldList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterPartitionFieldList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitPartitionFieldList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitPartitionFieldList(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class PartitionFieldContext extends ParserRuleContext {
        public PartitionFieldContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public PartitionFieldContext() {
        }

        @Override
        public int getRuleIndex() {
            return RULE_partitionField;
        }

        public void copyFrom(PartitionFieldContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class PartitionColumnContext extends PartitionFieldContext {
        public PartitionColumnContext(PartitionFieldContext ctx) {
            copyFrom(ctx);
        }

        public ColTypeContext colType() {
            return getRuleContext(ColTypeContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterPartitionColumn(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitPartitionColumn(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitPartitionColumn(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class PartitionTransformContext extends PartitionFieldContext {
        public PartitionTransformContext(PartitionFieldContext ctx) {
            copyFrom(ctx);
        }

        public TransformContext transform() {
            return getRuleContext(TransformContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterPartitionTransform(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitPartitionTransform(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitPartitionTransform(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class TransformContext extends ParserRuleContext {
        public TransformContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TransformContext() {
        }

        @Override
        public int getRuleIndex() {
            return RULE_transform;
        }

        public void copyFrom(TransformContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class IdentityTransformContext extends TransformContext {
        public IdentityTransformContext(TransformContext ctx) {
            copyFrom(ctx);
        }

        public QualifiedNameContext qualifiedName() {
            return getRuleContext(QualifiedNameContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterIdentityTransform(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitIdentityTransform(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitIdentityTransform(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ApplyTransformContext extends TransformContext {
        public IdentifierContext transformName;
        public TransformArgumentContext transformArgument;
        public List<TransformArgumentContext> argument = new ArrayList<TransformArgumentContext>();

        public ApplyTransformContext(TransformContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public List<TransformArgumentContext> transformArgument() {
            return getRuleContexts(TransformArgumentContext.class);
        }

        public TransformArgumentContext transformArgument(int i) {
            return getRuleContext(TransformArgumentContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterApplyTransform(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitApplyTransform(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitApplyTransform(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class TransformArgumentContext extends ParserRuleContext {
        public TransformArgumentContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public QualifiedNameContext qualifiedName() {
            return getRuleContext(QualifiedNameContext.class, 0);
        }

        public ConstantContext constant() {
            return getRuleContext(ConstantContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_transformArgument;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterTransformArgument(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitTransformArgument(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitTransformArgument(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ExpressionContext extends ParserRuleContext {
        public ExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public BooleanExpressionContext booleanExpression() {
            return getRuleContext(BooleanExpressionContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expression;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterExpression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitExpression(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitExpression(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ExpressionSeqContext extends ParserRuleContext {
        public ExpressionSeqContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_expressionSeq;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterExpressionSeq(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitExpressionSeq(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitExpressionSeq(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class BooleanExpressionContext extends ParserRuleContext {
        public BooleanExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public BooleanExpressionContext() {
        }

        @Override
        public int getRuleIndex() {
            return RULE_booleanExpression;
        }

        public void copyFrom(BooleanExpressionContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class LogicalNotContext extends BooleanExpressionContext {
        public LogicalNotContext(BooleanExpressionContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public BooleanExpressionContext booleanExpression() {
            return getRuleContext(BooleanExpressionContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterLogicalNot(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitLogicalNot(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitLogicalNot(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class PredicatedContext extends BooleanExpressionContext {
        public PredicatedContext(BooleanExpressionContext ctx) {
            copyFrom(ctx);
        }

        public ValueExpressionContext valueExpression() {
            return getRuleContext(ValueExpressionContext.class, 0);
        }

        public PredicateContext predicate() {
            return getRuleContext(PredicateContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterPredicated(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitPredicated(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitPredicated(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ExistsContext extends BooleanExpressionContext {
        public ExistsContext(BooleanExpressionContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public QueryContext query() {
            return getRuleContext(QueryContext.class, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterExists(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitExists(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitExists(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class LogicalBinaryContext extends BooleanExpressionContext {
        public BooleanExpressionContext left;
        public Token operator;
        public BooleanExpressionContext right;

        public LogicalBinaryContext(BooleanExpressionContext ctx) {
            copyFrom(ctx);
        }

        public List<BooleanExpressionContext> booleanExpression() {
            return getRuleContexts(BooleanExpressionContext.class);
        }

        public BooleanExpressionContext booleanExpression(int i) {
            return getRuleContext(BooleanExpressionContext.class, i);
        }

        public TerminalNode AND() {
            return getToken(SqlBaseParser.AND, 0);
        }

        public TerminalNode OR() {
            return getToken(SqlBaseParser.OR, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterLogicalBinary(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitLogicalBinary(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitLogicalBinary(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class PredicateContext extends ParserRuleContext {
        public Token kind;
        public ValueExpressionContext lower;
        public ValueExpressionContext upper;
        public ValueExpressionContext pattern;
        public Token quantifier;
        public Token escapeChar;
        public ValueExpressionContext right;

        public PredicateContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode AND() {
            return getToken(SqlBaseParser.AND, 0);
        }

        public TerminalNode BETWEEN() {
            return getToken(SqlBaseParser.BETWEEN, 0);
        }

        public List<ValueExpressionContext> valueExpression() {
            return getRuleContexts(ValueExpressionContext.class);
        }

        public ValueExpressionContext valueExpression(int i) {
            return getRuleContext(ValueExpressionContext.class, i);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public TerminalNode IN() {
            return getToken(SqlBaseParser.IN, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public QueryContext query() {
            return getRuleContext(QueryContext.class, 0);
        }

        public TerminalNode RLIKE() {
            return getToken(SqlBaseParser.RLIKE, 0);
        }

        public TerminalNode LIKE() {
            return getToken(SqlBaseParser.LIKE, 0);
        }

        public TerminalNode ILIKE() {
            return getToken(SqlBaseParser.ILIKE, 0);
        }

        public TerminalNode ANY() {
            return getToken(SqlBaseParser.ANY, 0);
        }

        public TerminalNode SOME() {
            return getToken(SqlBaseParser.SOME, 0);
        }

        public TerminalNode ALL() {
            return getToken(SqlBaseParser.ALL, 0);
        }

        public TerminalNode ESCAPE() {
            return getToken(SqlBaseParser.ESCAPE, 0);
        }

        public TerminalNode STRING() {
            return getToken(SqlBaseParser.STRING, 0);
        }

        public TerminalNode IS() {
            return getToken(SqlBaseParser.IS, 0);
        }

        public TerminalNode NULL() {
            return getToken(SqlBaseParser.NULL, 0);
        }

        public TerminalNode TRUE() {
            return getToken(SqlBaseParser.TRUE, 0);
        }

        public TerminalNode FALSE() {
            return getToken(SqlBaseParser.FALSE, 0);
        }

        public TerminalNode UNKNOWN() {
            return getToken(SqlBaseParser.UNKNOWN, 0);
        }

        public TerminalNode FROM() {
            return getToken(SqlBaseParser.FROM, 0);
        }

        public TerminalNode DISTINCT() {
            return getToken(SqlBaseParser.DISTINCT, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_predicate;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterPredicate(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitPredicate(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitPredicate(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ValueExpressionContext extends ParserRuleContext {
        public ValueExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public ValueExpressionContext() {
        }

        @Override
        public int getRuleIndex() {
            return RULE_valueExpression;
        }

        public void copyFrom(ValueExpressionContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class ValueExpressionDefaultContext extends ValueExpressionContext {
        public ValueExpressionDefaultContext(ValueExpressionContext ctx) {
            copyFrom(ctx);
        }

        public PrimaryExpressionContext primaryExpression() {
            return getRuleContext(PrimaryExpressionContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterValueExpressionDefault(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitValueExpressionDefault(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitValueExpressionDefault(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ComparisonContext extends ValueExpressionContext {
        public ValueExpressionContext left;
        public ValueExpressionContext right;

        public ComparisonContext(ValueExpressionContext ctx) {
            copyFrom(ctx);
        }

        public ComparisonOperatorContext comparisonOperator() {
            return getRuleContext(ComparisonOperatorContext.class, 0);
        }

        public List<ValueExpressionContext> valueExpression() {
            return getRuleContexts(ValueExpressionContext.class);
        }

        public ValueExpressionContext valueExpression(int i) {
            return getRuleContext(ValueExpressionContext.class, i);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterComparison(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitComparison(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitComparison(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ArithmeticBinaryContext extends ValueExpressionContext {
        public ValueExpressionContext left;
        public Token operator;
        public ValueExpressionContext right;

        public ArithmeticBinaryContext(ValueExpressionContext ctx) {
            copyFrom(ctx);
        }

        public List<ValueExpressionContext> valueExpression() {
            return getRuleContexts(ValueExpressionContext.class);
        }

        public ValueExpressionContext valueExpression(int i) {
            return getRuleContext(ValueExpressionContext.class, i);
        }

        public TerminalNode ASTERISK() {
            return getToken(SqlBaseParser.ASTERISK, 0);
        }

        public TerminalNode SLASH() {
            return getToken(SqlBaseParser.SLASH, 0);
        }

        public TerminalNode PERCENT() {
            return getToken(SqlBaseParser.PERCENT, 0);
        }

        public TerminalNode DIV() {
            return getToken(SqlBaseParser.DIV, 0);
        }

        public TerminalNode PLUS() {
            return getToken(SqlBaseParser.PLUS, 0);
        }

        public TerminalNode MINUS() {
            return getToken(SqlBaseParser.MINUS, 0);
        }

        public TerminalNode CONCAT_PIPE() {
            return getToken(SqlBaseParser.CONCAT_PIPE, 0);
        }

        public TerminalNode AMPERSAND() {
            return getToken(SqlBaseParser.AMPERSAND, 0);
        }

        public TerminalNode HAT() {
            return getToken(SqlBaseParser.HAT, 0);
        }

        public TerminalNode PIPE() {
            return getToken(SqlBaseParser.PIPE, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterArithmeticBinary(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitArithmeticBinary(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitArithmeticBinary(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ArithmeticUnaryContext extends ValueExpressionContext {
        public Token operator;

        public ArithmeticUnaryContext(ValueExpressionContext ctx) {
            copyFrom(ctx);
        }

        public ValueExpressionContext valueExpression() {
            return getRuleContext(ValueExpressionContext.class, 0);
        }

        public TerminalNode MINUS() {
            return getToken(SqlBaseParser.MINUS, 0);
        }

        public TerminalNode PLUS() {
            return getToken(SqlBaseParser.PLUS, 0);
        }

        public TerminalNode TILDE() {
            return getToken(SqlBaseParser.TILDE, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterArithmeticUnary(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitArithmeticUnary(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitArithmeticUnary(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class DatetimeUnitContext extends ParserRuleContext {
        public DatetimeUnitContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode YEAR() {
            return getToken(SqlBaseParser.YEAR, 0);
        }

        public TerminalNode QUARTER() {
            return getToken(SqlBaseParser.QUARTER, 0);
        }

        public TerminalNode MONTH() {
            return getToken(SqlBaseParser.MONTH, 0);
        }

        public TerminalNode WEEK() {
            return getToken(SqlBaseParser.WEEK, 0);
        }

        public TerminalNode DAY() {
            return getToken(SqlBaseParser.DAY, 0);
        }

        public TerminalNode DAYOFYEAR() {
            return getToken(SqlBaseParser.DAYOFYEAR, 0);
        }

        public TerminalNode HOUR() {
            return getToken(SqlBaseParser.HOUR, 0);
        }

        public TerminalNode MINUTE() {
            return getToken(SqlBaseParser.MINUTE, 0);
        }

        public TerminalNode SECOND() {
            return getToken(SqlBaseParser.SECOND, 0);
        }

        public TerminalNode MILLISECOND() {
            return getToken(SqlBaseParser.MILLISECOND, 0);
        }

        public TerminalNode MICROSECOND() {
            return getToken(SqlBaseParser.MICROSECOND, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_datetimeUnit;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterDatetimeUnit(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitDatetimeUnit(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDatetimeUnit(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class PrimaryExpressionContext extends ParserRuleContext {
        public PrimaryExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public PrimaryExpressionContext() {
        }

        @Override
        public int getRuleIndex() {
            return RULE_primaryExpression;
        }

        public void copyFrom(PrimaryExpressionContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class StructContext extends PrimaryExpressionContext {
        public NamedExpressionContext namedExpression;
        public List<NamedExpressionContext> argument = new ArrayList<NamedExpressionContext>();

        public StructContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode STRUCT() {
            return getToken(SqlBaseParser.STRUCT, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<NamedExpressionContext> namedExpression() {
            return getRuleContexts(NamedExpressionContext.class);
        }

        public NamedExpressionContext namedExpression(int i) {
            return getRuleContext(NamedExpressionContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterStruct(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitStruct(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitStruct(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class DereferenceContext extends PrimaryExpressionContext {
        public PrimaryExpressionContext base;
        public IdentifierContext fieldName;

        public DereferenceContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode DOT() {
            return getToken(SqlBaseParser.DOT, 0);
        }

        public PrimaryExpressionContext primaryExpression() {
            return getRuleContext(PrimaryExpressionContext.class, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterDereference(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitDereference(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDereference(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class TimestampaddContext extends PrimaryExpressionContext {
        public Token name;
        public DatetimeUnitContext unit;
        public ValueExpressionContext unitsAmount;
        public ValueExpressionContext timestamp;

        public TimestampaddContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public DatetimeUnitContext datetimeUnit() {
            return getRuleContext(DatetimeUnitContext.class, 0);
        }

        public List<ValueExpressionContext> valueExpression() {
            return getRuleContexts(ValueExpressionContext.class);
        }

        public ValueExpressionContext valueExpression(int i) {
            return getRuleContext(ValueExpressionContext.class, i);
        }

        public TerminalNode TIMESTAMPADD() {
            return getToken(SqlBaseParser.TIMESTAMPADD, 0);
        }

        public TerminalNode DATEADD() {
            return getToken(SqlBaseParser.DATEADD, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterTimestampadd(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitTimestampadd(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitTimestampadd(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class SubstringContext extends PrimaryExpressionContext {
        public ValueExpressionContext str;
        public ValueExpressionContext pos;
        public ValueExpressionContext len;

        public SubstringContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public TerminalNode SUBSTR() {
            return getToken(SqlBaseParser.SUBSTR, 0);
        }

        public TerminalNode SUBSTRING() {
            return getToken(SqlBaseParser.SUBSTRING, 0);
        }

        public List<ValueExpressionContext> valueExpression() {
            return getRuleContexts(ValueExpressionContext.class);
        }

        public ValueExpressionContext valueExpression(int i) {
            return getRuleContext(ValueExpressionContext.class, i);
        }

        public TerminalNode FROM() {
            return getToken(SqlBaseParser.FROM, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public TerminalNode FOR() {
            return getToken(SqlBaseParser.FOR, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSubstring(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSubstring(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSubstring(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class CastContext extends PrimaryExpressionContext {
        public Token name;

        public CastContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public DataTypeContext dataType() {
            return getRuleContext(DataTypeContext.class, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public TerminalNode CAST() {
            return getToken(SqlBaseParser.CAST, 0);
        }

        public TerminalNode TRY_CAST() {
            return getToken(SqlBaseParser.TRY_CAST, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterCast(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitCast(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCast(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class LambdaContext extends PrimaryExpressionContext {
        public LambdaContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        public List<IdentifierContext> identifier() {
            return getRuleContexts(IdentifierContext.class);
        }

        public IdentifierContext identifier(int i) {
            return getRuleContext(IdentifierContext.class, i);
        }

        public TerminalNode ARROW() {
            return getToken(SqlBaseParser.ARROW, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterLambda(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitLambda(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitLambda(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ParenthesizedExpressionContext extends PrimaryExpressionContext {
        public ParenthesizedExpressionContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterParenthesizedExpression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitParenthesizedExpression(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitParenthesizedExpression(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class Any_valueContext extends PrimaryExpressionContext {
        public Any_valueContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode ANY_VALUE() {
            return getToken(SqlBaseParser.ANY_VALUE, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public TerminalNode IGNORE() {
            return getToken(SqlBaseParser.IGNORE, 0);
        }

        public TerminalNode NULLS() {
            return getToken(SqlBaseParser.NULLS, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterAny_value(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitAny_value(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitAny_value(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class TrimContext extends PrimaryExpressionContext {
        public Token trimOption;
        public ValueExpressionContext trimStr;
        public ValueExpressionContext srcStr;

        public TrimContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode TRIM() {
            return getToken(SqlBaseParser.TRIM, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode FROM() {
            return getToken(SqlBaseParser.FROM, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<ValueExpressionContext> valueExpression() {
            return getRuleContexts(ValueExpressionContext.class);
        }

        public ValueExpressionContext valueExpression(int i) {
            return getRuleContext(ValueExpressionContext.class, i);
        }

        public TerminalNode BOTH() {
            return getToken(SqlBaseParser.BOTH, 0);
        }

        public TerminalNode LEADING() {
            return getToken(SqlBaseParser.LEADING, 0);
        }

        public TerminalNode TRAILING() {
            return getToken(SqlBaseParser.TRAILING, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterTrim(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitTrim(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitTrim(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class SimpleCaseContext extends PrimaryExpressionContext {
        public ExpressionContext value;
        public ExpressionContext elseExpression;

        public SimpleCaseContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode CASE() {
            return getToken(SqlBaseParser.CASE, 0);
        }

        public TerminalNode END() {
            return getToken(SqlBaseParser.END, 0);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public List<WhenClauseContext> whenClause() {
            return getRuleContexts(WhenClauseContext.class);
        }

        public WhenClauseContext whenClause(int i) {
            return getRuleContext(WhenClauseContext.class, i);
        }

        public TerminalNode ELSE() {
            return getToken(SqlBaseParser.ELSE, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSimpleCase(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSimpleCase(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSimpleCase(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class CurrentLikeContext extends PrimaryExpressionContext {
        public Token name;

        public CurrentLikeContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode CURRENT_DATE() {
            return getToken(SqlBaseParser.CURRENT_DATE, 0);
        }

        public TerminalNode CURRENT_TIMESTAMP() {
            return getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0);
        }

        public TerminalNode CURRENT_USER() {
            return getToken(SqlBaseParser.CURRENT_USER, 0);
        }

        public TerminalNode USER() {
            return getToken(SqlBaseParser.USER, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterCurrentLike(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitCurrentLike(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCurrentLike(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ColumnReferenceContext extends PrimaryExpressionContext {
        public ColumnReferenceContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterColumnReference(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitColumnReference(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitColumnReference(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class RowConstructorContext extends PrimaryExpressionContext {
        public RowConstructorContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public List<NamedExpressionContext> namedExpression() {
            return getRuleContexts(NamedExpressionContext.class);
        }

        public NamedExpressionContext namedExpression(int i) {
            return getRuleContext(NamedExpressionContext.class, i);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterRowConstructor(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitRowConstructor(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitRowConstructor(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class LastContext extends PrimaryExpressionContext {
        public LastContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode LAST() {
            return getToken(SqlBaseParser.LAST, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public TerminalNode IGNORE() {
            return getToken(SqlBaseParser.IGNORE, 0);
        }

        public TerminalNode NULLS() {
            return getToken(SqlBaseParser.NULLS, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterLast(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitLast(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitLast(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class StarContext extends PrimaryExpressionContext {
        public StarContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode ASTERISK() {
            return getToken(SqlBaseParser.ASTERISK, 0);
        }

        public QualifiedNameContext qualifiedName() {
            return getRuleContext(QualifiedNameContext.class, 0);
        }

        public TerminalNode DOT() {
            return getToken(SqlBaseParser.DOT, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterStar(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitStar(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitStar(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class OverlayContext extends PrimaryExpressionContext {
        public ValueExpressionContext input;
        public ValueExpressionContext replace;
        public ValueExpressionContext position;
        public ValueExpressionContext length;

        public OverlayContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode OVERLAY() {
            return getToken(SqlBaseParser.OVERLAY, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode PLACING() {
            return getToken(SqlBaseParser.PLACING, 0);
        }

        public TerminalNode FROM() {
            return getToken(SqlBaseParser.FROM, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<ValueExpressionContext> valueExpression() {
            return getRuleContexts(ValueExpressionContext.class);
        }

        public ValueExpressionContext valueExpression(int i) {
            return getRuleContext(ValueExpressionContext.class, i);
        }

        public TerminalNode FOR() {
            return getToken(SqlBaseParser.FOR, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterOverlay(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitOverlay(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitOverlay(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class SubscriptContext extends PrimaryExpressionContext {
        public PrimaryExpressionContext value;
        public ValueExpressionContext index;

        public SubscriptContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode LEFT_BRACKET() {
            return getToken(SqlBaseParser.LEFT_BRACKET, 0);
        }

        public TerminalNode RIGHT_BRACKET() {
            return getToken(SqlBaseParser.RIGHT_BRACKET, 0);
        }

        public PrimaryExpressionContext primaryExpression() {
            return getRuleContext(PrimaryExpressionContext.class, 0);
        }

        public ValueExpressionContext valueExpression() {
            return getRuleContext(ValueExpressionContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSubscript(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSubscript(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSubscript(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class TimestampdiffContext extends PrimaryExpressionContext {
        public Token name;
        public DatetimeUnitContext unit;
        public ValueExpressionContext startTimestamp;
        public ValueExpressionContext endTimestamp;

        public TimestampdiffContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public DatetimeUnitContext datetimeUnit() {
            return getRuleContext(DatetimeUnitContext.class, 0);
        }

        public List<ValueExpressionContext> valueExpression() {
            return getRuleContexts(ValueExpressionContext.class);
        }

        public ValueExpressionContext valueExpression(int i) {
            return getRuleContext(ValueExpressionContext.class, i);
        }

        public TerminalNode TIMESTAMPDIFF() {
            return getToken(SqlBaseParser.TIMESTAMPDIFF, 0);
        }

        public TerminalNode DATEDIFF() {
            return getToken(SqlBaseParser.DATEDIFF, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterTimestampdiff(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitTimestampdiff(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitTimestampdiff(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class SubqueryExpressionContext extends PrimaryExpressionContext {
        public SubqueryExpressionContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public QueryContext query() {
            return getRuleContext(QueryContext.class, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterSubqueryExpression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitSubqueryExpression(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSubqueryExpression(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ConstantDefaultContext extends PrimaryExpressionContext {
        public ConstantDefaultContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        public ConstantContext constant() {
            return getRuleContext(ConstantContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterConstantDefault(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitConstantDefault(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitConstantDefault(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ExtractContext extends PrimaryExpressionContext {
        public IdentifierContext field;
        public ValueExpressionContext source;

        public ExtractContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode EXTRACT() {
            return getToken(SqlBaseParser.EXTRACT, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode FROM() {
            return getToken(SqlBaseParser.FROM, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public ValueExpressionContext valueExpression() {
            return getRuleContext(ValueExpressionContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterExtract(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitExtract(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitExtract(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class PercentileContext extends PrimaryExpressionContext {
        public Token name;
        public ValueExpressionContext percentage;
        public BooleanExpressionContext where;

        public PercentileContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        public List<TerminalNode> LEFT_PAREN() {
            return getTokens(SqlBaseParser.LEFT_PAREN);
        }

        public TerminalNode LEFT_PAREN(int i) {
            return getToken(SqlBaseParser.LEFT_PAREN, i);
        }

        public List<TerminalNode> RIGHT_PAREN() {
            return getTokens(SqlBaseParser.RIGHT_PAREN);
        }

        public TerminalNode RIGHT_PAREN(int i) {
            return getToken(SqlBaseParser.RIGHT_PAREN, i);
        }

        public TerminalNode WITHIN() {
            return getToken(SqlBaseParser.WITHIN, 0);
        }

        public TerminalNode GROUP() {
            return getToken(SqlBaseParser.GROUP, 0);
        }

        public TerminalNode ORDER() {
            return getToken(SqlBaseParser.ORDER, 0);
        }

        public TerminalNode BY() {
            return getToken(SqlBaseParser.BY, 0);
        }

        public SortItemContext sortItem() {
            return getRuleContext(SortItemContext.class, 0);
        }

        public ValueExpressionContext valueExpression() {
            return getRuleContext(ValueExpressionContext.class, 0);
        }

        public TerminalNode PERCENTILE_CONT() {
            return getToken(SqlBaseParser.PERCENTILE_CONT, 0);
        }

        public TerminalNode PERCENTILE_DISC() {
            return getToken(SqlBaseParser.PERCENTILE_DISC, 0);
        }

        public TerminalNode FILTER() {
            return getToken(SqlBaseParser.FILTER, 0);
        }

        public TerminalNode WHERE() {
            return getToken(SqlBaseParser.WHERE, 0);
        }

        public TerminalNode OVER() {
            return getToken(SqlBaseParser.OVER, 0);
        }

        public WindowSpecContext windowSpec() {
            return getRuleContext(WindowSpecContext.class, 0);
        }

        public BooleanExpressionContext booleanExpression() {
            return getRuleContext(BooleanExpressionContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterPercentile(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitPercentile(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitPercentile(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class FunctionCallContext extends PrimaryExpressionContext {
        public ExpressionContext expression;
        public List<ExpressionContext> argument = new ArrayList<ExpressionContext>();
        public BooleanExpressionContext where;
        public Token nullsOption;

        public FunctionCallContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        public FunctionNameContext functionName() {
            return getRuleContext(FunctionNameContext.class, 0);
        }

        public List<TerminalNode> LEFT_PAREN() {
            return getTokens(SqlBaseParser.LEFT_PAREN);
        }

        public TerminalNode LEFT_PAREN(int i) {
            return getToken(SqlBaseParser.LEFT_PAREN, i);
        }

        public List<TerminalNode> RIGHT_PAREN() {
            return getTokens(SqlBaseParser.RIGHT_PAREN);
        }

        public TerminalNode RIGHT_PAREN(int i) {
            return getToken(SqlBaseParser.RIGHT_PAREN, i);
        }

        public TerminalNode FILTER() {
            return getToken(SqlBaseParser.FILTER, 0);
        }

        public TerminalNode WHERE() {
            return getToken(SqlBaseParser.WHERE, 0);
        }

        public TerminalNode NULLS() {
            return getToken(SqlBaseParser.NULLS, 0);
        }

        public TerminalNode OVER() {
            return getToken(SqlBaseParser.OVER, 0);
        }

        public WindowSpecContext windowSpec() {
            return getRuleContext(WindowSpecContext.class, 0);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public BooleanExpressionContext booleanExpression() {
            return getRuleContext(BooleanExpressionContext.class, 0);
        }

        public TerminalNode IGNORE() {
            return getToken(SqlBaseParser.IGNORE, 0);
        }

        public TerminalNode RESPECT() {
            return getToken(SqlBaseParser.RESPECT, 0);
        }

        public SetQuantifierContext setQuantifier() {
            return getRuleContext(SetQuantifierContext.class, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterFunctionCall(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitFunctionCall(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitFunctionCall(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class SearchedCaseContext extends PrimaryExpressionContext {
        public ExpressionContext elseExpression;

        public SearchedCaseContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode CASE() {
            return getToken(SqlBaseParser.CASE, 0);
        }

        public TerminalNode END() {
            return getToken(SqlBaseParser.END, 0);
        }

        public List<WhenClauseContext> whenClause() {
            return getRuleContexts(WhenClauseContext.class);
        }

        public WhenClauseContext whenClause(int i) {
            return getRuleContext(WhenClauseContext.class, i);
        }

        public TerminalNode ELSE() {
            return getToken(SqlBaseParser.ELSE, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterSearchedCase(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSearchedCase(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSearchedCase(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class PositionContext extends PrimaryExpressionContext {
        public ValueExpressionContext substr;
        public ValueExpressionContext str;

        public PositionContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode POSITION() {
            return getToken(SqlBaseParser.POSITION, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode IN() {
            return getToken(SqlBaseParser.IN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<ValueExpressionContext> valueExpression() {
            return getRuleContexts(ValueExpressionContext.class);
        }

        public ValueExpressionContext valueExpression(int i) {
            return getRuleContext(ValueExpressionContext.class, i);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterPosition(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitPosition(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitPosition(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class FirstContext extends PrimaryExpressionContext {
        public FirstContext(PrimaryExpressionContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode FIRST() {
            return getToken(SqlBaseParser.FIRST, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public TerminalNode IGNORE() {
            return getToken(SqlBaseParser.IGNORE, 0);
        }

        public TerminalNode NULLS() {
            return getToken(SqlBaseParser.NULLS, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterFirst(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitFirst(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitFirst(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ConstantContext extends ParserRuleContext {
        public ConstantContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public ConstantContext() {
        }

        @Override
        public int getRuleIndex() {
            return RULE_constant;
        }

        public void copyFrom(ConstantContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class NullLiteralContext extends ConstantContext {
        public NullLiteralContext(ConstantContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode NULL() {
            return getToken(SqlBaseParser.NULL, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterNullLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitNullLiteral(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitNullLiteral(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class StringLiteralContext extends ConstantContext {
        public StringLiteralContext(ConstantContext ctx) {
            copyFrom(ctx);
        }

        public List<TerminalNode> STRING() {
            return getTokens(SqlBaseParser.STRING);
        }

        public TerminalNode STRING(int i) {
            return getToken(SqlBaseParser.STRING, i);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterStringLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitStringLiteral(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitStringLiteral(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class TypeConstructorContext extends ConstantContext {
        public TypeConstructorContext(ConstantContext ctx) {
            copyFrom(ctx);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode STRING() {
            return getToken(SqlBaseParser.STRING, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterTypeConstructor(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitTypeConstructor(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitTypeConstructor(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class IntervalLiteralContext extends ConstantContext {
        public IntervalLiteralContext(ConstantContext ctx) {
            copyFrom(ctx);
        }

        public IntervalContext interval() {
            return getRuleContext(IntervalContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterIntervalLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitIntervalLiteral(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitIntervalLiteral(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class NumericLiteralContext extends ConstantContext {
        public NumericLiteralContext(ConstantContext ctx) {
            copyFrom(ctx);
        }

        public NumberContext number() {
            return getRuleContext(NumberContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterNumericLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitNumericLiteral(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitNumericLiteral(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class BooleanLiteralContext extends ConstantContext {
        public BooleanLiteralContext(ConstantContext ctx) {
            copyFrom(ctx);
        }

        public BooleanValueContext booleanValue() {
            return getRuleContext(BooleanValueContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterBooleanLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitBooleanLiteral(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitBooleanLiteral(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ComparisonOperatorContext extends ParserRuleContext {
        public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode EQ() {
            return getToken(SqlBaseParser.EQ, 0);
        }

        public TerminalNode NEQ() {
            return getToken(SqlBaseParser.NEQ, 0);
        }

        public TerminalNode NEQJ() {
            return getToken(SqlBaseParser.NEQJ, 0);
        }

        public TerminalNode LT() {
            return getToken(SqlBaseParser.LT, 0);
        }

        public TerminalNode LTE() {
            return getToken(SqlBaseParser.LTE, 0);
        }

        public TerminalNode GT() {
            return getToken(SqlBaseParser.GT, 0);
        }

        public TerminalNode GTE() {
            return getToken(SqlBaseParser.GTE, 0);
        }

        public TerminalNode NSEQ() {
            return getToken(SqlBaseParser.NSEQ, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_comparisonOperator;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterComparisonOperator(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitComparisonOperator(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitComparisonOperator(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ArithmeticOperatorContext extends ParserRuleContext {
        public ArithmeticOperatorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode PLUS() {
            return getToken(SqlBaseParser.PLUS, 0);
        }

        public TerminalNode MINUS() {
            return getToken(SqlBaseParser.MINUS, 0);
        }

        public TerminalNode ASTERISK() {
            return getToken(SqlBaseParser.ASTERISK, 0);
        }

        public TerminalNode SLASH() {
            return getToken(SqlBaseParser.SLASH, 0);
        }

        public TerminalNode PERCENT() {
            return getToken(SqlBaseParser.PERCENT, 0);
        }

        public TerminalNode DIV() {
            return getToken(SqlBaseParser.DIV, 0);
        }

        public TerminalNode TILDE() {
            return getToken(SqlBaseParser.TILDE, 0);
        }

        public TerminalNode AMPERSAND() {
            return getToken(SqlBaseParser.AMPERSAND, 0);
        }

        public TerminalNode PIPE() {
            return getToken(SqlBaseParser.PIPE, 0);
        }

        public TerminalNode CONCAT_PIPE() {
            return getToken(SqlBaseParser.CONCAT_PIPE, 0);
        }

        public TerminalNode HAT() {
            return getToken(SqlBaseParser.HAT, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_arithmeticOperator;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterArithmeticOperator(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitArithmeticOperator(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitArithmeticOperator(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class PredicateOperatorContext extends ParserRuleContext {
        public PredicateOperatorContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode OR() {
            return getToken(SqlBaseParser.OR, 0);
        }

        public TerminalNode AND() {
            return getToken(SqlBaseParser.AND, 0);
        }

        public TerminalNode IN() {
            return getToken(SqlBaseParser.IN, 0);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_predicateOperator;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterPredicateOperator(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitPredicateOperator(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitPredicateOperator(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class BooleanValueContext extends ParserRuleContext {
        public BooleanValueContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode TRUE() {
            return getToken(SqlBaseParser.TRUE, 0);
        }

        public TerminalNode FALSE() {
            return getToken(SqlBaseParser.FALSE, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_booleanValue;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterBooleanValue(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitBooleanValue(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitBooleanValue(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class IntervalContext extends ParserRuleContext {
        public IntervalContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode INTERVAL() {
            return getToken(SqlBaseParser.INTERVAL, 0);
        }

        public ErrorCapturingMultiUnitsIntervalContext errorCapturingMultiUnitsInterval() {
            return getRuleContext(ErrorCapturingMultiUnitsIntervalContext.class, 0);
        }

        public ErrorCapturingUnitToUnitIntervalContext errorCapturingUnitToUnitInterval() {
            return getRuleContext(ErrorCapturingUnitToUnitIntervalContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_interval;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterInterval(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitInterval(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitInterval(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ErrorCapturingMultiUnitsIntervalContext extends ParserRuleContext {
        public MultiUnitsIntervalContext body;

        public ErrorCapturingMultiUnitsIntervalContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public MultiUnitsIntervalContext multiUnitsInterval() {
            return getRuleContext(MultiUnitsIntervalContext.class, 0);
        }

        public UnitToUnitIntervalContext unitToUnitInterval() {
            return getRuleContext(UnitToUnitIntervalContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_errorCapturingMultiUnitsInterval;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterErrorCapturingMultiUnitsInterval(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitErrorCapturingMultiUnitsInterval(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitErrorCapturingMultiUnitsInterval(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class MultiUnitsIntervalContext extends ParserRuleContext {
        public IdentifierContext identifier;
        public List<IdentifierContext> unit = new ArrayList<IdentifierContext>();

        public MultiUnitsIntervalContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<IntervalValueContext> intervalValue() {
            return getRuleContexts(IntervalValueContext.class);
        }

        public IntervalValueContext intervalValue(int i) {
            return getRuleContext(IntervalValueContext.class, i);
        }

        public List<IdentifierContext> identifier() {
            return getRuleContexts(IdentifierContext.class);
        }

        public IdentifierContext identifier(int i) {
            return getRuleContext(IdentifierContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_multiUnitsInterval;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterMultiUnitsInterval(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitMultiUnitsInterval(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitMultiUnitsInterval(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ErrorCapturingUnitToUnitIntervalContext extends ParserRuleContext {
        public UnitToUnitIntervalContext body;
        public MultiUnitsIntervalContext error1;
        public UnitToUnitIntervalContext error2;

        public ErrorCapturingUnitToUnitIntervalContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<UnitToUnitIntervalContext> unitToUnitInterval() {
            return getRuleContexts(UnitToUnitIntervalContext.class);
        }

        public UnitToUnitIntervalContext unitToUnitInterval(int i) {
            return getRuleContext(UnitToUnitIntervalContext.class, i);
        }

        public MultiUnitsIntervalContext multiUnitsInterval() {
            return getRuleContext(MultiUnitsIntervalContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_errorCapturingUnitToUnitInterval;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterErrorCapturingUnitToUnitInterval(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitErrorCapturingUnitToUnitInterval(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitErrorCapturingUnitToUnitInterval(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class UnitToUnitIntervalContext extends ParserRuleContext {
        public IntervalValueContext value;
        public IdentifierContext from;
        public IdentifierContext to;

        public UnitToUnitIntervalContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode TO() {
            return getToken(SqlBaseParser.TO, 0);
        }

        public IntervalValueContext intervalValue() {
            return getRuleContext(IntervalValueContext.class, 0);
        }

        public List<IdentifierContext> identifier() {
            return getRuleContexts(IdentifierContext.class);
        }

        public IdentifierContext identifier(int i) {
            return getRuleContext(IdentifierContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_unitToUnitInterval;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterUnitToUnitInterval(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitUnitToUnitInterval(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitUnitToUnitInterval(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class IntervalValueContext extends ParserRuleContext {
        public IntervalValueContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode INTEGER_VALUE() {
            return getToken(SqlBaseParser.INTEGER_VALUE, 0);
        }

        public TerminalNode DECIMAL_VALUE() {
            return getToken(SqlBaseParser.DECIMAL_VALUE, 0);
        }

        public TerminalNode STRING() {
            return getToken(SqlBaseParser.STRING, 0);
        }

        public TerminalNode PLUS() {
            return getToken(SqlBaseParser.PLUS, 0);
        }

        public TerminalNode MINUS() {
            return getToken(SqlBaseParser.MINUS, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_intervalValue;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterIntervalValue(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitIntervalValue(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitIntervalValue(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ColPositionContext extends ParserRuleContext {
        public Token position;
        public ErrorCapturingIdentifierContext afterCol;

        public ColPositionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode FIRST() {
            return getToken(SqlBaseParser.FIRST, 0);
        }

        public TerminalNode AFTER() {
            return getToken(SqlBaseParser.AFTER, 0);
        }

        public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
            return getRuleContext(ErrorCapturingIdentifierContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_colPosition;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterColPosition(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitColPosition(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitColPosition(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class DataTypeContext extends ParserRuleContext {
        public DataTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public DataTypeContext() {
        }

        @Override
        public int getRuleIndex() {
            return RULE_dataType;
        }

        public void copyFrom(DataTypeContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class ComplexDataTypeContext extends DataTypeContext {
        public Token complex;

        public ComplexDataTypeContext(DataTypeContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode LT() {
            return getToken(SqlBaseParser.LT, 0);
        }

        public List<DataTypeContext> dataType() {
            return getRuleContexts(DataTypeContext.class);
        }

        public DataTypeContext dataType(int i) {
            return getRuleContext(DataTypeContext.class, i);
        }

        public TerminalNode GT() {
            return getToken(SqlBaseParser.GT, 0);
        }

        public TerminalNode ARRAY() {
            return getToken(SqlBaseParser.ARRAY, 0);
        }

        public TerminalNode COMMA() {
            return getToken(SqlBaseParser.COMMA, 0);
        }

        public TerminalNode MAP() {
            return getToken(SqlBaseParser.MAP, 0);
        }

        public TerminalNode STRUCT() {
            return getToken(SqlBaseParser.STRUCT, 0);
        }

        public TerminalNode NEQ() {
            return getToken(SqlBaseParser.NEQ, 0);
        }

        public ComplexColTypeListContext complexColTypeList() {
            return getRuleContext(ComplexColTypeListContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterComplexDataType(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitComplexDataType(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitComplexDataType(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class YearMonthIntervalDataTypeContext extends DataTypeContext {
        public Token from;
        public Token to;

        public YearMonthIntervalDataTypeContext(DataTypeContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode INTERVAL() {
            return getToken(SqlBaseParser.INTERVAL, 0);
        }

        public TerminalNode YEAR() {
            return getToken(SqlBaseParser.YEAR, 0);
        }

        public List<TerminalNode> MONTH() {
            return getTokens(SqlBaseParser.MONTH);
        }

        public TerminalNode MONTH(int i) {
            return getToken(SqlBaseParser.MONTH, i);
        }

        public TerminalNode TO() {
            return getToken(SqlBaseParser.TO, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterYearMonthIntervalDataType(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitYearMonthIntervalDataType(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitYearMonthIntervalDataType(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class DayTimeIntervalDataTypeContext extends DataTypeContext {
        public Token from;
        public Token to;

        public DayTimeIntervalDataTypeContext(DataTypeContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode INTERVAL() {
            return getToken(SqlBaseParser.INTERVAL, 0);
        }

        public TerminalNode DAY() {
            return getToken(SqlBaseParser.DAY, 0);
        }

        public List<TerminalNode> HOUR() {
            return getTokens(SqlBaseParser.HOUR);
        }

        public TerminalNode HOUR(int i) {
            return getToken(SqlBaseParser.HOUR, i);
        }

        public List<TerminalNode> MINUTE() {
            return getTokens(SqlBaseParser.MINUTE);
        }

        public TerminalNode MINUTE(int i) {
            return getToken(SqlBaseParser.MINUTE, i);
        }

        public List<TerminalNode> SECOND() {
            return getTokens(SqlBaseParser.SECOND);
        }

        public TerminalNode SECOND(int i) {
            return getToken(SqlBaseParser.SECOND, i);
        }

        public TerminalNode TO() {
            return getToken(SqlBaseParser.TO, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterDayTimeIntervalDataType(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitDayTimeIntervalDataType(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDayTimeIntervalDataType(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class PrimitiveDataTypeContext extends DataTypeContext {
        public PrimitiveDataTypeContext(DataTypeContext ctx) {
            copyFrom(ctx);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public List<TerminalNode> INTEGER_VALUE() {
            return getTokens(SqlBaseParser.INTEGER_VALUE);
        }

        public TerminalNode INTEGER_VALUE(int i) {
            return getToken(SqlBaseParser.INTEGER_VALUE, i);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterPrimitiveDataType(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitPrimitiveDataType(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitPrimitiveDataType(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class QualifiedColTypeWithPositionListContext extends ParserRuleContext {
        public QualifiedColTypeWithPositionListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<QualifiedColTypeWithPositionContext> qualifiedColTypeWithPosition() {
            return getRuleContexts(QualifiedColTypeWithPositionContext.class);
        }

        public QualifiedColTypeWithPositionContext qualifiedColTypeWithPosition(int i) {
            return getRuleContext(QualifiedColTypeWithPositionContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_qualifiedColTypeWithPositionList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterQualifiedColTypeWithPositionList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitQualifiedColTypeWithPositionList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitQualifiedColTypeWithPositionList(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class QualifiedColTypeWithPositionContext extends ParserRuleContext {
        public MultipartIdentifierContext name;

        public QualifiedColTypeWithPositionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public DataTypeContext dataType() {
            return getRuleContext(DataTypeContext.class, 0);
        }

        public MultipartIdentifierContext multipartIdentifier() {
            return getRuleContext(MultipartIdentifierContext.class, 0);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode NULL() {
            return getToken(SqlBaseParser.NULL, 0);
        }

        public DefaultExpressionContext defaultExpression() {
            return getRuleContext(DefaultExpressionContext.class, 0);
        }

        public CommentSpecContext commentSpec() {
            return getRuleContext(CommentSpecContext.class, 0);
        }

        public ColPositionContext colPosition() {
            return getRuleContext(ColPositionContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_qualifiedColTypeWithPosition;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterQualifiedColTypeWithPosition(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitQualifiedColTypeWithPosition(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitQualifiedColTypeWithPosition(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class DefaultExpressionContext extends ParserRuleContext {
        public DefaultExpressionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode DEFAULT() {
            return getToken(SqlBaseParser.DEFAULT, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_defaultExpression;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterDefaultExpression(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitDefaultExpression(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDefaultExpression(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ColTypeListContext extends ParserRuleContext {
        public ColTypeListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<ColTypeContext> colType() {
            return getRuleContexts(ColTypeContext.class);
        }

        public ColTypeContext colType(int i) {
            return getRuleContext(ColTypeContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_colTypeList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterColTypeList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitColTypeList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitColTypeList(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ColTypeContext extends ParserRuleContext {
        public ErrorCapturingIdentifierContext colName;

        public ColTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public DataTypeContext dataType() {
            return getRuleContext(DataTypeContext.class, 0);
        }

        public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
            return getRuleContext(ErrorCapturingIdentifierContext.class, 0);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode NULL() {
            return getToken(SqlBaseParser.NULL, 0);
        }

        public CommentSpecContext commentSpec() {
            return getRuleContext(CommentSpecContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_colType;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterColType(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitColType(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitColType(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class CreateOrReplaceTableColTypeListContext extends ParserRuleContext {
        public CreateOrReplaceTableColTypeListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<CreateOrReplaceTableColTypeContext> createOrReplaceTableColType() {
            return getRuleContexts(CreateOrReplaceTableColTypeContext.class);
        }

        public CreateOrReplaceTableColTypeContext createOrReplaceTableColType(int i) {
            return getRuleContext(CreateOrReplaceTableColTypeContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_createOrReplaceTableColTypeList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterCreateOrReplaceTableColTypeList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitCreateOrReplaceTableColTypeList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCreateOrReplaceTableColTypeList(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class CreateOrReplaceTableColTypeContext extends ParserRuleContext {
        public ErrorCapturingIdentifierContext colName;

        public CreateOrReplaceTableColTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public DataTypeContext dataType() {
            return getRuleContext(DataTypeContext.class, 0);
        }

        public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
            return getRuleContext(ErrorCapturingIdentifierContext.class, 0);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode NULL() {
            return getToken(SqlBaseParser.NULL, 0);
        }

        public DefaultExpressionContext defaultExpression() {
            return getRuleContext(DefaultExpressionContext.class, 0);
        }

        public CommentSpecContext commentSpec() {
            return getRuleContext(CommentSpecContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_createOrReplaceTableColType;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterCreateOrReplaceTableColType(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitCreateOrReplaceTableColType(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitCreateOrReplaceTableColType(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ComplexColTypeListContext extends ParserRuleContext {
        public ComplexColTypeListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<ComplexColTypeContext> complexColType() {
            return getRuleContexts(ComplexColTypeContext.class);
        }

        public ComplexColTypeContext complexColType(int i) {
            return getRuleContext(ComplexColTypeContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_complexColTypeList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterComplexColTypeList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitComplexColTypeList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitComplexColTypeList(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ComplexColTypeContext extends ParserRuleContext {
        public ComplexColTypeContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public DataTypeContext dataType() {
            return getRuleContext(DataTypeContext.class, 0);
        }

        public TerminalNode COLON() {
            return getToken(SqlBaseParser.COLON, 0);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode NULL() {
            return getToken(SqlBaseParser.NULL, 0);
        }

        public CommentSpecContext commentSpec() {
            return getRuleContext(CommentSpecContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_complexColType;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterComplexColType(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitComplexColType(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitComplexColType(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class WhenClauseContext extends ParserRuleContext {
        public ExpressionContext condition;
        public ExpressionContext result;

        public WhenClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode WHEN() {
            return getToken(SqlBaseParser.WHEN, 0);
        }

        public TerminalNode THEN() {
            return getToken(SqlBaseParser.THEN, 0);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_whenClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterWhenClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitWhenClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitWhenClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class WindowClauseContext extends ParserRuleContext {
        public WindowClauseContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode WINDOW() {
            return getToken(SqlBaseParser.WINDOW, 0);
        }

        public List<NamedWindowContext> namedWindow() {
            return getRuleContexts(NamedWindowContext.class);
        }

        public NamedWindowContext namedWindow(int i) {
            return getRuleContext(NamedWindowContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_windowClause;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterWindowClause(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitWindowClause(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitWindowClause(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class NamedWindowContext extends ParserRuleContext {
        public ErrorCapturingIdentifierContext name;

        public NamedWindowContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public WindowSpecContext windowSpec() {
            return getRuleContext(WindowSpecContext.class, 0);
        }

        public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
            return getRuleContext(ErrorCapturingIdentifierContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_namedWindow;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterNamedWindow(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitNamedWindow(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitNamedWindow(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class WindowSpecContext extends ParserRuleContext {
        public WindowSpecContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public WindowSpecContext() {
        }

        @Override
        public int getRuleIndex() {
            return RULE_windowSpec;
        }

        public void copyFrom(WindowSpecContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class WindowRefContext extends WindowSpecContext {
        public ErrorCapturingIdentifierContext name;

        public WindowRefContext(WindowSpecContext ctx) {
            copyFrom(ctx);
        }

        public ErrorCapturingIdentifierContext errorCapturingIdentifier() {
            return getRuleContext(ErrorCapturingIdentifierContext.class, 0);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterWindowRef(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitWindowRef(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitWindowRef(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class WindowDefContext extends WindowSpecContext {
        public ExpressionContext expression;
        public List<ExpressionContext> partition = new ArrayList<ExpressionContext>();

        public WindowDefContext(WindowSpecContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode LEFT_PAREN() {
            return getToken(SqlBaseParser.LEFT_PAREN, 0);
        }

        public TerminalNode RIGHT_PAREN() {
            return getToken(SqlBaseParser.RIGHT_PAREN, 0);
        }

        public TerminalNode CLUSTER() {
            return getToken(SqlBaseParser.CLUSTER, 0);
        }

        public List<TerminalNode> BY() {
            return getTokens(SqlBaseParser.BY);
        }

        public TerminalNode BY(int i) {
            return getToken(SqlBaseParser.BY, i);
        }

        public List<ExpressionContext> expression() {
            return getRuleContexts(ExpressionContext.class);
        }

        public ExpressionContext expression(int i) {
            return getRuleContext(ExpressionContext.class, i);
        }

        public WindowFrameContext windowFrame() {
            return getRuleContext(WindowFrameContext.class, 0);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        public List<SortItemContext> sortItem() {
            return getRuleContexts(SortItemContext.class);
        }

        public SortItemContext sortItem(int i) {
            return getRuleContext(SortItemContext.class, i);
        }

        public TerminalNode PARTITION() {
            return getToken(SqlBaseParser.PARTITION, 0);
        }

        public TerminalNode DISTRIBUTE() {
            return getToken(SqlBaseParser.DISTRIBUTE, 0);
        }

        public TerminalNode ORDER() {
            return getToken(SqlBaseParser.ORDER, 0);
        }

        public TerminalNode SORT() {
            return getToken(SqlBaseParser.SORT, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterWindowDef(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitWindowDef(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitWindowDef(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class WindowFrameContext extends ParserRuleContext {
        public Token frameType;
        public FrameBoundContext start;
        public FrameBoundContext end;

        public WindowFrameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode RANGE() {
            return getToken(SqlBaseParser.RANGE, 0);
        }

        public List<FrameBoundContext> frameBound() {
            return getRuleContexts(FrameBoundContext.class);
        }

        public FrameBoundContext frameBound(int i) {
            return getRuleContext(FrameBoundContext.class, i);
        }

        public TerminalNode ROWS() {
            return getToken(SqlBaseParser.ROWS, 0);
        }

        public TerminalNode BETWEEN() {
            return getToken(SqlBaseParser.BETWEEN, 0);
        }

        public TerminalNode AND() {
            return getToken(SqlBaseParser.AND, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_windowFrame;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterWindowFrame(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitWindowFrame(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitWindowFrame(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class FrameBoundContext extends ParserRuleContext {
        public Token boundType;

        public FrameBoundContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode UNBOUNDED() {
            return getToken(SqlBaseParser.UNBOUNDED, 0);
        }

        public TerminalNode PRECEDING() {
            return getToken(SqlBaseParser.PRECEDING, 0);
        }

        public TerminalNode FOLLOWING() {
            return getToken(SqlBaseParser.FOLLOWING, 0);
        }

        public TerminalNode ROW() {
            return getToken(SqlBaseParser.ROW, 0);
        }

        public TerminalNode CURRENT() {
            return getToken(SqlBaseParser.CURRENT, 0);
        }

        public ExpressionContext expression() {
            return getRuleContext(ExpressionContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_frameBound;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterFrameBound(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitFrameBound(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitFrameBound(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class QualifiedNameListContext extends ParserRuleContext {
        public QualifiedNameListContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<QualifiedNameContext> qualifiedName() {
            return getRuleContexts(QualifiedNameContext.class);
        }

        public QualifiedNameContext qualifiedName(int i) {
            return getRuleContext(QualifiedNameContext.class, i);
        }

        public List<TerminalNode> COMMA() {
            return getTokens(SqlBaseParser.COMMA);
        }

        public TerminalNode COMMA(int i) {
            return getToken(SqlBaseParser.COMMA, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_qualifiedNameList;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterQualifiedNameList(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitQualifiedNameList(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitQualifiedNameList(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class FunctionNameContext extends ParserRuleContext {
        public FunctionNameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public QualifiedNameContext qualifiedName() {
            return getRuleContext(QualifiedNameContext.class, 0);
        }

        public TerminalNode FILTER() {
            return getToken(SqlBaseParser.FILTER, 0);
        }

        public TerminalNode LEFT() {
            return getToken(SqlBaseParser.LEFT, 0);
        }

        public TerminalNode RIGHT() {
            return getToken(SqlBaseParser.RIGHT, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_functionName;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterFunctionName(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitFunctionName(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitFunctionName(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class QualifiedNameContext extends ParserRuleContext {
        public QualifiedNameContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public List<IdentifierContext> identifier() {
            return getRuleContexts(IdentifierContext.class);
        }

        public IdentifierContext identifier(int i) {
            return getRuleContext(IdentifierContext.class, i);
        }

        public List<TerminalNode> DOT() {
            return getTokens(SqlBaseParser.DOT);
        }

        public TerminalNode DOT(int i) {
            return getToken(SqlBaseParser.DOT, i);
        }

        @Override
        public int getRuleIndex() {
            return RULE_qualifiedName;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterQualifiedName(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitQualifiedName(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitQualifiedName(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ErrorCapturingIdentifierContext extends ParserRuleContext {
        public ErrorCapturingIdentifierContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public IdentifierContext identifier() {
            return getRuleContext(IdentifierContext.class, 0);
        }

        public ErrorCapturingIdentifierExtraContext errorCapturingIdentifierExtra() {
            return getRuleContext(ErrorCapturingIdentifierExtraContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_errorCapturingIdentifier;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterErrorCapturingIdentifier(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitErrorCapturingIdentifier(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitErrorCapturingIdentifier(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ErrorCapturingIdentifierExtraContext extends ParserRuleContext {
        public ErrorCapturingIdentifierExtraContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public ErrorCapturingIdentifierExtraContext() {
        }

        @Override
        public int getRuleIndex() {
            return RULE_errorCapturingIdentifierExtra;
        }

        public void copyFrom(ErrorCapturingIdentifierExtraContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class ErrorIdentContext extends ErrorCapturingIdentifierExtraContext {
        public ErrorIdentContext(ErrorCapturingIdentifierExtraContext ctx) {
            copyFrom(ctx);
        }

        public List<TerminalNode> MINUS() {
            return getTokens(SqlBaseParser.MINUS);
        }

        public TerminalNode MINUS(int i) {
            return getToken(SqlBaseParser.MINUS, i);
        }

        public List<IdentifierContext> identifier() {
            return getRuleContexts(IdentifierContext.class);
        }

        public IdentifierContext identifier(int i) {
            return getRuleContext(IdentifierContext.class, i);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterErrorIdent(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitErrorIdent(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitErrorIdent(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class RealIdentContext extends ErrorCapturingIdentifierExtraContext {
        public RealIdentContext(ErrorCapturingIdentifierExtraContext ctx) {
            copyFrom(ctx);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterRealIdent(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitRealIdent(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitRealIdent(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class IdentifierContext extends ParserRuleContext {
        public IdentifierContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public StrictIdentifierContext strictIdentifier() {
            return getRuleContext(StrictIdentifierContext.class, 0);
        }

        public StrictNonReservedContext strictNonReserved() {
            return getRuleContext(StrictNonReservedContext.class, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_identifier;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterIdentifier(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitIdentifier(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitIdentifier(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class StrictIdentifierContext extends ParserRuleContext {
        public StrictIdentifierContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public StrictIdentifierContext() {
        }

        @Override
        public int getRuleIndex() {
            return RULE_strictIdentifier;
        }

        public void copyFrom(StrictIdentifierContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class QuotedIdentifierAlternativeContext extends StrictIdentifierContext {
        public QuotedIdentifierAlternativeContext(StrictIdentifierContext ctx) {
            copyFrom(ctx);
        }

        public QuotedIdentifierContext quotedIdentifier() {
            return getRuleContext(QuotedIdentifierContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterQuotedIdentifierAlternative(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitQuotedIdentifierAlternative(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitQuotedIdentifierAlternative(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class UnquotedIdentifierContext extends StrictIdentifierContext {
        public UnquotedIdentifierContext(StrictIdentifierContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode IDENTIFIER() {
            return getToken(SqlBaseParser.IDENTIFIER, 0);
        }

        public AnsiNonReservedContext ansiNonReserved() {
            return getRuleContext(AnsiNonReservedContext.class, 0);
        }

        public NonReservedContext nonReserved() {
            return getRuleContext(NonReservedContext.class, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterUnquotedIdentifier(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitUnquotedIdentifier(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitUnquotedIdentifier(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class QuotedIdentifierContext extends ParserRuleContext {
        public QuotedIdentifierContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode BACKQUOTED_IDENTIFIER() {
            return getToken(SqlBaseParser.BACKQUOTED_IDENTIFIER, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_quotedIdentifier;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterQuotedIdentifier(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitQuotedIdentifier(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitQuotedIdentifier(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class NumberContext extends ParserRuleContext {
        public NumberContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public NumberContext() {
        }

        @Override
        public int getRuleIndex() {
            return RULE_number;
        }

        public void copyFrom(NumberContext ctx) {
            super.copyFrom(ctx);
        }
    }

    public static class DecimalLiteralContext extends NumberContext {
        public DecimalLiteralContext(NumberContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode DECIMAL_VALUE() {
            return getToken(SqlBaseParser.DECIMAL_VALUE, 0);
        }

        public TerminalNode MINUS() {
            return getToken(SqlBaseParser.MINUS, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterDecimalLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitDecimalLiteral(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDecimalLiteral(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class BigIntLiteralContext extends NumberContext {
        public BigIntLiteralContext(NumberContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode BIGINT_LITERAL() {
            return getToken(SqlBaseParser.BIGINT_LITERAL, 0);
        }

        public TerminalNode MINUS() {
            return getToken(SqlBaseParser.MINUS, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterBigIntLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitBigIntLiteral(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitBigIntLiteral(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class TinyIntLiteralContext extends NumberContext {
        public TinyIntLiteralContext(NumberContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode TINYINT_LITERAL() {
            return getToken(SqlBaseParser.TINYINT_LITERAL, 0);
        }

        public TerminalNode MINUS() {
            return getToken(SqlBaseParser.MINUS, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterTinyIntLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitTinyIntLiteral(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitTinyIntLiteral(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class LegacyDecimalLiteralContext extends NumberContext {
        public LegacyDecimalLiteralContext(NumberContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode EXPONENT_VALUE() {
            return getToken(SqlBaseParser.EXPONENT_VALUE, 0);
        }

        public TerminalNode DECIMAL_VALUE() {
            return getToken(SqlBaseParser.DECIMAL_VALUE, 0);
        }

        public TerminalNode MINUS() {
            return getToken(SqlBaseParser.MINUS, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterLegacyDecimalLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitLegacyDecimalLiteral(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitLegacyDecimalLiteral(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class BigDecimalLiteralContext extends NumberContext {
        public BigDecimalLiteralContext(NumberContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode BIGDECIMAL_LITERAL() {
            return getToken(SqlBaseParser.BIGDECIMAL_LITERAL, 0);
        }

        public TerminalNode MINUS() {
            return getToken(SqlBaseParser.MINUS, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterBigDecimalLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitBigDecimalLiteral(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitBigDecimalLiteral(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class ExponentLiteralContext extends NumberContext {
        public ExponentLiteralContext(NumberContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode EXPONENT_VALUE() {
            return getToken(SqlBaseParser.EXPONENT_VALUE, 0);
        }

        public TerminalNode MINUS() {
            return getToken(SqlBaseParser.MINUS, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterExponentLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitExponentLiteral(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitExponentLiteral(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class DoubleLiteralContext extends NumberContext {
        public DoubleLiteralContext(NumberContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode DOUBLE_LITERAL() {
            return getToken(SqlBaseParser.DOUBLE_LITERAL, 0);
        }

        public TerminalNode MINUS() {
            return getToken(SqlBaseParser.MINUS, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterDoubleLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitDoubleLiteral(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitDoubleLiteral(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class IntegerLiteralContext extends NumberContext {
        public IntegerLiteralContext(NumberContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode INTEGER_VALUE() {
            return getToken(SqlBaseParser.INTEGER_VALUE, 0);
        }

        public TerminalNode MINUS() {
            return getToken(SqlBaseParser.MINUS, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterIntegerLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitIntegerLiteral(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitIntegerLiteral(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class FloatLiteralContext extends NumberContext {
        public FloatLiteralContext(NumberContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode FLOAT_LITERAL() {
            return getToken(SqlBaseParser.FLOAT_LITERAL, 0);
        }

        public TerminalNode MINUS() {
            return getToken(SqlBaseParser.MINUS, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterFloatLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitFloatLiteral(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitFloatLiteral(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class SmallIntLiteralContext extends NumberContext {
        public SmallIntLiteralContext(NumberContext ctx) {
            copyFrom(ctx);
        }

        public TerminalNode SMALLINT_LITERAL() {
            return getToken(SqlBaseParser.SMALLINT_LITERAL, 0);
        }

        public TerminalNode MINUS() {
            return getToken(SqlBaseParser.MINUS, 0);
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterSmallIntLiteral(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitSmallIntLiteral(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitSmallIntLiteral(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class AlterColumnActionContext extends ParserRuleContext {
        public Token setOrDrop;
        public Token dropDefault;

        public AlterColumnActionContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode TYPE() {
            return getToken(SqlBaseParser.TYPE, 0);
        }

        public DataTypeContext dataType() {
            return getRuleContext(DataTypeContext.class, 0);
        }

        public CommentSpecContext commentSpec() {
            return getRuleContext(CommentSpecContext.class, 0);
        }

        public ColPositionContext colPosition() {
            return getRuleContext(ColPositionContext.class, 0);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode NULL() {
            return getToken(SqlBaseParser.NULL, 0);
        }

        public TerminalNode SET() {
            return getToken(SqlBaseParser.SET, 0);
        }

        public TerminalNode DROP() {
            return getToken(SqlBaseParser.DROP, 0);
        }

        public DefaultExpressionContext defaultExpression() {
            return getRuleContext(DefaultExpressionContext.class, 0);
        }

        public TerminalNode DEFAULT() {
            return getToken(SqlBaseParser.DEFAULT, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_alterColumnAction;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterAlterColumnAction(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitAlterColumnAction(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitAlterColumnAction(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class AnsiNonReservedContext extends ParserRuleContext {
        public AnsiNonReservedContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode ADD() {
            return getToken(SqlBaseParser.ADD, 0);
        }

        public TerminalNode AFTER() {
            return getToken(SqlBaseParser.AFTER, 0);
        }

        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public TerminalNode ANALYZE() {
            return getToken(SqlBaseParser.ANALYZE, 0);
        }

        public TerminalNode ANTI() {
            return getToken(SqlBaseParser.ANTI, 0);
        }

        public TerminalNode ANY_VALUE() {
            return getToken(SqlBaseParser.ANY_VALUE, 0);
        }

        public TerminalNode ARCHIVE() {
            return getToken(SqlBaseParser.ARCHIVE, 0);
        }

        public TerminalNode ARRAY() {
            return getToken(SqlBaseParser.ARRAY, 0);
        }

        public TerminalNode ASC() {
            return getToken(SqlBaseParser.ASC, 0);
        }

        public TerminalNode AT() {
            return getToken(SqlBaseParser.AT, 0);
        }

        public TerminalNode BETWEEN() {
            return getToken(SqlBaseParser.BETWEEN, 0);
        }

        public TerminalNode BUCKET() {
            return getToken(SqlBaseParser.BUCKET, 0);
        }

        public TerminalNode BUCKETS() {
            return getToken(SqlBaseParser.BUCKETS, 0);
        }

        public TerminalNode BY() {
            return getToken(SqlBaseParser.BY, 0);
        }

        public TerminalNode CACHE() {
            return getToken(SqlBaseParser.CACHE, 0);
        }

        public TerminalNode CASCADE() {
            return getToken(SqlBaseParser.CASCADE, 0);
        }

        public TerminalNode CATALOG() {
            return getToken(SqlBaseParser.CATALOG, 0);
        }

        public TerminalNode CATALOGS() {
            return getToken(SqlBaseParser.CATALOGS, 0);
        }

        public TerminalNode CHANGE() {
            return getToken(SqlBaseParser.CHANGE, 0);
        }

        public TerminalNode CLEAR() {
            return getToken(SqlBaseParser.CLEAR, 0);
        }

        public TerminalNode CLUSTER() {
            return getToken(SqlBaseParser.CLUSTER, 0);
        }

        public TerminalNode CLUSTERED() {
            return getToken(SqlBaseParser.CLUSTERED, 0);
        }

        public TerminalNode CODEGEN() {
            return getToken(SqlBaseParser.CODEGEN, 0);
        }

        public TerminalNode COLLECTION() {
            return getToken(SqlBaseParser.COLLECTION, 0);
        }

        public TerminalNode COLUMNS() {
            return getToken(SqlBaseParser.COLUMNS, 0);
        }

        public TerminalNode COMMENT() {
            return getToken(SqlBaseParser.COMMENT, 0);
        }

        public TerminalNode COMMIT() {
            return getToken(SqlBaseParser.COMMIT, 0);
        }

        public TerminalNode COMPACT() {
            return getToken(SqlBaseParser.COMPACT, 0);
        }

        public TerminalNode COMPACTIONS() {
            return getToken(SqlBaseParser.COMPACTIONS, 0);
        }

        public TerminalNode COMPUTE() {
            return getToken(SqlBaseParser.COMPUTE, 0);
        }

        public TerminalNode CONCATENATE() {
            return getToken(SqlBaseParser.CONCATENATE, 0);
        }

        public TerminalNode COST() {
            return getToken(SqlBaseParser.COST, 0);
        }

        public TerminalNode CUBE() {
            return getToken(SqlBaseParser.CUBE, 0);
        }

        public TerminalNode CURRENT() {
            return getToken(SqlBaseParser.CURRENT, 0);
        }

        public TerminalNode DATA() {
            return getToken(SqlBaseParser.DATA, 0);
        }

        public TerminalNode DATABASE() {
            return getToken(SqlBaseParser.DATABASE, 0);
        }

        public TerminalNode DATABASES() {
            return getToken(SqlBaseParser.DATABASES, 0);
        }

        public TerminalNode DATEADD() {
            return getToken(SqlBaseParser.DATEADD, 0);
        }

        public TerminalNode DATEDIFF() {
            return getToken(SqlBaseParser.DATEDIFF, 0);
        }

        public TerminalNode DAY() {
            return getToken(SqlBaseParser.DAY, 0);
        }

        public TerminalNode DAYOFYEAR() {
            return getToken(SqlBaseParser.DAYOFYEAR, 0);
        }

        public TerminalNode DBPROPERTIES() {
            return getToken(SqlBaseParser.DBPROPERTIES, 0);
        }

        public TerminalNode DEFAULT() {
            return getToken(SqlBaseParser.DEFAULT, 0);
        }

        public TerminalNode DEFINED() {
            return getToken(SqlBaseParser.DEFINED, 0);
        }

        public TerminalNode DELETE() {
            return getToken(SqlBaseParser.DELETE, 0);
        }

        public TerminalNode DELIMITED() {
            return getToken(SqlBaseParser.DELIMITED, 0);
        }

        public TerminalNode DESC() {
            return getToken(SqlBaseParser.DESC, 0);
        }

        public TerminalNode DESCRIBE() {
            return getToken(SqlBaseParser.DESCRIBE, 0);
        }

        public TerminalNode DFS() {
            return getToken(SqlBaseParser.DFS, 0);
        }

        public TerminalNode DIRECTORIES() {
            return getToken(SqlBaseParser.DIRECTORIES, 0);
        }

        public TerminalNode DIRECTORY() {
            return getToken(SqlBaseParser.DIRECTORY, 0);
        }

        public TerminalNode DISTRIBUTE() {
            return getToken(SqlBaseParser.DISTRIBUTE, 0);
        }

        public TerminalNode DIV() {
            return getToken(SqlBaseParser.DIV, 0);
        }

        public TerminalNode DROP() {
            return getToken(SqlBaseParser.DROP, 0);
        }

        public TerminalNode ESCAPED() {
            return getToken(SqlBaseParser.ESCAPED, 0);
        }

        public TerminalNode EXCHANGE() {
            return getToken(SqlBaseParser.EXCHANGE, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        public TerminalNode EXPLAIN() {
            return getToken(SqlBaseParser.EXPLAIN, 0);
        }

        public TerminalNode EXPORT() {
            return getToken(SqlBaseParser.EXPORT, 0);
        }

        public TerminalNode EXTENDED() {
            return getToken(SqlBaseParser.EXTENDED, 0);
        }

        public TerminalNode EXTERNAL() {
            return getToken(SqlBaseParser.EXTERNAL, 0);
        }

        public TerminalNode EXTRACT() {
            return getToken(SqlBaseParser.EXTRACT, 0);
        }

        public TerminalNode FIELDS() {
            return getToken(SqlBaseParser.FIELDS, 0);
        }

        public TerminalNode FILEFORMAT() {
            return getToken(SqlBaseParser.FILEFORMAT, 0);
        }

        public TerminalNode FIRST() {
            return getToken(SqlBaseParser.FIRST, 0);
        }

        public TerminalNode FOLLOWING() {
            return getToken(SqlBaseParser.FOLLOWING, 0);
        }

        public TerminalNode FORMAT() {
            return getToken(SqlBaseParser.FORMAT, 0);
        }

        public TerminalNode FORMATTED() {
            return getToken(SqlBaseParser.FORMATTED, 0);
        }

        public TerminalNode FUNCTION() {
            return getToken(SqlBaseParser.FUNCTION, 0);
        }

        public TerminalNode FUNCTIONS() {
            return getToken(SqlBaseParser.FUNCTIONS, 0);
        }

        public TerminalNode GLOBAL() {
            return getToken(SqlBaseParser.GLOBAL, 0);
        }

        public TerminalNode GROUPING() {
            return getToken(SqlBaseParser.GROUPING, 0);
        }

        public TerminalNode HOUR() {
            return getToken(SqlBaseParser.HOUR, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode IGNORE() {
            return getToken(SqlBaseParser.IGNORE, 0);
        }

        public TerminalNode IMPORT() {
            return getToken(SqlBaseParser.IMPORT, 0);
        }

        public TerminalNode INDEX() {
            return getToken(SqlBaseParser.INDEX, 0);
        }

        public TerminalNode INDEXES() {
            return getToken(SqlBaseParser.INDEXES, 0);
        }

        public TerminalNode INPATH() {
            return getToken(SqlBaseParser.INPATH, 0);
        }

        public TerminalNode INPUTFORMAT() {
            return getToken(SqlBaseParser.INPUTFORMAT, 0);
        }

        public TerminalNode INSERT() {
            return getToken(SqlBaseParser.INSERT, 0);
        }

        public TerminalNode INTERVAL() {
            return getToken(SqlBaseParser.INTERVAL, 0);
        }

        public TerminalNode ITEMS() {
            return getToken(SqlBaseParser.ITEMS, 0);
        }

        public TerminalNode KEYS() {
            return getToken(SqlBaseParser.KEYS, 0);
        }

        public TerminalNode LAST() {
            return getToken(SqlBaseParser.LAST, 0);
        }

        public TerminalNode LAZY() {
            return getToken(SqlBaseParser.LAZY, 0);
        }

        public TerminalNode LIKE() {
            return getToken(SqlBaseParser.LIKE, 0);
        }

        public TerminalNode ILIKE() {
            return getToken(SqlBaseParser.ILIKE, 0);
        }

        public TerminalNode LIMIT() {
            return getToken(SqlBaseParser.LIMIT, 0);
        }

        public TerminalNode LINES() {
            return getToken(SqlBaseParser.LINES, 0);
        }

        public TerminalNode LIST() {
            return getToken(SqlBaseParser.LIST, 0);
        }

        public TerminalNode LOAD() {
            return getToken(SqlBaseParser.LOAD, 0);
        }

        public TerminalNode LOCAL() {
            return getToken(SqlBaseParser.LOCAL, 0);
        }

        public TerminalNode LOCATION() {
            return getToken(SqlBaseParser.LOCATION, 0);
        }

        public TerminalNode LOCK() {
            return getToken(SqlBaseParser.LOCK, 0);
        }

        public TerminalNode LOCKS() {
            return getToken(SqlBaseParser.LOCKS, 0);
        }

        public TerminalNode LOGICAL() {
            return getToken(SqlBaseParser.LOGICAL, 0);
        }

        public TerminalNode MACRO() {
            return getToken(SqlBaseParser.MACRO, 0);
        }

        public TerminalNode MAP() {
            return getToken(SqlBaseParser.MAP, 0);
        }

        public TerminalNode MATCHED() {
            return getToken(SqlBaseParser.MATCHED, 0);
        }

        public TerminalNode MERGE() {
            return getToken(SqlBaseParser.MERGE, 0);
        }

        public TerminalNode MICROSECOND() {
            return getToken(SqlBaseParser.MICROSECOND, 0);
        }

        public TerminalNode MILLISECOND() {
            return getToken(SqlBaseParser.MILLISECOND, 0);
        }

        public TerminalNode MINUTE() {
            return getToken(SqlBaseParser.MINUTE, 0);
        }

        public TerminalNode MONTH() {
            return getToken(SqlBaseParser.MONTH, 0);
        }

        public TerminalNode MSCK() {
            return getToken(SqlBaseParser.MSCK, 0);
        }

        public TerminalNode NAMESPACE() {
            return getToken(SqlBaseParser.NAMESPACE, 0);
        }

        public TerminalNode NAMESPACES() {
            return getToken(SqlBaseParser.NAMESPACES, 0);
        }

        public TerminalNode NO() {
            return getToken(SqlBaseParser.NO, 0);
        }

        public TerminalNode NULLS() {
            return getToken(SqlBaseParser.NULLS, 0);
        }

        public TerminalNode OF() {
            return getToken(SqlBaseParser.OF, 0);
        }

        public TerminalNode OPTION() {
            return getToken(SqlBaseParser.OPTION, 0);
        }

        public TerminalNode OPTIONS() {
            return getToken(SqlBaseParser.OPTIONS, 0);
        }

        public TerminalNode OUT() {
            return getToken(SqlBaseParser.OUT, 0);
        }

        public TerminalNode OUTPUTFORMAT() {
            return getToken(SqlBaseParser.OUTPUTFORMAT, 0);
        }

        public TerminalNode OVER() {
            return getToken(SqlBaseParser.OVER, 0);
        }

        public TerminalNode OVERLAY() {
            return getToken(SqlBaseParser.OVERLAY, 0);
        }

        public TerminalNode OVERWRITE() {
            return getToken(SqlBaseParser.OVERWRITE, 0);
        }

        public TerminalNode PARTITION() {
            return getToken(SqlBaseParser.PARTITION, 0);
        }

        public TerminalNode PARTITIONED() {
            return getToken(SqlBaseParser.PARTITIONED, 0);
        }

        public TerminalNode PARTITIONS() {
            return getToken(SqlBaseParser.PARTITIONS, 0);
        }

        public TerminalNode PERCENTLIT() {
            return getToken(SqlBaseParser.PERCENTLIT, 0);
        }

        public TerminalNode PIVOT() {
            return getToken(SqlBaseParser.PIVOT, 0);
        }

        public TerminalNode PLACING() {
            return getToken(SqlBaseParser.PLACING, 0);
        }

        public TerminalNode POSITION() {
            return getToken(SqlBaseParser.POSITION, 0);
        }

        public TerminalNode PRECEDING() {
            return getToken(SqlBaseParser.PRECEDING, 0);
        }

        public TerminalNode PRINCIPALS() {
            return getToken(SqlBaseParser.PRINCIPALS, 0);
        }

        public TerminalNode PROPERTIES() {
            return getToken(SqlBaseParser.PROPERTIES, 0);
        }

        public TerminalNode PURGE() {
            return getToken(SqlBaseParser.PURGE, 0);
        }

        public TerminalNode QUARTER() {
            return getToken(SqlBaseParser.QUARTER, 0);
        }

        public TerminalNode QUERY() {
            return getToken(SqlBaseParser.QUERY, 0);
        }

        public TerminalNode RANGE() {
            return getToken(SqlBaseParser.RANGE, 0);
        }

        public TerminalNode RECORDREADER() {
            return getToken(SqlBaseParser.RECORDREADER, 0);
        }

        public TerminalNode RECORDWRITER() {
            return getToken(SqlBaseParser.RECORDWRITER, 0);
        }

        public TerminalNode RECOVER() {
            return getToken(SqlBaseParser.RECOVER, 0);
        }

        public TerminalNode REDUCE() {
            return getToken(SqlBaseParser.REDUCE, 0);
        }

        public TerminalNode REFRESH() {
            return getToken(SqlBaseParser.REFRESH, 0);
        }

        public TerminalNode RENAME() {
            return getToken(SqlBaseParser.RENAME, 0);
        }

        public TerminalNode REPAIR() {
            return getToken(SqlBaseParser.REPAIR, 0);
        }

        public TerminalNode REPEATABLE() {
            return getToken(SqlBaseParser.REPEATABLE, 0);
        }

        public TerminalNode REPLACE() {
            return getToken(SqlBaseParser.REPLACE, 0);
        }

        public TerminalNode RESET() {
            return getToken(SqlBaseParser.RESET, 0);
        }

        public TerminalNode RESPECT() {
            return getToken(SqlBaseParser.RESPECT, 0);
        }

        public TerminalNode RESTRICT() {
            return getToken(SqlBaseParser.RESTRICT, 0);
        }

        public TerminalNode REVOKE() {
            return getToken(SqlBaseParser.REVOKE, 0);
        }

        public TerminalNode RLIKE() {
            return getToken(SqlBaseParser.RLIKE, 0);
        }

        public TerminalNode ROLE() {
            return getToken(SqlBaseParser.ROLE, 0);
        }

        public TerminalNode ROLES() {
            return getToken(SqlBaseParser.ROLES, 0);
        }

        public TerminalNode ROLLBACK() {
            return getToken(SqlBaseParser.ROLLBACK, 0);
        }

        public TerminalNode ROLLUP() {
            return getToken(SqlBaseParser.ROLLUP, 0);
        }

        public TerminalNode ROW() {
            return getToken(SqlBaseParser.ROW, 0);
        }

        public TerminalNode ROWS() {
            return getToken(SqlBaseParser.ROWS, 0);
        }

        public TerminalNode SCHEMA() {
            return getToken(SqlBaseParser.SCHEMA, 0);
        }

        public TerminalNode SCHEMAS() {
            return getToken(SqlBaseParser.SCHEMAS, 0);
        }

        public TerminalNode SECOND() {
            return getToken(SqlBaseParser.SECOND, 0);
        }

        public TerminalNode SEMI() {
            return getToken(SqlBaseParser.SEMI, 0);
        }

        public TerminalNode SEPARATED() {
            return getToken(SqlBaseParser.SEPARATED, 0);
        }

        public TerminalNode SERDE() {
            return getToken(SqlBaseParser.SERDE, 0);
        }

        public TerminalNode SERDEPROPERTIES() {
            return getToken(SqlBaseParser.SERDEPROPERTIES, 0);
        }

        public TerminalNode SET() {
            return getToken(SqlBaseParser.SET, 0);
        }

        public TerminalNode SETMINUS() {
            return getToken(SqlBaseParser.SETMINUS, 0);
        }

        public TerminalNode SETS() {
            return getToken(SqlBaseParser.SETS, 0);
        }

        public TerminalNode SHOW() {
            return getToken(SqlBaseParser.SHOW, 0);
        }

        public TerminalNode SKEWED() {
            return getToken(SqlBaseParser.SKEWED, 0);
        }

        public TerminalNode SORT() {
            return getToken(SqlBaseParser.SORT, 0);
        }

        public TerminalNode SORTED() {
            return getToken(SqlBaseParser.SORTED, 0);
        }

        public TerminalNode START() {
            return getToken(SqlBaseParser.START, 0);
        }

        public TerminalNode STATISTICS() {
            return getToken(SqlBaseParser.STATISTICS, 0);
        }

        public TerminalNode STORED() {
            return getToken(SqlBaseParser.STORED, 0);
        }

        public TerminalNode STRATIFY() {
            return getToken(SqlBaseParser.STRATIFY, 0);
        }

        public TerminalNode STRUCT() {
            return getToken(SqlBaseParser.STRUCT, 0);
        }

        public TerminalNode SUBSTR() {
            return getToken(SqlBaseParser.SUBSTR, 0);
        }

        public TerminalNode SUBSTRING() {
            return getToken(SqlBaseParser.SUBSTRING, 0);
        }

        public TerminalNode SYNC() {
            return getToken(SqlBaseParser.SYNC, 0);
        }

        public TerminalNode SYSTEM_TIME() {
            return getToken(SqlBaseParser.SYSTEM_TIME, 0);
        }

        public TerminalNode SYSTEM_VERSION() {
            return getToken(SqlBaseParser.SYSTEM_VERSION, 0);
        }

        public TerminalNode TABLES() {
            return getToken(SqlBaseParser.TABLES, 0);
        }

        public TerminalNode TABLESAMPLE() {
            return getToken(SqlBaseParser.TABLESAMPLE, 0);
        }

        public TerminalNode TBLPROPERTIES() {
            return getToken(SqlBaseParser.TBLPROPERTIES, 0);
        }

        public TerminalNode TEMPORARY() {
            return getToken(SqlBaseParser.TEMPORARY, 0);
        }

        public TerminalNode TERMINATED() {
            return getToken(SqlBaseParser.TERMINATED, 0);
        }

        public TerminalNode TIMESTAMP() {
            return getToken(SqlBaseParser.TIMESTAMP, 0);
        }

        public TerminalNode TIMESTAMPADD() {
            return getToken(SqlBaseParser.TIMESTAMPADD, 0);
        }

        public TerminalNode TIMESTAMPDIFF() {
            return getToken(SqlBaseParser.TIMESTAMPDIFF, 0);
        }

        public TerminalNode TOUCH() {
            return getToken(SqlBaseParser.TOUCH, 0);
        }

        public TerminalNode TRANSACTION() {
            return getToken(SqlBaseParser.TRANSACTION, 0);
        }

        public TerminalNode TRANSACTIONS() {
            return getToken(SqlBaseParser.TRANSACTIONS, 0);
        }

        public TerminalNode TRANSFORM() {
            return getToken(SqlBaseParser.TRANSFORM, 0);
        }

        public TerminalNode TRIM() {
            return getToken(SqlBaseParser.TRIM, 0);
        }

        public TerminalNode TRUE() {
            return getToken(SqlBaseParser.TRUE, 0);
        }

        public TerminalNode TRUNCATE() {
            return getToken(SqlBaseParser.TRUNCATE, 0);
        }

        public TerminalNode TRY_CAST() {
            return getToken(SqlBaseParser.TRY_CAST, 0);
        }

        public TerminalNode TYPE() {
            return getToken(SqlBaseParser.TYPE, 0);
        }

        public TerminalNode UNARCHIVE() {
            return getToken(SqlBaseParser.UNARCHIVE, 0);
        }

        public TerminalNode UNBOUNDED() {
            return getToken(SqlBaseParser.UNBOUNDED, 0);
        }

        public TerminalNode UNCACHE() {
            return getToken(SqlBaseParser.UNCACHE, 0);
        }

        public TerminalNode UNLOCK() {
            return getToken(SqlBaseParser.UNLOCK, 0);
        }

        public TerminalNode UNSET() {
            return getToken(SqlBaseParser.UNSET, 0);
        }

        public TerminalNode UPDATE() {
            return getToken(SqlBaseParser.UPDATE, 0);
        }

        public TerminalNode USE() {
            return getToken(SqlBaseParser.USE, 0);
        }

        public TerminalNode VALUES() {
            return getToken(SqlBaseParser.VALUES, 0);
        }

        public TerminalNode VERSION() {
            return getToken(SqlBaseParser.VERSION, 0);
        }

        public TerminalNode VIEW() {
            return getToken(SqlBaseParser.VIEW, 0);
        }

        public TerminalNode VIEWS() {
            return getToken(SqlBaseParser.VIEWS, 0);
        }

        public TerminalNode WEEK() {
            return getToken(SqlBaseParser.WEEK, 0);
        }

        public TerminalNode WINDOW() {
            return getToken(SqlBaseParser.WINDOW, 0);
        }

        public TerminalNode YEAR() {
            return getToken(SqlBaseParser.YEAR, 0);
        }

        public TerminalNode ZONE() {
            return getToken(SqlBaseParser.ZONE, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_ansiNonReserved;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterAnsiNonReserved(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitAnsiNonReserved(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitAnsiNonReserved(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class StrictNonReservedContext extends ParserRuleContext {
        public StrictNonReservedContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode ANTI() {
            return getToken(SqlBaseParser.ANTI, 0);
        }

        public TerminalNode CROSS() {
            return getToken(SqlBaseParser.CROSS, 0);
        }

        public TerminalNode EXCEPT() {
            return getToken(SqlBaseParser.EXCEPT, 0);
        }

        public TerminalNode FULL() {
            return getToken(SqlBaseParser.FULL, 0);
        }

        public TerminalNode INNER() {
            return getToken(SqlBaseParser.INNER, 0);
        }

        public TerminalNode INTERSECT() {
            return getToken(SqlBaseParser.INTERSECT, 0);
        }

        public TerminalNode JOIN() {
            return getToken(SqlBaseParser.JOIN, 0);
        }

        public TerminalNode LATERAL() {
            return getToken(SqlBaseParser.LATERAL, 0);
        }

        public TerminalNode LEFT() {
            return getToken(SqlBaseParser.LEFT, 0);
        }

        public TerminalNode NATURAL() {
            return getToken(SqlBaseParser.NATURAL, 0);
        }

        public TerminalNode ON() {
            return getToken(SqlBaseParser.ON, 0);
        }

        public TerminalNode RIGHT() {
            return getToken(SqlBaseParser.RIGHT, 0);
        }

        public TerminalNode SEMI() {
            return getToken(SqlBaseParser.SEMI, 0);
        }

        public TerminalNode SETMINUS() {
            return getToken(SqlBaseParser.SETMINUS, 0);
        }

        public TerminalNode UNION() {
            return getToken(SqlBaseParser.UNION, 0);
        }

        public TerminalNode USING() {
            return getToken(SqlBaseParser.USING, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_strictNonReserved;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).enterStrictNonReserved(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener)
                ((SqlBaseParserListener) listener).exitStrictNonReserved(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitStrictNonReserved(this);
            else return visitor.visitChildren(this);
        }
    }

    public static class NonReservedContext extends ParserRuleContext {
        public NonReservedContext(ParserRuleContext parent, int invokingState) {
            super(parent, invokingState);
        }

        public TerminalNode ADD() {
            return getToken(SqlBaseParser.ADD, 0);
        }

        public TerminalNode AFTER() {
            return getToken(SqlBaseParser.AFTER, 0);
        }

        public TerminalNode ALL() {
            return getToken(SqlBaseParser.ALL, 0);
        }

        public TerminalNode ALTER() {
            return getToken(SqlBaseParser.ALTER, 0);
        }

        public TerminalNode ANALYZE() {
            return getToken(SqlBaseParser.ANALYZE, 0);
        }

        public TerminalNode AND() {
            return getToken(SqlBaseParser.AND, 0);
        }

        public TerminalNode ANY() {
            return getToken(SqlBaseParser.ANY, 0);
        }

        public TerminalNode ANY_VALUE() {
            return getToken(SqlBaseParser.ANY_VALUE, 0);
        }

        public TerminalNode ARCHIVE() {
            return getToken(SqlBaseParser.ARCHIVE, 0);
        }

        public TerminalNode ARRAY() {
            return getToken(SqlBaseParser.ARRAY, 0);
        }

        public TerminalNode AS() {
            return getToken(SqlBaseParser.AS, 0);
        }

        public TerminalNode ASC() {
            return getToken(SqlBaseParser.ASC, 0);
        }

        public TerminalNode AT() {
            return getToken(SqlBaseParser.AT, 0);
        }

        public TerminalNode AUTHORIZATION() {
            return getToken(SqlBaseParser.AUTHORIZATION, 0);
        }

        public TerminalNode BETWEEN() {
            return getToken(SqlBaseParser.BETWEEN, 0);
        }

        public TerminalNode BOTH() {
            return getToken(SqlBaseParser.BOTH, 0);
        }

        public TerminalNode BUCKET() {
            return getToken(SqlBaseParser.BUCKET, 0);
        }

        public TerminalNode BUCKETS() {
            return getToken(SqlBaseParser.BUCKETS, 0);
        }

        public TerminalNode BY() {
            return getToken(SqlBaseParser.BY, 0);
        }

        public TerminalNode CACHE() {
            return getToken(SqlBaseParser.CACHE, 0);
        }

        public TerminalNode CASCADE() {
            return getToken(SqlBaseParser.CASCADE, 0);
        }

        public TerminalNode CASE() {
            return getToken(SqlBaseParser.CASE, 0);
        }

        public TerminalNode CAST() {
            return getToken(SqlBaseParser.CAST, 0);
        }

        public TerminalNode CATALOG() {
            return getToken(SqlBaseParser.CATALOG, 0);
        }

        public TerminalNode CATALOGS() {
            return getToken(SqlBaseParser.CATALOGS, 0);
        }

        public TerminalNode CHANGE() {
            return getToken(SqlBaseParser.CHANGE, 0);
        }

        public TerminalNode CHECK() {
            return getToken(SqlBaseParser.CHECK, 0);
        }

        public TerminalNode CLEAR() {
            return getToken(SqlBaseParser.CLEAR, 0);
        }

        public TerminalNode CLUSTER() {
            return getToken(SqlBaseParser.CLUSTER, 0);
        }

        public TerminalNode CLUSTERED() {
            return getToken(SqlBaseParser.CLUSTERED, 0);
        }

        public TerminalNode CODEGEN() {
            return getToken(SqlBaseParser.CODEGEN, 0);
        }

        public TerminalNode COLLATE() {
            return getToken(SqlBaseParser.COLLATE, 0);
        }

        public TerminalNode COLLECTION() {
            return getToken(SqlBaseParser.COLLECTION, 0);
        }

        public TerminalNode COLUMN() {
            return getToken(SqlBaseParser.COLUMN, 0);
        }

        public TerminalNode COLUMNS() {
            return getToken(SqlBaseParser.COLUMNS, 0);
        }

        public TerminalNode COMMENT() {
            return getToken(SqlBaseParser.COMMENT, 0);
        }

        public TerminalNode COMMIT() {
            return getToken(SqlBaseParser.COMMIT, 0);
        }

        public TerminalNode COMPACT() {
            return getToken(SqlBaseParser.COMPACT, 0);
        }

        public TerminalNode COMPACTIONS() {
            return getToken(SqlBaseParser.COMPACTIONS, 0);
        }

        public TerminalNode COMPUTE() {
            return getToken(SqlBaseParser.COMPUTE, 0);
        }

        public TerminalNode CONCATENATE() {
            return getToken(SqlBaseParser.CONCATENATE, 0);
        }

        public TerminalNode CONSTRAINT() {
            return getToken(SqlBaseParser.CONSTRAINT, 0);
        }

        public TerminalNode COST() {
            return getToken(SqlBaseParser.COST, 0);
        }

        public TerminalNode CREATE() {
            return getToken(SqlBaseParser.CREATE, 0);
        }

        public TerminalNode CUBE() {
            return getToken(SqlBaseParser.CUBE, 0);
        }

        public TerminalNode CURRENT() {
            return getToken(SqlBaseParser.CURRENT, 0);
        }

        public TerminalNode CURRENT_DATE() {
            return getToken(SqlBaseParser.CURRENT_DATE, 0);
        }

        public TerminalNode CURRENT_TIME() {
            return getToken(SqlBaseParser.CURRENT_TIME, 0);
        }

        public TerminalNode CURRENT_TIMESTAMP() {
            return getToken(SqlBaseParser.CURRENT_TIMESTAMP, 0);
        }

        public TerminalNode CURRENT_USER() {
            return getToken(SqlBaseParser.CURRENT_USER, 0);
        }

        public TerminalNode DATA() {
            return getToken(SqlBaseParser.DATA, 0);
        }

        public TerminalNode DATABASE() {
            return getToken(SqlBaseParser.DATABASE, 0);
        }

        public TerminalNode DATABASES() {
            return getToken(SqlBaseParser.DATABASES, 0);
        }

        public TerminalNode DATEADD() {
            return getToken(SqlBaseParser.DATEADD, 0);
        }

        public TerminalNode DATEDIFF() {
            return getToken(SqlBaseParser.DATEDIFF, 0);
        }

        public TerminalNode DAY() {
            return getToken(SqlBaseParser.DAY, 0);
        }

        public TerminalNode DAYOFYEAR() {
            return getToken(SqlBaseParser.DAYOFYEAR, 0);
        }

        public TerminalNode DBPROPERTIES() {
            return getToken(SqlBaseParser.DBPROPERTIES, 0);
        }

        public TerminalNode DEFAULT() {
            return getToken(SqlBaseParser.DEFAULT, 0);
        }

        public TerminalNode DEFINED() {
            return getToken(SqlBaseParser.DEFINED, 0);
        }

        public TerminalNode DELETE() {
            return getToken(SqlBaseParser.DELETE, 0);
        }

        public TerminalNode DELIMITED() {
            return getToken(SqlBaseParser.DELIMITED, 0);
        }

        public TerminalNode DESC() {
            return getToken(SqlBaseParser.DESC, 0);
        }

        public TerminalNode DESCRIBE() {
            return getToken(SqlBaseParser.DESCRIBE, 0);
        }

        public TerminalNode DFS() {
            return getToken(SqlBaseParser.DFS, 0);
        }

        public TerminalNode DIRECTORIES() {
            return getToken(SqlBaseParser.DIRECTORIES, 0);
        }

        public TerminalNode DIRECTORY() {
            return getToken(SqlBaseParser.DIRECTORY, 0);
        }

        public TerminalNode DISTINCT() {
            return getToken(SqlBaseParser.DISTINCT, 0);
        }

        public TerminalNode DISTRIBUTE() {
            return getToken(SqlBaseParser.DISTRIBUTE, 0);
        }

        public TerminalNode DIV() {
            return getToken(SqlBaseParser.DIV, 0);
        }

        public TerminalNode DROP() {
            return getToken(SqlBaseParser.DROP, 0);
        }

        public TerminalNode ELSE() {
            return getToken(SqlBaseParser.ELSE, 0);
        }

        public TerminalNode END() {
            return getToken(SqlBaseParser.END, 0);
        }

        public TerminalNode ESCAPE() {
            return getToken(SqlBaseParser.ESCAPE, 0);
        }

        public TerminalNode ESCAPED() {
            return getToken(SqlBaseParser.ESCAPED, 0);
        }

        public TerminalNode EXCHANGE() {
            return getToken(SqlBaseParser.EXCHANGE, 0);
        }

        public TerminalNode EXISTS() {
            return getToken(SqlBaseParser.EXISTS, 0);
        }

        public TerminalNode EXPLAIN() {
            return getToken(SqlBaseParser.EXPLAIN, 0);
        }

        public TerminalNode EXPORT() {
            return getToken(SqlBaseParser.EXPORT, 0);
        }

        public TerminalNode EXTENDED() {
            return getToken(SqlBaseParser.EXTENDED, 0);
        }

        public TerminalNode EXTERNAL() {
            return getToken(SqlBaseParser.EXTERNAL, 0);
        }

        public TerminalNode EXTRACT() {
            return getToken(SqlBaseParser.EXTRACT, 0);
        }

        public TerminalNode FALSE() {
            return getToken(SqlBaseParser.FALSE, 0);
        }

        public TerminalNode FETCH() {
            return getToken(SqlBaseParser.FETCH, 0);
        }

        public TerminalNode FILTER() {
            return getToken(SqlBaseParser.FILTER, 0);
        }

        public TerminalNode FIELDS() {
            return getToken(SqlBaseParser.FIELDS, 0);
        }

        public TerminalNode FILEFORMAT() {
            return getToken(SqlBaseParser.FILEFORMAT, 0);
        }

        public TerminalNode FIRST() {
            return getToken(SqlBaseParser.FIRST, 0);
        }

        public TerminalNode FOLLOWING() {
            return getToken(SqlBaseParser.FOLLOWING, 0);
        }

        public TerminalNode FOR() {
            return getToken(SqlBaseParser.FOR, 0);
        }

        public TerminalNode FOREIGN() {
            return getToken(SqlBaseParser.FOREIGN, 0);
        }

        public TerminalNode FORMAT() {
            return getToken(SqlBaseParser.FORMAT, 0);
        }

        public TerminalNode FORMATTED() {
            return getToken(SqlBaseParser.FORMATTED, 0);
        }

        public TerminalNode FROM() {
            return getToken(SqlBaseParser.FROM, 0);
        }

        public TerminalNode FUNCTION() {
            return getToken(SqlBaseParser.FUNCTION, 0);
        }

        public TerminalNode FUNCTIONS() {
            return getToken(SqlBaseParser.FUNCTIONS, 0);
        }

        public TerminalNode GLOBAL() {
            return getToken(SqlBaseParser.GLOBAL, 0);
        }

        public TerminalNode GRANT() {
            return getToken(SqlBaseParser.GRANT, 0);
        }

        public TerminalNode GROUP() {
            return getToken(SqlBaseParser.GROUP, 0);
        }

        public TerminalNode GROUPING() {
            return getToken(SqlBaseParser.GROUPING, 0);
        }

        public TerminalNode HAVING() {
            return getToken(SqlBaseParser.HAVING, 0);
        }

        public TerminalNode HOUR() {
            return getToken(SqlBaseParser.HOUR, 0);
        }

        public TerminalNode IF() {
            return getToken(SqlBaseParser.IF, 0);
        }

        public TerminalNode IGNORE() {
            return getToken(SqlBaseParser.IGNORE, 0);
        }

        public TerminalNode IMPORT() {
            return getToken(SqlBaseParser.IMPORT, 0);
        }

        public TerminalNode IN() {
            return getToken(SqlBaseParser.IN, 0);
        }

        public TerminalNode INDEX() {
            return getToken(SqlBaseParser.INDEX, 0);
        }

        public TerminalNode INDEXES() {
            return getToken(SqlBaseParser.INDEXES, 0);
        }

        public TerminalNode INPATH() {
            return getToken(SqlBaseParser.INPATH, 0);
        }

        public TerminalNode INPUTFORMAT() {
            return getToken(SqlBaseParser.INPUTFORMAT, 0);
        }

        public TerminalNode INSERT() {
            return getToken(SqlBaseParser.INSERT, 0);
        }

        public TerminalNode INTERVAL() {
            return getToken(SqlBaseParser.INTERVAL, 0);
        }

        public TerminalNode INTO() {
            return getToken(SqlBaseParser.INTO, 0);
        }

        public TerminalNode IS() {
            return getToken(SqlBaseParser.IS, 0);
        }

        public TerminalNode ITEMS() {
            return getToken(SqlBaseParser.ITEMS, 0);
        }

        public TerminalNode KEYS() {
            return getToken(SqlBaseParser.KEYS, 0);
        }

        public TerminalNode LAST() {
            return getToken(SqlBaseParser.LAST, 0);
        }

        public TerminalNode LAZY() {
            return getToken(SqlBaseParser.LAZY, 0);
        }

        public TerminalNode LEADING() {
            return getToken(SqlBaseParser.LEADING, 0);
        }

        public TerminalNode LIKE() {
            return getToken(SqlBaseParser.LIKE, 0);
        }

        public TerminalNode ILIKE() {
            return getToken(SqlBaseParser.ILIKE, 0);
        }

        public TerminalNode LIMIT() {
            return getToken(SqlBaseParser.LIMIT, 0);
        }

        public TerminalNode LINES() {
            return getToken(SqlBaseParser.LINES, 0);
        }

        public TerminalNode LIST() {
            return getToken(SqlBaseParser.LIST, 0);
        }

        public TerminalNode LOAD() {
            return getToken(SqlBaseParser.LOAD, 0);
        }

        public TerminalNode LOCAL() {
            return getToken(SqlBaseParser.LOCAL, 0);
        }

        public TerminalNode LOCATION() {
            return getToken(SqlBaseParser.LOCATION, 0);
        }

        public TerminalNode LOCK() {
            return getToken(SqlBaseParser.LOCK, 0);
        }

        public TerminalNode LOCKS() {
            return getToken(SqlBaseParser.LOCKS, 0);
        }

        public TerminalNode LOGICAL() {
            return getToken(SqlBaseParser.LOGICAL, 0);
        }

        public TerminalNode MACRO() {
            return getToken(SqlBaseParser.MACRO, 0);
        }

        public TerminalNode MAP() {
            return getToken(SqlBaseParser.MAP, 0);
        }

        public TerminalNode MATCHED() {
            return getToken(SqlBaseParser.MATCHED, 0);
        }

        public TerminalNode MERGE() {
            return getToken(SqlBaseParser.MERGE, 0);
        }

        public TerminalNode MICROSECOND() {
            return getToken(SqlBaseParser.MICROSECOND, 0);
        }

        public TerminalNode MILLISECOND() {
            return getToken(SqlBaseParser.MILLISECOND, 0);
        }

        public TerminalNode MINUTE() {
            return getToken(SqlBaseParser.MINUTE, 0);
        }

        public TerminalNode MONTH() {
            return getToken(SqlBaseParser.MONTH, 0);
        }

        public TerminalNode MSCK() {
            return getToken(SqlBaseParser.MSCK, 0);
        }

        public TerminalNode NAMESPACE() {
            return getToken(SqlBaseParser.NAMESPACE, 0);
        }

        public TerminalNode NAMESPACES() {
            return getToken(SqlBaseParser.NAMESPACES, 0);
        }

        public TerminalNode NO() {
            return getToken(SqlBaseParser.NO, 0);
        }

        public TerminalNode NOT() {
            return getToken(SqlBaseParser.NOT, 0);
        }

        public TerminalNode NULL() {
            return getToken(SqlBaseParser.NULL, 0);
        }

        public TerminalNode NULLS() {
            return getToken(SqlBaseParser.NULLS, 0);
        }

        public TerminalNode OF() {
            return getToken(SqlBaseParser.OF, 0);
        }

        public TerminalNode OFFSET() {
            return getToken(SqlBaseParser.OFFSET, 0);
        }

        public TerminalNode ONLY() {
            return getToken(SqlBaseParser.ONLY, 0);
        }

        public TerminalNode OPTION() {
            return getToken(SqlBaseParser.OPTION, 0);
        }

        public TerminalNode OPTIONS() {
            return getToken(SqlBaseParser.OPTIONS, 0);
        }

        public TerminalNode OR() {
            return getToken(SqlBaseParser.OR, 0);
        }

        public TerminalNode ORDER() {
            return getToken(SqlBaseParser.ORDER, 0);
        }

        public TerminalNode OUT() {
            return getToken(SqlBaseParser.OUT, 0);
        }

        public TerminalNode OUTER() {
            return getToken(SqlBaseParser.OUTER, 0);
        }

        public TerminalNode OUTPUTFORMAT() {
            return getToken(SqlBaseParser.OUTPUTFORMAT, 0);
        }

        public TerminalNode OVER() {
            return getToken(SqlBaseParser.OVER, 0);
        }

        public TerminalNode OVERLAPS() {
            return getToken(SqlBaseParser.OVERLAPS, 0);
        }

        public TerminalNode OVERLAY() {
            return getToken(SqlBaseParser.OVERLAY, 0);
        }

        public TerminalNode OVERWRITE() {
            return getToken(SqlBaseParser.OVERWRITE, 0);
        }

        public TerminalNode PARTITION() {
            return getToken(SqlBaseParser.PARTITION, 0);
        }

        public TerminalNode PARTITIONED() {
            return getToken(SqlBaseParser.PARTITIONED, 0);
        }

        public TerminalNode PARTITIONS() {
            return getToken(SqlBaseParser.PARTITIONS, 0);
        }

        public TerminalNode PERCENTILE_CONT() {
            return getToken(SqlBaseParser.PERCENTILE_CONT, 0);
        }

        public TerminalNode PERCENTILE_DISC() {
            return getToken(SqlBaseParser.PERCENTILE_DISC, 0);
        }

        public TerminalNode PERCENTLIT() {
            return getToken(SqlBaseParser.PERCENTLIT, 0);
        }

        public TerminalNode PIVOT() {
            return getToken(SqlBaseParser.PIVOT, 0);
        }

        public TerminalNode PLACING() {
            return getToken(SqlBaseParser.PLACING, 0);
        }

        public TerminalNode POSITION() {
            return getToken(SqlBaseParser.POSITION, 0);
        }

        public TerminalNode PRECEDING() {
            return getToken(SqlBaseParser.PRECEDING, 0);
        }

        public TerminalNode PRIMARY() {
            return getToken(SqlBaseParser.PRIMARY, 0);
        }

        public TerminalNode PRINCIPALS() {
            return getToken(SqlBaseParser.PRINCIPALS, 0);
        }

        public TerminalNode PROPERTIES() {
            return getToken(SqlBaseParser.PROPERTIES, 0);
        }

        public TerminalNode PURGE() {
            return getToken(SqlBaseParser.PURGE, 0);
        }

        public TerminalNode QUARTER() {
            return getToken(SqlBaseParser.QUARTER, 0);
        }

        public TerminalNode QUERY() {
            return getToken(SqlBaseParser.QUERY, 0);
        }

        public TerminalNode RANGE() {
            return getToken(SqlBaseParser.RANGE, 0);
        }

        public TerminalNode RECORDREADER() {
            return getToken(SqlBaseParser.RECORDREADER, 0);
        }

        public TerminalNode RECORDWRITER() {
            return getToken(SqlBaseParser.RECORDWRITER, 0);
        }

        public TerminalNode RECOVER() {
            return getToken(SqlBaseParser.RECOVER, 0);
        }

        public TerminalNode REDUCE() {
            return getToken(SqlBaseParser.REDUCE, 0);
        }

        public TerminalNode REFERENCES() {
            return getToken(SqlBaseParser.REFERENCES, 0);
        }

        public TerminalNode REFRESH() {
            return getToken(SqlBaseParser.REFRESH, 0);
        }

        public TerminalNode RENAME() {
            return getToken(SqlBaseParser.RENAME, 0);
        }

        public TerminalNode REPAIR() {
            return getToken(SqlBaseParser.REPAIR, 0);
        }

        public TerminalNode REPEATABLE() {
            return getToken(SqlBaseParser.REPEATABLE, 0);
        }

        public TerminalNode REPLACE() {
            return getToken(SqlBaseParser.REPLACE, 0);
        }

        public TerminalNode RESET() {
            return getToken(SqlBaseParser.RESET, 0);
        }

        public TerminalNode RESPECT() {
            return getToken(SqlBaseParser.RESPECT, 0);
        }

        public TerminalNode RESTRICT() {
            return getToken(SqlBaseParser.RESTRICT, 0);
        }

        public TerminalNode REVOKE() {
            return getToken(SqlBaseParser.REVOKE, 0);
        }

        public TerminalNode RLIKE() {
            return getToken(SqlBaseParser.RLIKE, 0);
        }

        public TerminalNode ROLE() {
            return getToken(SqlBaseParser.ROLE, 0);
        }

        public TerminalNode ROLES() {
            return getToken(SqlBaseParser.ROLES, 0);
        }

        public TerminalNode ROLLBACK() {
            return getToken(SqlBaseParser.ROLLBACK, 0);
        }

        public TerminalNode ROLLUP() {
            return getToken(SqlBaseParser.ROLLUP, 0);
        }

        public TerminalNode ROW() {
            return getToken(SqlBaseParser.ROW, 0);
        }

        public TerminalNode ROWS() {
            return getToken(SqlBaseParser.ROWS, 0);
        }

        public TerminalNode SCHEMA() {
            return getToken(SqlBaseParser.SCHEMA, 0);
        }

        public TerminalNode SCHEMAS() {
            return getToken(SqlBaseParser.SCHEMAS, 0);
        }

        public TerminalNode SECOND() {
            return getToken(SqlBaseParser.SECOND, 0);
        }

        public TerminalNode SELECT() {
            return getToken(SqlBaseParser.SELECT, 0);
        }

        public TerminalNode SEPARATED() {
            return getToken(SqlBaseParser.SEPARATED, 0);
        }

        public TerminalNode SERDE() {
            return getToken(SqlBaseParser.SERDE, 0);
        }

        public TerminalNode SERDEPROPERTIES() {
            return getToken(SqlBaseParser.SERDEPROPERTIES, 0);
        }

        public TerminalNode SESSION_USER() {
            return getToken(SqlBaseParser.SESSION_USER, 0);
        }

        public TerminalNode SET() {
            return getToken(SqlBaseParser.SET, 0);
        }

        public TerminalNode SETS() {
            return getToken(SqlBaseParser.SETS, 0);
        }

        public TerminalNode SHOW() {
            return getToken(SqlBaseParser.SHOW, 0);
        }

        public TerminalNode SKEWED() {
            return getToken(SqlBaseParser.SKEWED, 0);
        }

        public TerminalNode SOME() {
            return getToken(SqlBaseParser.SOME, 0);
        }

        public TerminalNode SORT() {
            return getToken(SqlBaseParser.SORT, 0);
        }

        public TerminalNode SORTED() {
            return getToken(SqlBaseParser.SORTED, 0);
        }

        public TerminalNode START() {
            return getToken(SqlBaseParser.START, 0);
        }

        public TerminalNode STATISTICS() {
            return getToken(SqlBaseParser.STATISTICS, 0);
        }

        public TerminalNode STORED() {
            return getToken(SqlBaseParser.STORED, 0);
        }

        public TerminalNode STRATIFY() {
            return getToken(SqlBaseParser.STRATIFY, 0);
        }

        public TerminalNode STRUCT() {
            return getToken(SqlBaseParser.STRUCT, 0);
        }

        public TerminalNode SUBSTR() {
            return getToken(SqlBaseParser.SUBSTR, 0);
        }

        public TerminalNode SUBSTRING() {
            return getToken(SqlBaseParser.SUBSTRING, 0);
        }

        public TerminalNode SYNC() {
            return getToken(SqlBaseParser.SYNC, 0);
        }

        public TerminalNode SYSTEM_TIME() {
            return getToken(SqlBaseParser.SYSTEM_TIME, 0);
        }

        public TerminalNode SYSTEM_VERSION() {
            return getToken(SqlBaseParser.SYSTEM_VERSION, 0);
        }

        public TerminalNode TABLE() {
            return getToken(SqlBaseParser.TABLE, 0);
        }

        public TerminalNode TABLES() {
            return getToken(SqlBaseParser.TABLES, 0);
        }

        public TerminalNode TABLESAMPLE() {
            return getToken(SqlBaseParser.TABLESAMPLE, 0);
        }

        public TerminalNode TBLPROPERTIES() {
            return getToken(SqlBaseParser.TBLPROPERTIES, 0);
        }

        public TerminalNode TEMPORARY() {
            return getToken(SqlBaseParser.TEMPORARY, 0);
        }

        public TerminalNode TERMINATED() {
            return getToken(SqlBaseParser.TERMINATED, 0);
        }

        public TerminalNode THEN() {
            return getToken(SqlBaseParser.THEN, 0);
        }

        public TerminalNode TIME() {
            return getToken(SqlBaseParser.TIME, 0);
        }

        public TerminalNode TIMESTAMP() {
            return getToken(SqlBaseParser.TIMESTAMP, 0);
        }

        public TerminalNode TIMESTAMPADD() {
            return getToken(SqlBaseParser.TIMESTAMPADD, 0);
        }

        public TerminalNode TIMESTAMPDIFF() {
            return getToken(SqlBaseParser.TIMESTAMPDIFF, 0);
        }

        public TerminalNode TO() {
            return getToken(SqlBaseParser.TO, 0);
        }

        public TerminalNode TOUCH() {
            return getToken(SqlBaseParser.TOUCH, 0);
        }

        public TerminalNode TRAILING() {
            return getToken(SqlBaseParser.TRAILING, 0);
        }

        public TerminalNode TRANSACTION() {
            return getToken(SqlBaseParser.TRANSACTION, 0);
        }

        public TerminalNode TRANSACTIONS() {
            return getToken(SqlBaseParser.TRANSACTIONS, 0);
        }

        public TerminalNode TRANSFORM() {
            return getToken(SqlBaseParser.TRANSFORM, 0);
        }

        public TerminalNode TRIM() {
            return getToken(SqlBaseParser.TRIM, 0);
        }

        public TerminalNode TRUE() {
            return getToken(SqlBaseParser.TRUE, 0);
        }

        public TerminalNode TRUNCATE() {
            return getToken(SqlBaseParser.TRUNCATE, 0);
        }

        public TerminalNode TRY_CAST() {
            return getToken(SqlBaseParser.TRY_CAST, 0);
        }

        public TerminalNode TYPE() {
            return getToken(SqlBaseParser.TYPE, 0);
        }

        public TerminalNode UNARCHIVE() {
            return getToken(SqlBaseParser.UNARCHIVE, 0);
        }

        public TerminalNode UNBOUNDED() {
            return getToken(SqlBaseParser.UNBOUNDED, 0);
        }

        public TerminalNode UNCACHE() {
            return getToken(SqlBaseParser.UNCACHE, 0);
        }

        public TerminalNode UNIQUE() {
            return getToken(SqlBaseParser.UNIQUE, 0);
        }

        public TerminalNode UNKNOWN() {
            return getToken(SqlBaseParser.UNKNOWN, 0);
        }

        public TerminalNode UNLOCK() {
            return getToken(SqlBaseParser.UNLOCK, 0);
        }

        public TerminalNode UNSET() {
            return getToken(SqlBaseParser.UNSET, 0);
        }

        public TerminalNode UPDATE() {
            return getToken(SqlBaseParser.UPDATE, 0);
        }

        public TerminalNode USE() {
            return getToken(SqlBaseParser.USE, 0);
        }

        public TerminalNode USER() {
            return getToken(SqlBaseParser.USER, 0);
        }

        public TerminalNode VALUES() {
            return getToken(SqlBaseParser.VALUES, 0);
        }

        public TerminalNode VERSION() {
            return getToken(SqlBaseParser.VERSION, 0);
        }

        public TerminalNode VIEW() {
            return getToken(SqlBaseParser.VIEW, 0);
        }

        public TerminalNode VIEWS() {
            return getToken(SqlBaseParser.VIEWS, 0);
        }

        public TerminalNode WEEK() {
            return getToken(SqlBaseParser.WEEK, 0);
        }

        public TerminalNode WHEN() {
            return getToken(SqlBaseParser.WHEN, 0);
        }

        public TerminalNode WHERE() {
            return getToken(SqlBaseParser.WHERE, 0);
        }

        public TerminalNode WINDOW() {
            return getToken(SqlBaseParser.WINDOW, 0);
        }

        public TerminalNode WITH() {
            return getToken(SqlBaseParser.WITH, 0);
        }

        public TerminalNode WITHIN() {
            return getToken(SqlBaseParser.WITHIN, 0);
        }

        public TerminalNode YEAR() {
            return getToken(SqlBaseParser.YEAR, 0);
        }

        public TerminalNode ZONE() {
            return getToken(SqlBaseParser.ZONE, 0);
        }

        @Override
        public int getRuleIndex() {
            return RULE_nonReserved;
        }

        @Override
        public void enterRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).enterNonReserved(this);
        }

        @Override
        public void exitRule(ParseTreeListener listener) {
            if (listener instanceof SqlBaseParserListener) ((SqlBaseParserListener) listener).exitNonReserved(this);
        }

        @Override
        public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
            if (visitor instanceof SqlBaseParserVisitor)
                return ((SqlBaseParserVisitor<? extends T>) visitor).visitNonReserved(this);
            else return visitor.visitChildren(this);
        }
    }
}