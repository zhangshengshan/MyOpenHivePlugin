package hierachyconfig;

import com.intellij.openapi.options.ConfigurableUi;
import org.jetbrains.annotations.NotNull;

import javax.swing.*;
import java.awt.*;

/**
 * @author zhangshengshan
 */
public class MyConfigUI implements ConfigurableUi<MyConfigurable> {
    private JPanel panel1;
    private JTextField textField1;
    private JButton ColorSchemeSelect;
    private JButton FieldsFontColorButton;
    private JButton FieldBgColorButton;
    private JButton ClusterFontColorButton;
    private JPanel colorConfig;
    private JPanel shapeConfig;
    private JPanel relationConfig;
    private JButton ClusterBgColorButton;
    private JButton TableBgColorButton;
    private JButton ArrowColorButton;
    private JButton TableFontColor;
    private JCheckBox randomColorCheckBox;
    private JCheckBox uniqKeyDisplay;
    private JCheckBox fieldsDisplay;
    private JComboBox tableSize;
    private JComboBox fieldSize;
    private JComboBox arrowSize;
    private JComboBox tableShape;
    private JComboBox fieldsShape;
    private JComboBox arrowShape;
    private JTabbedPane tabbedPane1;
    private JButton DASHBOARDFONTButton;
    private JButton DATASETFONTButton;
    private JButton CLICKHOUSEFONTButton;
    private JButton HIVEFONTButton;
    private JButton MYSQLFONTButton;
    private JButton MYSQLBGButton;
    private JButton HIVEBGButton;
    private JButton CLICKHOUSEBGButton;
    private JButton dataSetBGButton;
    private JButton DASHBOARDBGButton;
    private JCheckBox upStreamCheckBox;
    private JCheckBox downStreamCheckBox;
    private JCheckBox colorAdvanceCheckBox;
    private JCheckBox hiveLayerColorCheckBox;
    private JButton STGBGButton;
    private JButton ODSBGButton;
    private JButton DWDBGButton;
    private JButton DWMBGButton;
    private JButton APPBGButton;
    private JButton DIMBGButton;
    private JCheckBox filterCheckBox;
    private JButton filterBGButton;
    private JButton filterFontButton;
    private JTextField textField2;
    private JTextArea textArea1;
    private JTextArea textArea2;
    private JButton keyWord1BG;
    private JButton KeyWord2BG;
    private JButton KeyWord3BG;
    private JButton STGFontButton;
    private JButton ODSFontButton;
    private JButton DWDFontButton;
    private JButton DWMFontButton;
    private JButton APPFontButton;
    private JButton DIMFontButton;
    private JButton colorRestButton;
    private JComboBox hierachyDepth;
    private JRadioButton batchFieldHierachy;
    private JRadioButton OpenAfterGen;
    private JTextField outputPath;
    private JRadioButton downloadAfterExtractRadioButton;
    private JRadioButton genScoutCmdsRadioButton;
    private JComboBox tennonModeSelector;
    private JRadioButton OnlyHiveTable;


    private JButton color1Button;
    private JButton color2Button;
    private JButton color3Button;
    private JButton color4Button;
    private JTextField USERNAMETextField;
    private JPasswordField PASSWORDPasswordField;
    private JTextField IPTextField;
    private JTextField PORTTextField;
    private JTextField jdbcURL;


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(5, 5, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        textField1 = new JTextField();
        panel2.add(textField1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 4, 5, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        tabbedPane1 = new JTabbedPane();
        panel2.add(tabbedPane1, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane1.addTab("基本设置", panel3);
        colorConfig = new JPanel();
        colorConfig.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(7, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel3.add(colorConfig, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        ClusterBgColorButton = new JButton();
        ClusterBgColorButton.setText("ClusterBgColor");
        colorConfig.add(ClusterBgColorButton, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        FieldsFontColorButton = new JButton();
        FieldsFontColorButton.setText("FieldsFontColor");
        colorConfig.add(FieldsFontColorButton, new com.intellij.uiDesigner.core.GridConstraints(5, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        FieldBgColorButton = new JButton();
        FieldBgColorButton.setText("FieldBgColor");
        colorConfig.add(FieldBgColorButton, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ClusterFontColorButton = new JButton();
        ClusterFontColorButton.setText("ClusterFontColor");
        colorConfig.add(ClusterFontColorButton, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        TableBgColorButton = new JButton();
        TableBgColorButton.setText("TableBgColor");
        colorConfig.add(TableBgColorButton, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ArrowColorButton = new JButton();
        ArrowColorButton.setText("ArrowColor");
        colorConfig.add(ArrowColorButton, new com.intellij.uiDesigner.core.GridConstraints(6, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        TableFontColor = new JButton();
        TableFontColor.setActionCommand("TableFontColor");
        TableFontColor.setText("TableFontColor");
        colorConfig.add(TableFontColor, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        shapeConfig = new JPanel();
        shapeConfig.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel3.add(shapeConfig, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        tableShape = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("1");
        defaultComboBoxModel1.addElement("2");
        defaultComboBoxModel1.addElement("3");
        tableShape.setModel(defaultComboBoxModel1);
        shapeConfig.add(tableShape, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        fieldsShape = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel2 = new DefaultComboBoxModel();
        defaultComboBoxModel2.addElement("1");
        defaultComboBoxModel2.addElement("2");
        defaultComboBoxModel2.addElement("3");
        fieldsShape.setModel(defaultComboBoxModel2);
        shapeConfig.add(fieldsShape, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        arrowShape = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel3 = new DefaultComboBoxModel();
        arrowShape.setModel(defaultComboBoxModel3);
        shapeConfig.add(arrowShape, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("fieldShape");
        shapeConfig.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("tableShape");
        shapeConfig.add(label2, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("arrowShape");
        shapeConfig.add(label3, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        relationConfig = new JPanel();
        relationConfig.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel3.add(relationConfig, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        tableSize = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel4 = new DefaultComboBoxModel();
        defaultComboBoxModel4.addElement("1");
        defaultComboBoxModel4.addElement("2");
        defaultComboBoxModel4.addElement("3");
        defaultComboBoxModel4.addElement("4");
        defaultComboBoxModel4.addElement("5");
        tableSize.setModel(defaultComboBoxModel4);
        relationConfig.add(tableSize, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        fieldSize = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel5 = new DefaultComboBoxModel();
        defaultComboBoxModel5.addElement("1");
        defaultComboBoxModel5.addElement("2");
        defaultComboBoxModel5.addElement("3");
        defaultComboBoxModel5.addElement("4");
        fieldSize.setModel(defaultComboBoxModel5);
        relationConfig.add(fieldSize, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        arrowSize = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel6 = new DefaultComboBoxModel();
        defaultComboBoxModel6.addElement("1");
        defaultComboBoxModel6.addElement("2");
        defaultComboBoxModel6.addElement("3");
        defaultComboBoxModel6.addElement("4");
        arrowSize.setModel(defaultComboBoxModel6);
        relationConfig.add(arrowSize, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("fieldSize");
        relationConfig.add(label4, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label5 = new JLabel();
        label5.setText("arrowSize");
        relationConfig.add(label5, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label6 = new JLabel();
        label6.setText("tableSize");
        relationConfig.add(label6, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(9, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel3.add(panel4, new com.intellij.uiDesigner.core.GridConstraints(0, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        ColorSchemeSelect = new JButton();
        ColorSchemeSelect.setText("ColorScheme选择");
        panel4.add(ColorSchemeSelect, new com.intellij.uiDesigner.core.GridConstraints(6, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        randomColorCheckBox = new JCheckBox();
        randomColorCheckBox.setText("RandomColor");
        panel4.add(randomColorCheckBox, new com.intellij.uiDesigner.core.GridConstraints(5, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        uniqKeyDisplay = new JCheckBox();
        uniqKeyDisplay.setText("UniqKey显示");
        panel4.add(uniqKeyDisplay, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        fieldsDisplay = new JCheckBox();
        fieldsDisplay.setText("Fields显示");
        panel4.add(fieldsDisplay, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        upStreamCheckBox = new JCheckBox();
        upStreamCheckBox.setText("UpStream");
        panel4.add(upStreamCheckBox, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        downStreamCheckBox = new JCheckBox();
        downStreamCheckBox.setText("DownStream");
        panel4.add(downStreamCheckBox, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        colorAdvanceCheckBox = new JCheckBox();
        colorAdvanceCheckBox.setText("ColorAdvance");
        panel4.add(colorAdvanceCheckBox, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        hierachyDepth = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel7 = new DefaultComboBoxModel();
        defaultComboBoxModel7.addElement("5");
        defaultComboBoxModel7.addElement("4");
        defaultComboBoxModel7.addElement("3");
        defaultComboBoxModel7.addElement("2");
        defaultComboBoxModel7.addElement("1");
        hierachyDepth.setModel(defaultComboBoxModel7);
        panel4.add(hierachyDepth, new com.intellij.uiDesigner.core.GridConstraints(8, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        batchFieldHierachy = new JRadioButton();
        batchFieldHierachy.setText("批量处理字段血缘");
        panel4.add(batchFieldHierachy, new com.intellij.uiDesigner.core.GridConstraints(7, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(12, 5, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane1.addTab("高级设置", panel5);
        DASHBOARDFONTButton = new JButton();
        DASHBOARDFONTButton.setText("DASHBOARDFONT");
        panel5.add(DASHBOARDFONTButton, new com.intellij.uiDesigner.core.GridConstraints(4, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        DATASETFONTButton = new JButton();
        DATASETFONTButton.setText("DATASETFONT ");
        panel5.add(DATASETFONTButton, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        CLICKHOUSEFONTButton = new JButton();
        CLICKHOUSEFONTButton.setText("CLICKHOUSEFONT ");
        panel5.add(CLICKHOUSEFONTButton, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        HIVEFONTButton = new JButton();
        HIVEFONTButton.setText("HIVEFONT");
        panel5.add(HIVEFONTButton, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        MYSQLFONTButton = new JButton();
        MYSQLFONTButton.setText("MYSQLFONT ");
        panel5.add(MYSQLFONTButton, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        MYSQLBGButton = new JButton();
        MYSQLBGButton.setText("MYSQLBG");
        panel5.add(MYSQLBGButton, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        HIVEBGButton = new JButton();
        HIVEBGButton.setText("HIVEBG");
        panel5.add(HIVEBGButton, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        CLICKHOUSEBGButton = new JButton();
        CLICKHOUSEBGButton.setText("CLICKHOUSEBG");
        panel5.add(CLICKHOUSEBGButton, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        dataSetBGButton = new JButton();
        dataSetBGButton.setText("DataSetBG");
        panel5.add(dataSetBGButton, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        DASHBOARDBGButton = new JButton();
        DASHBOARDBGButton.setText("DASHBOARDBG");
        panel5.add(DASHBOARDBGButton, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        hiveLayerColorCheckBox = new JCheckBox();
        hiveLayerColorCheckBox.setText("HiveLayerColor");
        panel5.add(hiveLayerColorCheckBox, new com.intellij.uiDesigner.core.GridConstraints(5, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        STGBGButton = new JButton();
        STGBGButton.setText("STGBG");
        panel5.add(STGBGButton, new com.intellij.uiDesigner.core.GridConstraints(6, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ODSBGButton = new JButton();
        ODSBGButton.setText("ODSBG");
        panel5.add(ODSBGButton, new com.intellij.uiDesigner.core.GridConstraints(7, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        DWDBGButton = new JButton();
        DWDBGButton.setText("DWDBG");
        panel5.add(DWDBGButton, new com.intellij.uiDesigner.core.GridConstraints(8, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        DWMBGButton = new JButton();
        DWMBGButton.setText("DWMBG");
        panel5.add(DWMBGButton, new com.intellij.uiDesigner.core.GridConstraints(9, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        APPBGButton = new JButton();
        APPBGButton.setText("APPBG");
        panel5.add(APPBGButton, new com.intellij.uiDesigner.core.GridConstraints(10, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        DIMBGButton = new JButton();
        DIMBGButton.setText("DIMBG");
        panel5.add(DIMBGButton, new com.intellij.uiDesigner.core.GridConstraints(11, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        filterCheckBox = new JCheckBox();
        filterCheckBox.setText("过滤");
        panel5.add(filterCheckBox, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        filterBGButton = new JButton();
        filterBGButton.setText("过滤BG");
        panel5.add(filterBGButton, new com.intellij.uiDesigner.core.GridConstraints(0, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        filterFontButton = new JButton();
        filterFontButton.setText("过滤Font");
        panel5.add(filterFontButton, new com.intellij.uiDesigner.core.GridConstraints(0, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JCheckBox checkBox1 = new JCheckBox();
        checkBox1.setText("Drop");
        panel5.add(checkBox1, new com.intellij.uiDesigner.core.GridConstraints(1, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        textField2 = new JTextField();
        panel5.add(textField2, new com.intellij.uiDesigner.core.GridConstraints(1, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        textArea1 = new JTextArea();
        panel5.add(textArea1, new com.intellij.uiDesigner.core.GridConstraints(2, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        textArea2 = new JTextArea();
        panel5.add(textArea2, new com.intellij.uiDesigner.core.GridConstraints(3, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        keyWord1BG = new JButton();
        keyWord1BG.setText("KeyWord1BG");
        panel5.add(keyWord1BG, new com.intellij.uiDesigner.core.GridConstraints(1, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        KeyWord2BG = new JButton();
        KeyWord2BG.setText("KeyWord2BG");
        panel5.add(KeyWord2BG, new com.intellij.uiDesigner.core.GridConstraints(2, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        KeyWord3BG = new JButton();
        KeyWord3BG.setText("KeyWord3BG");
        panel5.add(KeyWord3BG, new com.intellij.uiDesigner.core.GridConstraints(3, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        STGFontButton = new JButton();
        STGFontButton.setText("STGFont");
        panel5.add(STGFontButton, new com.intellij.uiDesigner.core.GridConstraints(6, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ODSFontButton = new JButton();
        ODSFontButton.setText("ODSFont");
        panel5.add(ODSFontButton, new com.intellij.uiDesigner.core.GridConstraints(7, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        DWDFontButton = new JButton();
        DWDFontButton.setText("DWDFont");
        panel5.add(DWDFontButton, new com.intellij.uiDesigner.core.GridConstraints(8, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        DWMFontButton = new JButton();
        DWMFontButton.setText("DWMFont");
        panel5.add(DWMFontButton, new com.intellij.uiDesigner.core.GridConstraints(9, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        APPFontButton = new JButton();
        APPFontButton.setText("APPFont");
        panel5.add(APPFontButton, new com.intellij.uiDesigner.core.GridConstraints(10, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        DIMFontButton = new JButton();
        DIMFontButton.setText("DIMFont");
        panel5.add(DIMFontButton, new com.intellij.uiDesigner.core.GridConstraints(11, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        colorRestButton = new JButton();
        colorRestButton.setText("ColorRest");
        panel5.add(colorRestButton, new com.intellij.uiDesigner.core.GridConstraints(4, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        OpenAfterGen = new JRadioButton();
        OpenAfterGen.setText("OpenAterGen");
        panel5.add(OpenAfterGen, new com.intellij.uiDesigner.core.GridConstraints(6, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        outputPath = new JTextField();
        outputPath.setText("outputPath");
        panel5.add(outputPath, new com.intellij.uiDesigner.core.GridConstraints(6, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        genScoutCmdsRadioButton = new JRadioButton();
        genScoutCmdsRadioButton.setText("genScoutCmds");
        panel5.add(genScoutCmdsRadioButton, new com.intellij.uiDesigner.core.GridConstraints(7, 4, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tennonModeSelector = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel8 = new DefaultComboBoxModel();
        defaultComboBoxModel8.addElement("Simple");
        defaultComboBoxModel8.addElement("Complex");
        tennonModeSelector.setModel(defaultComboBoxModel8);
        panel5.add(tennonModeSelector, new com.intellij.uiDesigner.core.GridConstraints(7, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        color1Button = new JButton();
        color1Button.setText("Color1");
        panel5.add(color1Button, new com.intellij.uiDesigner.core.GridConstraints(6, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        color2Button = new JButton();
        color2Button.setText("Color2");
        panel5.add(color2Button, new com.intellij.uiDesigner.core.GridConstraints(7, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        color3Button = new JButton();
        color3Button.setText("Color3");
        panel5.add(color3Button, new com.intellij.uiDesigner.core.GridConstraints(8, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        color4Button = new JButton();
        color4Button.setText("Color4");
        panel5.add(color4Button, new com.intellij.uiDesigner.core.GridConstraints(9, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel6 = new JPanel();
        panel6.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane1.addTab("其他配置", panel6);
        downloadAfterExtractRadioButton = new JRadioButton();
        downloadAfterExtractRadioButton.setText("DownloadAfterExtract");
        panel6.add(downloadAfterExtractRadioButton, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        panel6.add(spacer1, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        OnlyHiveTable = new JRadioButton();
        OnlyHiveTable.setText("OnlyHiveHierachy");
        panel6.add(OnlyHiveTable, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel7 = new JPanel();
        panel7.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(4, 4, new Insets(0, 0, 0, 0), -1, -1));
        panel6.add(panel7, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer();
        panel7.add(spacer2, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_VERTICAL, 1, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        IPTextField = new JTextField();
        IPTextField.setText("IP");
        panel7.add(IPTextField, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        PASSWORDPasswordField = new JPasswordField();
        PASSWORDPasswordField.setText("PASSWORD");
        panel7.add(PASSWORDPasswordField, new com.intellij.uiDesigner.core.GridConstraints(1, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        USERNAMETextField = new JTextField();
        USERNAMETextField.setText("USERNAME");
        panel7.add(USERNAMETextField, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        PORTTextField = new JTextField();
        PORTTextField.setText("PORT");
        panel7.add(PORTTextField, new com.intellij.uiDesigner.core.GridConstraints(0, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label7 = new JLabel();
        label7.setText("HOST");
        panel7.add(label7, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label8 = new JLabel();
        label8.setText("PORT");
        panel7.add(label8, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label9 = new JLabel();
        label9.setText("USER");
        panel7.add(label9, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label10 = new JLabel();
        label10.setText("PASS");
        panel7.add(label10, new com.intellij.uiDesigner.core.GridConstraints(1, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label11 = new JLabel();
        label11.setText("JDBCURL");
        panel7.add(label11, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        jdbcURL = new JTextField();
        jdbcURL.setText("");
        panel7.add(jdbcURL, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        label6.setLabelFor(tableSize);
    }
    public MyConfigUI(MyConfigurable settings) {

        ClusterBgColorButton.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            ClusterBgColorButton.setBackground(color);
            ClusterBgColorButton.setForeground(color);
        });
        ClusterFontColorButton.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            ClusterFontColorButton.setBackground(color);
            ClusterFontColorButton.setForeground(color);
        });

        TableBgColorButton.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            TableBgColorButton.setBackground(color);
            TableBgColorButton.setForeground(color);
        });
        TableFontColor.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            TableFontColor.setBackground(color);
            TableFontColor.setForeground(color);
        });
        FieldBgColorButton.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            FieldBgColorButton.setBackground(color);
            FieldBgColorButton.setForeground(color);
        });
        FieldsFontColorButton.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            FieldsFontColorButton.setBackground(color);
            FieldsFontColorButton.setForeground(color);
        });
        ArrowColorButton.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            ArrowColorButton.setBackground(color);
            ArrowColorButton.setForeground(color);
        });
        STGBGButton.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            STGBGButton.setBackground(color);
            STGBGButton.setForeground(color);
        });

        ODSBGButton.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            ODSBGButton.setBackground(color);
            ODSBGButton.setForeground(color);
        });
        DWDBGButton.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            DWDBGButton.setBackground(color);
            DWDBGButton.setForeground(color);
        });
        DWMBGButton.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            DWMBGButton.setBackground(color);
            DWMBGButton.setForeground(color);
        });
        APPBGButton.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            APPBGButton.setBackground(color);
            APPBGButton.setForeground(color);
        });
        DIMBGButton.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            DIMBGButton.setBackground(color);
            DIMBGButton.setForeground(color);
        });
        filterBGButton.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            filterBGButton.setBackground(color);
            filterBGButton.setForeground(color);
        });
        filterFontButton.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            filterFontButton.setBackground(color);
            filterFontButton.setForeground(color);
        });

        keyWord1BG.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            keyWord1BG.setBackground(color);
            keyWord1BG.setForeground(color);
        });

        KeyWord2BG.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            KeyWord2BG.setBackground(color);
            KeyWord2BG.setForeground(color);
        });

        KeyWord3BG.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            KeyWord3BG.setBackground(color);
            KeyWord3BG.setForeground(color);
        });

        MYSQLFONTButton.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            MYSQLFONTButton.setBackground(color);
            MYSQLFONTButton.setForeground(color);
        });
        HIVEFONTButton.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            HIVEFONTButton.setBackground(color);
            HIVEFONTButton.setForeground(color);
        });
        CLICKHOUSEFONTButton.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            CLICKHOUSEFONTButton.setBackground(color);
            CLICKHOUSEFONTButton.setForeground(color);
        });
        DATASETFONTButton.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            DATASETFONTButton.setBackground(color);
            DATASETFONTButton.setForeground(color);
        });
        DASHBOARDFONTButton.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            DASHBOARDFONTButton.setBackground(color);
            DASHBOARDFONTButton.setForeground(color);
        });
        STGFontButton.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            STGFontButton.setBackground(color);
            STGFontButton.setForeground(color);
        });
        ODSFontButton.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            ODSFontButton.setBackground(color);
            ODSFontButton.setForeground(color);
        });
        DWDFontButton.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            DWDFontButton.setBackground(color);
            DWDFontButton.setForeground(color);
        });
        DWMFontButton.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            DWMFontButton.setBackground(color);
            DWMFontButton.setForeground(color);
        });
        APPFontButton.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            APPFontButton.setBackground(color);
            APPFontButton.setForeground(color);
        });
        DIMFontButton.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            DIMFontButton.setBackground(color);
            DIMFontButton.setForeground(color);
        });
        MYSQLBGButton.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            MYSQLBGButton.setBackground(color);
            MYSQLBGButton.setForeground(color);
        });
        MYSQLFONTButton.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            MYSQLFONTButton.setBackground(color);
            MYSQLFONTButton.setForeground(color);
        });
        HIVEBGButton.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            HIVEBGButton.setBackground(color);
            HIVEBGButton.setForeground(color);
        });
        HIVEFONTButton.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            HIVEFONTButton.setBackground(color);
            HIVEFONTButton.setForeground(color);
        });
        CLICKHOUSEBGButton.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            CLICKHOUSEBGButton.setBackground(color);
            CLICKHOUSEBGButton.setForeground(color);
        });
        CLICKHOUSEFONTButton.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            CLICKHOUSEFONTButton.setBackground(color);
            CLICKHOUSEFONTButton.setForeground(color);
        });
        dataSetBGButton.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            dataSetBGButton.setBackground(color);
            dataSetBGButton.setForeground(color);
        });
        DATASETFONTButton.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            DATASETFONTButton.setBackground(color);
            DATASETFONTButton.setForeground(color);
        });
        DASHBOARDBGButton.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            DASHBOARDBGButton.setBackground(color);
            DASHBOARDBGButton.setForeground(color);
        });
        DASHBOARDFONTButton.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            DASHBOARDFONTButton.setBackground(color);
            DASHBOARDFONTButton.setForeground(color);
        });

        color1Button.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            color1Button.setBackground(color);
            color1Button.setForeground(color);
        });

        color2Button.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            color2Button.setBackground(color);
            color2Button.setForeground(color);
        });

        color3Button.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            color3Button.setBackground(color);
            color3Button.setForeground(color);
        });

        color4Button.addActionListener(e -> {
            Color newColor = JColorChooser.showDialog(null, "Choose a color", Color.RED);
            final Color color = new Color(newColor.getRGB());
            color4Button.setBackground(color);
            color4Button.setForeground(color);
        });

        colorRestButton.addActionListener(e -> {
            HIVEBGButton.setBackground(new Color(DefaultColor.ALIZARIN_100));
            HIVEBGButton.setForeground(new Color(DefaultColor.ALIZARIN_100));
        });
        hierachyDepth.addActionListener(e -> {

        });


    }

    @Override
    public void reset(@NotNull MyConfigurable settings) {
        this.textField1.setText(settings.getParam());
        this.ClusterBgColorButton.setBackground(new Color(settings.getClusterBgColor()));
        this.ClusterFontColorButton.setForeground(new Color(settings.getClusterFontColor()));
        this.TableBgColorButton.setForeground(new Color(settings.getTableBgColor()));
        this.TableFontColor.setForeground(new Color(settings.getTableFontColor()));
        this.FieldBgColorButton.setForeground(new Color(settings.getFieldBgColor()));
        this.FieldsFontColorButton.setForeground(new Color(settings.getFieldsFontColor()));
        this.ArrowColorButton.setForeground(new Color(settings.getArrowColor()));
        this.hiveLayerColorCheckBox.setSelected(settings.isHiveLayerColor());
        this.STGBGButton.setBackground(new Color(settings.getSTGBG()));
        this.STGFontButton.setForeground(new Color(settings.getSTGFont()));
        this.ODSBGButton.setBackground(new Color(settings.getODSBG()));
        this.ODSFontButton.setForeground(new Color(settings.getODSFont()));
        this.DWDBGButton.setBackground(new Color(settings.getDWDBG()));
        this.DWDFontButton.setForeground(new Color(settings.getDWDFont()));
        this.DWMBGButton.setBackground(new Color(settings.getDWMBG()));
        this.DWMFontButton.setForeground(new Color(settings.getDWMFont()));
        this.APPBGButton.setBackground(new Color(settings.getAPPBG()));
        this.APPFontButton.setForeground(new Color(settings.getAPPFont()));
        this.DIMBGButton.setBackground(new Color(settings.getDIMBG()));
        this.DIMFontButton.setForeground(new Color(settings.getDIMFont()));

        this.MYSQLBGButton.setBackground(new Color(settings.getMYSQLBG()));
        this.MYSQLFONTButton.setForeground(new Color(settings.getMYSQLFONT()));
        this.HIVEBGButton.setBackground(new Color(settings.getHIVEBG()));
        this.HIVEFONTButton.setForeground(new Color(settings.getHIVEFONT()));
        this.CLICKHOUSEBGButton.setBackground(new Color(settings.getCLICKHOUSEBG()));
        this.CLICKHOUSEFONTButton.setForeground(new Color(settings.getCLICKHOUSEFONT()));
        this.dataSetBGButton.setBackground(new Color(settings.getDataSetBG()));
        this.DATASETFONTButton.setForeground(new Color(settings.getDataSetBG()));
        this.DASHBOARDBGButton.setBackground(new Color(settings.getDASHBOARDBG()));
        this.DASHBOARDFONTButton.setForeground(new Color(settings.getDASHBOARDFONT()));

        this.downStreamCheckBox.setSelected(settings.isDownStream());
        this.upStreamCheckBox.setSelected(settings.isUpStream());
        this.fieldsDisplay.setSelected(settings.isFieldsShow());

        this.hierachyDepth.setSelectedItem(settings.getHierachyDepth());

        this.batchFieldHierachy.setSelected(settings.isBatchFieldHierachy());
        this.OpenAfterGen.setSelected(settings.isOpenAfterGen());
        this.outputPath.setText(settings.getOutputPath());
        this.downloadAfterExtractRadioButton.setSelected(settings.isDownloadAfterExtract());

        this.genScoutCmdsRadioButton.setSelected(settings.isGenScoutCode());

        this.tennonModeSelector.setSelectedItem(settings.getTennonShowMode());

        this.OnlyHiveTable.setSelected(settings.isHiveOnlyHierachy());

        this.color1Button.setBackground(new Color(settings.getColor1()));
        this.color2Button.setBackground(new Color(settings.getColor2()));
        this.color3Button.setBackground(new Color(settings.getColor3()));
        this.color4Button.setBackground(new Color(settings.getColor4()));


        this.IPTextField.setText(settings.getHost());
        this.PORTTextField.setText(settings.getPort());
        this.USERNAMETextField.setText(settings.getUser());
        this.PASSWORDPasswordField.setText(settings.getPassword());
        this.jdbcURL.setText(settings.getJdbcURL());
    }

    @Override
    public boolean isModified(@NotNull MyConfigurable settings) {
        boolean isModified = false;
        isModified |= !this.textField1.getText().equals(settings.getParam());
        isModified |= this.ClusterBgColorButton.getBackground().getRGB() != (settings.getClusterBgColor());
        isModified |= this.ClusterFontColorButton.getForeground().getRGB() != (settings.getClusterFontColor());
        isModified |= this.TableBgColorButton.getForeground().getRGB() != (settings.getTableBgColor());
        isModified |= this.TableFontColor.getForeground().getRGB() != (settings.getTableFontColor());
        isModified |= this.FieldBgColorButton.getForeground().getRGB() != (settings.getFieldBgColor());
        isModified |= this.FieldsFontColorButton.getForeground().getRGB() != (settings.getFieldsFontColor());
        isModified |= this.ArrowColorButton.getForeground().getRGB() != (settings.getArrowColor());
        isModified |= this.hiveLayerColorCheckBox.isSelected() != (settings.isHiveLayerColor());
        isModified |= this.STGBGButton.getBackground().getRGB() != (settings.getSTGBG());
        isModified |= this.STGFontButton.getForeground().getRGB() != (settings.getSTGFont());
        isModified |= this.ODSBGButton.getBackground().getRGB() != (settings.getODSBG());
        isModified |= this.ODSFontButton.getForeground().getRGB() != (settings.getODSFont());
        isModified |= this.DWDBGButton.getBackground().getRGB() != (settings.getDWDBG());
        isModified |= this.DWDFontButton.getForeground().getRGB() != (settings.getDWDFont());
        isModified |= this.DWMBGButton.getBackground().getRGB() != (settings.getDWMBG());
        isModified |= this.DWMFontButton.getForeground().getRGB() != (settings.getDWMFont());
        isModified |= this.APPBGButton.getBackground().getRGB() != (settings.getAPPBG());
        isModified |= this.APPFontButton.getForeground().getRGB() != (settings.getAPPFont());
        isModified |= this.DIMBGButton.getBackground().getRGB() != (settings.getDIMBG());
        isModified |= this.DIMFontButton.getForeground().getRGB() != (settings.getDIMFont());
        isModified |= this.MYSQLBGButton.getBackground().getRGB() != (settings.getMYSQLBG());
        isModified |= this.MYSQLFONTButton.getForeground().getRGB() != (settings.getMYSQLFONT());
        isModified |= this.HIVEBGButton.getBackground().getRGB() != (settings.getHIVEBG());
        isModified |= this.HIVEFONTButton.getForeground().getRGB() != (settings.getHIVEFONT());
        isModified |= this.CLICKHOUSEBGButton.getBackground().getRGB() != (settings.getCLICKHOUSEBG());
        isModified |= this.CLICKHOUSEFONTButton.getForeground().getRGB() != (settings.getCLICKHOUSEFONT());
        isModified |= this.dataSetBGButton.getBackground().getRGB() != (settings.getDataSetBG());
        isModified |= this.DATASETFONTButton.getForeground().getRGB() != (settings.getDATASETFONT());
        isModified |= this.DASHBOARDBGButton.getBackground().getRGB() != (settings.getDASHBOARDBG());
        isModified |= this.DASHBOARDFONTButton.getForeground().getRGB() != (settings.getDASHBOARDFONT());

        isModified |= this.downStreamCheckBox.isSelected() != (settings.isDownStream());
        isModified |= this.upStreamCheckBox.isSelected() != (settings.isUpStream());
        isModified |= this.fieldsDisplay.isSelected() != (settings.isFieldsShow());

        isModified |= !(this.hierachyDepth.getSelectedItem().equals(settings.hierachyDepth));

        isModified |= this.batchFieldHierachy.isSelected() != settings.isBatchFieldHierachy();
        isModified |= this.OpenAfterGen.isSelected() != (settings.isOpenAfterGen());


        isModified |= !(this.outputPath.getText().equals(settings.getOutputPath()));

        isModified |= this.downloadAfterExtractRadioButton.isSelected() != settings.isDownloadAfterExtract();

        isModified |= this.genScoutCmdsRadioButton.isSelected() != settings.isGenScoutCode();

        isModified |= !(this.tennonModeSelector.getSelectedItem().equals(settings.getTennonShowMode()));

        isModified |= this.OnlyHiveTable.isSelected() != settings.isHiveOnlyHierachy();


        isModified |= this.color1Button.getBackground().getRGB() != settings.getColor1();
        isModified |= this.color2Button.getBackground().getRGB() != settings.getColor2();
        isModified |= this.color3Button.getBackground().getRGB() != settings.getColor3();
        isModified |= this.color4Button.getBackground().getRGB() != settings.getColor4();


        isModified |= !(this.IPTextField.getText().equals(settings.getHost()));
        isModified |= !(this.PORTTextField.getText().equals(settings.getPort()));
        isModified |= !(this.USERNAMETextField.getText().equals(settings.getUser()));
        isModified |= !(this.PASSWORDPasswordField.getText().equals(settings.getPassword()));

        isModified |= !(this.jdbcURL.getText().equals(settings.getJdbcURL()));


        return isModified;
    }

    @Override
    public void apply(@NotNull MyConfigurable settings) {
        settings.setParam(this.textField1.getText());
        settings.setClusterBgColor(this.ClusterBgColorButton.getForeground().getRGB());
        settings.setClusterFontColor(this.ClusterFontColorButton.getForeground().getRGB());
        settings.setTableBgColor(this.TableBgColorButton.getForeground().getRGB());
        settings.setTableFontColor(this.TableFontColor.getForeground().getRGB());
        settings.setFieldBgColor(this.FieldBgColorButton.getForeground().getRGB());
        settings.setFieldsFontColor(this.FieldsFontColorButton.getForeground().getRGB());
        settings.setArrowColor(this.ArrowColorButton.getForeground().getRGB());

        settings.setHiveLayerColor(this.hiveLayerColorCheckBox.isSelected());
        settings.setSTGBG(this.STGBGButton.getBackground().getRGB());
        settings.setSTGFont(this.STGFontButton.getForeground().getRGB());
        settings.setODSBG(this.ODSBGButton.getBackground().getRGB());
        settings.setODSFont(this.ODSFontButton.getForeground().getRGB());
        settings.setDWDBG(this.DWDBGButton.getBackground().getRGB());
        settings.setDWDFont(this.DWDFontButton.getForeground().getRGB());
        settings.setDWMBG(this.DWMBGButton.getBackground().getRGB());
        settings.setDWMFont(this.DWMFontButton.getForeground().getRGB());
        settings.setAPPBG(this.APPBGButton.getBackground().getRGB());
        settings.setAPPFont(this.APPFontButton.getForeground().getRGB());


        settings.setMYSQLBG(this.MYSQLBGButton.getBackground().getRGB());
        settings.setMYSQLFONT(this.MYSQLFONTButton.getForeground().getRGB());
        settings.setHIVEBG(this.HIVEBGButton.getBackground().getRGB());
        settings.setHIVEFONT(this.HIVEFONTButton.getForeground().getRGB());
        settings.setCLICKHOUSEBG(this.CLICKHOUSEBGButton.getBackground().getRGB());
        settings.setCLICKHOUSEFONT(this.CLICKHOUSEFONTButton.getForeground().getRGB());
        settings.setDataSetBG(this.dataSetBGButton.getBackground().getRGB());
        settings.setDATASETFONT(this.DATASETFONTButton.getForeground().getRGB());
        settings.setDASHBOARDBG(this.DASHBOARDBGButton.getBackground().getRGB());
        settings.setDASHBOARDFONT(this.DASHBOARDFONTButton.getForeground().getRGB());

        settings.setDownStream(this.downStreamCheckBox.isSelected());
        settings.setUpStream(this.upStreamCheckBox.isSelected());
        settings.setFieldsShow(this.fieldsDisplay.isSelected());

        settings.setHierachyDepth(this.hierachyDepth.getSelectedItem().toString());
        settings.setBatchFieldHierachy(this.batchFieldHierachy.isSelected());
        settings.setOpenAfterGen(this.OpenAfterGen.isSelected());
        settings.setOutputPath(this.outputPath.getText());
        settings.setDownloadAfterExtract(this.downloadAfterExtractRadioButton.isSelected());
        settings.setGenScoutCode(this.genScoutCmdsRadioButton.isSelected());
        settings.setTennonShowMode(this.tennonModeSelector.getSelectedItem().toString());

        settings.setHiveOnlyHierachy(this.OnlyHiveTable.isSelected());


        settings.setColor1(this.color1Button.getBackground().getRGB());
        settings.setColor2(this.color2Button.getBackground().getRGB());
        settings.setColor3(this.color3Button.getBackground().getRGB());
        settings.setColor4(this.color4Button.getBackground().getRGB());


        settings.setHost(this.IPTextField.getText());
        settings.setPort(this.PORTTextField.getText());
        settings.setUser(this.USERNAMETextField.getText());
        settings.setPassword(this.PASSWORDPasswordField.getText());

        settings.setJdbcURL(this.jdbcURL.getText());

    }

    @Override
    public @NotNull JComponent getComponent() {
        return this.panel1;
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }
}
